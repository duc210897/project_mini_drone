
drone_inhome_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007120  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007230  08007230  00008230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007328  08007328  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  08007328  08007328  00008328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007330  08007330  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007330  08007330  00008330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007334  08007334  00008334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08007338  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  20000088  080073c0  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  080073c0  00009418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f049  00000000  00000000  000090b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d0  00000000  00000000  000180fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  0001a1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2a  00000000  00000000  0001b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018389  00000000  00000000  0001bd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125fd  00000000  00000000  000340d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ddb4  00000000  00000000  000466d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b88  00000000  00000000  000d44c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d9050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08007218 	.word	0x08007218

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08007218 	.word	0x08007218

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <__aeabi_f2uiz>:
 800111c:	0042      	lsls	r2, r0, #1
 800111e:	d20e      	bcs.n	800113e <__aeabi_f2uiz+0x22>
 8001120:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001124:	d30b      	bcc.n	800113e <__aeabi_f2uiz+0x22>
 8001126:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800112a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800112e:	d409      	bmi.n	8001144 <__aeabi_f2uiz+0x28>
 8001130:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001138:	fa23 f002 	lsr.w	r0, r3, r2
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2uiz+0x32>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d102      	bne.n	8001154 <__aeabi_f2uiz+0x38>
 800114e:	f04f 30ff 	mov.w	r0, #4294967295
 8001152:	4770      	bx	lr
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop

0800115c <HAL_UART_RxCpltCallback>:

uint8_t index_count_receive_data = 0;

e_transfer_status ready_to_convert = E_NOT_READY_FOR_TRANSFER;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	index_count_receive_data+=5;
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <HAL_UART_RxCpltCallback+0x24>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	3305      	adds	r3, #5
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b04      	ldr	r3, [pc, #16]	@ (8001180 <HAL_UART_RxCpltCallback+0x24>)
 800116e:	701a      	strb	r2, [r3, #0]
    ready_to_convert = E_READY_FOR_TRANSFER;
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <HAL_UART_RxCpltCallback+0x28>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]

#if UART_LOOPBACK_DATA
    transferdata.status = E_READY_FOR_TRANSFER;
    HAL_UART_Transmit_IT(&huart1, transferdata.data, 1);
#endif
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	200002c5 	.word	0x200002c5
 8001184:	200002c6 	.word	0x200002c6

08001188 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
		{
			HAL_UART_Transmit_IT(&huart1, transferdata.data, 1);
		}
	}
#endif
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
	...

0800119c <UART_Print>:


void UART_Print(const char* str)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_IT(&huart1, (uint8_t*)str, strlen(str));
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7fe ffd3 	bl	8000150 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <UART_Print+0x24>)
 80011b4:	f004 faa6 	bl	8005704 <HAL_UART_Transmit_IT>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000194 	.word	0x20000194

080011c4 <get_time_milis>:

void get_time_milis()
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
    uint32_t count = __HAL_TIM_GET_COUNTER(&htim1);
 80011ca:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <get_time_milis+0x90>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	607b      	str	r3, [r7, #4]

    if(count > g_prev_count)
 80011d2:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <get_time_milis+0x94>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d917      	bls.n	800120c <get_time_milis+0x48>
    {
    	g_elapsedTime = (float) (((float)count - (float)g_prev_count)/(float)100000);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff fd59 	bl	8000c94 <__aeabi_ui2f>
 80011e2:	4604      	mov	r4, r0
 80011e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <get_time_milis+0x94>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fd53 	bl	8000c94 <__aeabi_ui2f>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4620      	mov	r0, r4
 80011f4:	f7ff fc9c 	bl	8000b30 <__aeabi_fsub>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4918      	ldr	r1, [pc, #96]	@ (800125c <get_time_milis+0x98>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe55 	bl	8000eac <__aeabi_fdiv>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <get_time_milis+0x9c>)
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e01b      	b.n	8001244 <get_time_milis+0x80>
    }
    else
    {
    	g_elapsedTime =  ((((float)65535 - ((float)g_prev_count - (float)count))/(float)100000));
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <get_time_milis+0x94>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fd3f 	bl	8000c94 <__aeabi_ui2f>
 8001216:	4604      	mov	r4, r0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fd3b 	bl	8000c94 <__aeabi_ui2f>
 800121e:	4603      	mov	r3, r0
 8001220:	4619      	mov	r1, r3
 8001222:	4620      	mov	r0, r4
 8001224:	f7ff fc84 	bl	8000b30 <__aeabi_fsub>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	480d      	ldr	r0, [pc, #52]	@ (8001264 <get_time_milis+0xa0>)
 800122e:	f7ff fc7f 	bl	8000b30 <__aeabi_fsub>
 8001232:	4603      	mov	r3, r0
 8001234:	4909      	ldr	r1, [pc, #36]	@ (800125c <get_time_milis+0x98>)
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fe38 	bl	8000eac <__aeabi_fdiv>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <get_time_milis+0x9c>)
 8001242:	601a      	str	r2, [r3, #0]
    }
	g_prev_count = count;
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <get_time_milis+0x94>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6013      	str	r3, [r2, #0]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
 8001252:	bf00      	nop
 8001254:	20000104 	.word	0x20000104
 8001258:	200001e8 	.word	0x200001e8
 800125c:	47c35000 	.word	0x47c35000
 8001260:	200001e0 	.word	0x200001e0
 8001264:	477fff00 	.word	0x477fff00

08001268 <converdata>:


uint32_t throtle = 1050;
void converdata()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    if(ready_to_convert == E_READY_FOR_TRANSFER)
 800126c:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <converdata+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d12c      	bne.n	80012ce <converdata+0x66>
    {

    	ready_to_convert = E_NOT_READY_FOR_TRANSFER;
 8001274:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <converdata+0x6c>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]

    	if(receive_data[0] == 'u')
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <converdata+0x70>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b75      	cmp	r3, #117	@ 0x75
 8001280:	d11d      	bne.n	80012be <converdata+0x56>
    	{
    		throtle = (receive_data[1] - 48)*1000 + (receive_data[2] - 48)*100 + (receive_data[3] - 48) * 10 + (receive_data[4] - 48);
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <converdata+0x70>)
 8001284:	785b      	ldrb	r3, [r3, #1]
 8001286:	3b30      	subs	r3, #48	@ 0x30
 8001288:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800128c:	fb03 f202 	mul.w	r2, r3, r2
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <converdata+0x70>)
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	3b30      	subs	r3, #48	@ 0x30
 8001296:	2164      	movs	r1, #100	@ 0x64
 8001298:	fb01 f303 	mul.w	r3, r1, r3
 800129c:	18d1      	adds	r1, r2, r3
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <converdata+0x70>)
 80012a0:	78db      	ldrb	r3, [r3, #3]
 80012a2:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	18ca      	adds	r2, r1, r3
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <converdata+0x70>)
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	3b30      	subs	r3, #48	@ 0x30
 80012b6:	4413      	add	r3, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <converdata+0x74>)
 80012bc:	601a      	str	r2, [r3, #0]
    	}
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&receive_data, 5);
 80012be:	2205      	movs	r2, #5
 80012c0:	4905      	ldr	r1, [pc, #20]	@ (80012d8 <converdata+0x70>)
 80012c2:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <converdata+0x78>)
 80012c4:	f004 fa53 	bl	800576e <HAL_UART_Receive_IT>
        status_connected = E_CONNECTED;
 80012c8:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <converdata+0x7c>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	701a      	strb	r2, [r3, #0]
    }
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200002c6 	.word	0x200002c6
 80012d8:	200002c0 	.word	0x200002c0
 80012dc:	20000018 	.word	0x20000018
 80012e0:	20000194 	.word	0x20000194
 80012e4:	200001dc 	.word	0x200001dc

080012e8 <SetBrushMotor>:

void SetBrushMotor()
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  if(throtle > 1050)
 80012ec:	4b60      	ldr	r3, [pc, #384]	@ (8001470 <SetBrushMotor+0x188>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f240 421a 	movw	r2, #1050	@ 0x41a
 80012f4:	4293      	cmp	r3, r2
 80012f6:	f240 8095 	bls.w	8001424 <SetBrushMotor+0x13c>
  {
	  if(m1 <= 2000)
 80012fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001474 <SetBrushMotor+0x18c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001302:	d81b      	bhi.n	800133c <SetBrushMotor+0x54>
	  {
		m1 = throtle + pid_roll - pid_pitch;
 8001304:	4b5a      	ldr	r3, [pc, #360]	@ (8001470 <SetBrushMotor+0x188>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fcc3 	bl	8000c94 <__aeabi_ui2f>
 800130e:	4602      	mov	r2, r0
 8001310:	4b59      	ldr	r3, [pc, #356]	@ (8001478 <SetBrushMotor+0x190>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	4610      	mov	r0, r2
 8001318:	f7ff fc0c 	bl	8000b34 <__addsf3>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	4b56      	ldr	r3, [pc, #344]	@ (800147c <SetBrushMotor+0x194>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	4610      	mov	r0, r2
 8001328:	f7ff fc02 	bl	8000b30 <__aeabi_fsub>
 800132c:	4603      	mov	r3, r0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fef4 	bl	800111c <__aeabi_f2uiz>
 8001334:	4603      	mov	r3, r0
 8001336:	4a4f      	ldr	r2, [pc, #316]	@ (8001474 <SetBrushMotor+0x18c>)
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e003      	b.n	8001344 <SetBrushMotor+0x5c>
	  }
	  else
	  {
		  m1 = 2000;
 800133c:	4b4d      	ldr	r3, [pc, #308]	@ (8001474 <SetBrushMotor+0x18c>)
 800133e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001342:	601a      	str	r2, [r3, #0]
	  }

	  if(m2 <= 2000)
 8001344:	4b4e      	ldr	r3, [pc, #312]	@ (8001480 <SetBrushMotor+0x198>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800134c:	d81b      	bhi.n	8001386 <SetBrushMotor+0x9e>
	  {
		m2 = throtle + pid_roll + pid_pitch;
 800134e:	4b48      	ldr	r3, [pc, #288]	@ (8001470 <SetBrushMotor+0x188>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fc9e 	bl	8000c94 <__aeabi_ui2f>
 8001358:	4602      	mov	r2, r0
 800135a:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <SetBrushMotor+0x190>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f7ff fbe7 	bl	8000b34 <__addsf3>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b44      	ldr	r3, [pc, #272]	@ (800147c <SetBrushMotor+0x194>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	4610      	mov	r0, r2
 8001372:	f7ff fbdf 	bl	8000b34 <__addsf3>
 8001376:	4603      	mov	r3, r0
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fecf 	bl	800111c <__aeabi_f2uiz>
 800137e:	4603      	mov	r3, r0
 8001380:	4a3f      	ldr	r2, [pc, #252]	@ (8001480 <SetBrushMotor+0x198>)
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e003      	b.n	800138e <SetBrushMotor+0xa6>
	  }
	  else
	  {
		  m2 = 2000;
 8001386:	4b3e      	ldr	r3, [pc, #248]	@ (8001480 <SetBrushMotor+0x198>)
 8001388:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800138c:	601a      	str	r2, [r3, #0]
	  }

	  if(m3 <= 2000)
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <SetBrushMotor+0x19c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001396:	d81b      	bhi.n	80013d0 <SetBrushMotor+0xe8>
	  {
		m3 = throtle - pid_roll + pid_pitch;
 8001398:	4b35      	ldr	r3, [pc, #212]	@ (8001470 <SetBrushMotor+0x188>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fc79 	bl	8000c94 <__aeabi_ui2f>
 80013a2:	4602      	mov	r2, r0
 80013a4:	4b34      	ldr	r3, [pc, #208]	@ (8001478 <SetBrushMotor+0x190>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4610      	mov	r0, r2
 80013ac:	f7ff fbc0 	bl	8000b30 <__aeabi_fsub>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b31      	ldr	r3, [pc, #196]	@ (800147c <SetBrushMotor+0x194>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	4610      	mov	r0, r2
 80013bc:	f7ff fbba 	bl	8000b34 <__addsf3>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff feaa 	bl	800111c <__aeabi_f2uiz>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001484 <SetBrushMotor+0x19c>)
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e003      	b.n	80013d8 <SetBrushMotor+0xf0>
	  }
	  else
	  {
		  m3 = 2000;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <SetBrushMotor+0x19c>)
 80013d2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80013d6:	601a      	str	r2, [r3, #0]
	  }


	  if(m4 <= 2000)
 80013d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <SetBrushMotor+0x1a0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80013e0:	d81b      	bhi.n	800141a <SetBrushMotor+0x132>
	  {
		m4 = throtle - pid_roll - pid_pitch;
 80013e2:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <SetBrushMotor+0x188>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fc54 	bl	8000c94 <__aeabi_ui2f>
 80013ec:	4602      	mov	r2, r0
 80013ee:	4b22      	ldr	r3, [pc, #136]	@ (8001478 <SetBrushMotor+0x190>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4619      	mov	r1, r3
 80013f4:	4610      	mov	r0, r2
 80013f6:	f7ff fb9b 	bl	8000b30 <__aeabi_fsub>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <SetBrushMotor+0x194>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4619      	mov	r1, r3
 8001404:	4610      	mov	r0, r2
 8001406:	f7ff fb93 	bl	8000b30 <__aeabi_fsub>
 800140a:	4603      	mov	r3, r0
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fe85 	bl	800111c <__aeabi_f2uiz>
 8001412:	4603      	mov	r3, r0
 8001414:	4a1c      	ldr	r2, [pc, #112]	@ (8001488 <SetBrushMotor+0x1a0>)
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	e014      	b.n	8001444 <SetBrushMotor+0x15c>
	  }
	  else
	  {
		  m4 = 2000;
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <SetBrushMotor+0x1a0>)
 800141c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	e00f      	b.n	8001444 <SetBrushMotor+0x15c>

  }

  else
  {
	  m1 = 1050;
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <SetBrushMotor+0x18c>)
 8001426:	f240 421a 	movw	r2, #1050	@ 0x41a
 800142a:	601a      	str	r2, [r3, #0]
	  m2 = 1050;
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <SetBrushMotor+0x198>)
 800142e:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001432:	601a      	str	r2, [r3, #0]
	  m3 = 1050;
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <SetBrushMotor+0x19c>)
 8001436:	f240 421a 	movw	r2, #1050	@ 0x41a
 800143a:	601a      	str	r2, [r3, #0]
	  m4 = 1050;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <SetBrushMotor+0x1a0>)
 800143e:	f240 421a 	movw	r2, #1050	@ 0x41a
 8001442:	601a      	str	r2, [r3, #0]

  }

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, throtle);
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <SetBrushMotor+0x1a4>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <SetBrushMotor+0x188>)
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, throtle);
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <SetBrushMotor+0x1a4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a07      	ldr	r2, [pc, #28]	@ (8001470 <SetBrushMotor+0x188>)
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, throtle);
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <SetBrushMotor+0x1a4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <SetBrushMotor+0x188>)
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, throtle);
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <SetBrushMotor+0x1a4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a02      	ldr	r2, [pc, #8]	@ (8001470 <SetBrushMotor+0x188>)
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	641a      	str	r2, [r3, #64]	@ 0x40
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, m2);
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, m4);
  //__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, m3);

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000018 	.word	0x20000018
 8001474:	2000022c 	.word	0x2000022c
 8001478:	20000278 	.word	0x20000278
 800147c:	20000290 	.word	0x20000290
 8001480:	20000230 	.word	0x20000230
 8001484:	20000234 	.word	0x20000234
 8001488:	20000238 	.word	0x20000238
 800148c:	2000014c 	.word	0x2000014c

08001490 <calculate_pid>:

void calculate_pid()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0

	if(throtle > 1150)
 8001496:	4b3f      	ldr	r3, [pc, #252]	@ (8001594 <calculate_pid+0x104>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f240 427e 	movw	r2, #1150	@ 0x47e
 800149e:	4293      	cmp	r3, r2
 80014a0:	f240 81f6 	bls.w	8001890 <calculate_pid+0x400>
	{
		int32_t l_roll  = (int32_t ) ((Roll_filter > 0) ?  (Roll_filter + 0.5) : (Roll_filter - 0.5));
 80014a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001598 <calculate_pid+0x108>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f04f 0100 	mov.w	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fe05 	bl	80010bc <__aeabi_fcmpgt>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d011      	beq.n	80014dc <calculate_pid+0x4c>
 80014b8:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <calculate_pid+0x108>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7fe ffb3 	bl	8000428 <__aeabi_f2d>
 80014c2:	f04f 0200 	mov.w	r2, #0
 80014c6:	4b35      	ldr	r3, [pc, #212]	@ (800159c <calculate_pid+0x10c>)
 80014c8:	f7fe fe50 	bl	800016c <__adddf3>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f7ff fab0 	bl	8000a38 <__aeabi_d2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	e010      	b.n	80014fe <calculate_pid+0x6e>
 80014dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <calculate_pid+0x108>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ffa1 	bl	8000428 <__aeabi_f2d>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b2c      	ldr	r3, [pc, #176]	@ (800159c <calculate_pid+0x10c>)
 80014ec:	f7fe fe3c 	bl	8000168 <__aeabi_dsub>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fa9e 	bl	8000a38 <__aeabi_d2iz>
 80014fc:	4603      	mov	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]
		int32_t l_pitch  = (int32_t ) ((Pitch_filter > 0) ?  (Pitch_filter + 0.5) : (Pitch_filter - 0.5));
 8001500:	4b27      	ldr	r3, [pc, #156]	@ (80015a0 <calculate_pid+0x110>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fdd7 	bl	80010bc <__aeabi_fcmpgt>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d011      	beq.n	8001538 <calculate_pid+0xa8>
 8001514:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <calculate_pid+0x110>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ff85 	bl	8000428 <__aeabi_f2d>
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	4b1e      	ldr	r3, [pc, #120]	@ (800159c <calculate_pid+0x10c>)
 8001524:	f7fe fe22 	bl	800016c <__adddf3>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	f7ff fa82 	bl	8000a38 <__aeabi_d2iz>
 8001534:	4603      	mov	r3, r0
 8001536:	e010      	b.n	800155a <calculate_pid+0xca>
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <calculate_pid+0x110>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ff73 	bl	8000428 <__aeabi_f2d>
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <calculate_pid+0x10c>)
 8001548:	f7fe fe0e 	bl	8000168 <__aeabi_dsub>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fa70 	bl	8000a38 <__aeabi_d2iz>
 8001558:	4603      	mov	r3, r0
 800155a:	60bb      	str	r3, [r7, #8]
		int32_t l_yaw  = (int32_t ) ((Yaw_filter > 0) ?  (Yaw_filter + 0.5) : (Yaw_filter - 0.5));
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <calculate_pid+0x114>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f04f 0100 	mov.w	r1, #0
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fda9 	bl	80010bc <__aeabi_fcmpgt>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <calculate_pid+0x118>
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <calculate_pid+0x114>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ff57 	bl	8000428 <__aeabi_f2d>
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <calculate_pid+0x10c>)
 8001580:	f7fe fdf4 	bl	800016c <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff fa54 	bl	8000a38 <__aeabi_d2iz>
 8001590:	4603      	mov	r3, r0
 8001592:	e01a      	b.n	80015ca <calculate_pid+0x13a>
 8001594:	20000018 	.word	0x20000018
 8001598:	20000254 	.word	0x20000254
 800159c:	3fe00000 	.word	0x3fe00000
 80015a0:	20000258 	.word	0x20000258
 80015a4:	2000025c 	.word	0x2000025c
 80015a8:	4b90      	ldr	r3, [pc, #576]	@ (80017ec <calculate_pid+0x35c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ff3b 	bl	8000428 <__aeabi_f2d>
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b8e      	ldr	r3, [pc, #568]	@ (80017f0 <calculate_pid+0x360>)
 80015b8:	f7fe fdd6 	bl	8000168 <__aeabi_dsub>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fa38 	bl	8000a38 <__aeabi_d2iz>
 80015c8:	4603      	mov	r3, r0
 80015ca:	607b      	str	r3, [r7, #4]
		pid_roll_error  = l_roll - roll_desire;
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f7ff fb65 	bl	8000c9c <__aeabi_i2f>
 80015d2:	4602      	mov	r2, r0
 80015d4:	4b87      	ldr	r3, [pc, #540]	@ (80017f4 <calculate_pid+0x364>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f7ff faa8 	bl	8000b30 <__aeabi_fsub>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b84      	ldr	r3, [pc, #528]	@ (80017f8 <calculate_pid+0x368>)
 80015e6:	601a      	str	r2, [r3, #0]
		pid_pitch_error = l_pitch - pitch_desire;
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f7ff fb57 	bl	8000c9c <__aeabi_i2f>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b82      	ldr	r3, [pc, #520]	@ (80017fc <calculate_pid+0x36c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4610      	mov	r0, r2
 80015f8:	f7ff fa9a 	bl	8000b30 <__aeabi_fsub>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	4b7f      	ldr	r3, [pc, #508]	@ (8001800 <calculate_pid+0x370>)
 8001602:	601a      	str	r2, [r3, #0]
		pid_yaw_error   = l_yaw - yaw_desire;
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fb49 	bl	8000c9c <__aeabi_i2f>
 800160a:	4602      	mov	r2, r0
 800160c:	4b7d      	ldr	r3, [pc, #500]	@ (8001804 <calculate_pid+0x374>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fa8c 	bl	8000b30 <__aeabi_fsub>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b7a      	ldr	r3, [pc, #488]	@ (8001808 <calculate_pid+0x378>)
 800161e:	601a      	str	r2, [r3, #0]

		pid_roll_p  = kp_roll * pid_roll_error;
 8001620:	4b7a      	ldr	r3, [pc, #488]	@ (800180c <calculate_pid+0x37c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a74      	ldr	r2, [pc, #464]	@ (80017f8 <calculate_pid+0x368>)
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb8a 	bl	8000d44 <__aeabi_fmul>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b76      	ldr	r3, [pc, #472]	@ (8001810 <calculate_pid+0x380>)
 8001636:	601a      	str	r2, [r3, #0]
		pid_pitch_p = kp_pitch * pid_pitch_error;
 8001638:	4b76      	ldr	r3, [pc, #472]	@ (8001814 <calculate_pid+0x384>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a70      	ldr	r2, [pc, #448]	@ (8001800 <calculate_pid+0x370>)
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fb7e 	bl	8000d44 <__aeabi_fmul>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b72      	ldr	r3, [pc, #456]	@ (8001818 <calculate_pid+0x388>)
 800164e:	601a      	str	r2, [r3, #0]
		pid_yaw_p   = kp_yaw * pid_yaw_error;
 8001650:	4b72      	ldr	r3, [pc, #456]	@ (800181c <calculate_pid+0x38c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6c      	ldr	r2, [pc, #432]	@ (8001808 <calculate_pid+0x378>)
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb72 	bl	8000d44 <__aeabi_fmul>
 8001660:	4603      	mov	r3, r0
 8001662:	461a      	mov	r2, r3
 8001664:	4b6e      	ldr	r3, [pc, #440]	@ (8001820 <calculate_pid+0x390>)
 8001666:	601a      	str	r2, [r3, #0]


		if(-5 <pid_roll_error <5)
		{
		   pid_roll_i = pid_roll_i+(ki_roll*pid_roll_error);
 8001668:	4b6e      	ldr	r3, [pc, #440]	@ (8001824 <calculate_pid+0x394>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a62      	ldr	r2, [pc, #392]	@ (80017f8 <calculate_pid+0x368>)
 800166e:	6812      	ldr	r2, [r2, #0]
 8001670:	4611      	mov	r1, r2
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fb66 	bl	8000d44 <__aeabi_fmul>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	4b6a      	ldr	r3, [pc, #424]	@ (8001828 <calculate_pid+0x398>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f7ff fa56 	bl	8000b34 <__addsf3>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	4b66      	ldr	r3, [pc, #408]	@ (8001828 <calculate_pid+0x398>)
 800168e:	601a      	str	r2, [r3, #0]
		}

		if(-5 <pid_pitch_error <5)
		{
			pid_pitch_i = pid_pitch_i+(ki_pitch*pid_pitch_error);
 8001690:	4b66      	ldr	r3, [pc, #408]	@ (800182c <calculate_pid+0x39c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a5a      	ldr	r2, [pc, #360]	@ (8001800 <calculate_pid+0x370>)
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fb52 	bl	8000d44 <__aeabi_fmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b62      	ldr	r3, [pc, #392]	@ (8001830 <calculate_pid+0x3a0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4610      	mov	r0, r2
 80016ac:	f7ff fa42 	bl	8000b34 <__addsf3>
 80016b0:	4603      	mov	r3, r0
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001830 <calculate_pid+0x3a0>)
 80016b6:	601a      	str	r2, [r3, #0]
		}

		if(-5 <pid_yaw_error <5)
		{
			pid_yaw_i = pid_yaw_i+(ki_yaw*pid_yaw_error);
 80016b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001834 <calculate_pid+0x3a4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a52      	ldr	r2, [pc, #328]	@ (8001808 <calculate_pid+0x378>)
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fb3e 	bl	8000d44 <__aeabi_fmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b5a      	ldr	r3, [pc, #360]	@ (8001838 <calculate_pid+0x3a8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff fa2e 	bl	8000b34 <__addsf3>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	4b56      	ldr	r3, [pc, #344]	@ (8001838 <calculate_pid+0x3a8>)
 80016de:	601a      	str	r2, [r3, #0]
		}


		pid_roll_d = ki_roll*((pid_roll_error - pid_roll_previous_error)/g_elapsedTime);
 80016e0:	4b45      	ldr	r3, [pc, #276]	@ (80017f8 <calculate_pid+0x368>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a55      	ldr	r2, [pc, #340]	@ (800183c <calculate_pid+0x3ac>)
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fa20 	bl	8000b30 <__aeabi_fsub>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <calculate_pid+0x3b0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f7ff fbd6 	bl	8000eac <__aeabi_fdiv>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	4b47      	ldr	r3, [pc, #284]	@ (8001824 <calculate_pid+0x394>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4619      	mov	r1, r3
 800170a:	4610      	mov	r0, r2
 800170c:	f7ff fb1a 	bl	8000d44 <__aeabi_fmul>
 8001710:	4603      	mov	r3, r0
 8001712:	461a      	mov	r2, r3
 8001714:	4b4b      	ldr	r3, [pc, #300]	@ (8001844 <calculate_pid+0x3b4>)
 8001716:	601a      	str	r2, [r3, #0]
		pid_pitch_d = ki_pitch*((pid_pitch_error - pid_pitch_previous_error)/g_elapsedTime);
 8001718:	4b39      	ldr	r3, [pc, #228]	@ (8001800 <calculate_pid+0x370>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a4a      	ldr	r2, [pc, #296]	@ (8001848 <calculate_pid+0x3b8>)
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fa04 	bl	8000b30 <__aeabi_fsub>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	4b44      	ldr	r3, [pc, #272]	@ (8001840 <calculate_pid+0x3b0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	4610      	mov	r0, r2
 8001734:	f7ff fbba 	bl	8000eac <__aeabi_fdiv>
 8001738:	4603      	mov	r3, r0
 800173a:	461a      	mov	r2, r3
 800173c:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <calculate_pid+0x39c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f7ff fafe 	bl	8000d44 <__aeabi_fmul>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	4b3f      	ldr	r3, [pc, #252]	@ (800184c <calculate_pid+0x3bc>)
 800174e:	601a      	str	r2, [r3, #0]
		pid_yaw_d = ki_yaw*((pid_yaw_error - pid_yaw_previous_error)/g_elapsedTime);
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <calculate_pid+0x378>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a3e      	ldr	r2, [pc, #248]	@ (8001850 <calculate_pid+0x3c0>)
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f9e8 	bl	8000b30 <__aeabi_fsub>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b36      	ldr	r3, [pc, #216]	@ (8001840 <calculate_pid+0x3b0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4619      	mov	r1, r3
 800176a:	4610      	mov	r0, r2
 800176c:	f7ff fb9e 	bl	8000eac <__aeabi_fdiv>
 8001770:	4603      	mov	r3, r0
 8001772:	461a      	mov	r2, r3
 8001774:	4b2f      	ldr	r3, [pc, #188]	@ (8001834 <calculate_pid+0x3a4>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	4610      	mov	r0, r2
 800177c:	f7ff fae2 	bl	8000d44 <__aeabi_fmul>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	4b33      	ldr	r3, [pc, #204]	@ (8001854 <calculate_pid+0x3c4>)
 8001786:	601a      	str	r2, [r3, #0]


		pid_roll  = pid_roll_p + pid_roll_i + pid_roll_d;
 8001788:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <calculate_pid+0x380>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a26      	ldr	r2, [pc, #152]	@ (8001828 <calculate_pid+0x398>)
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	4611      	mov	r1, r2
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f9ce 	bl	8000b34 <__addsf3>
 8001798:	4603      	mov	r3, r0
 800179a:	461a      	mov	r2, r3
 800179c:	4b29      	ldr	r3, [pc, #164]	@ (8001844 <calculate_pid+0x3b4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4610      	mov	r0, r2
 80017a4:	f7ff f9c6 	bl	8000b34 <__addsf3>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <calculate_pid+0x3c8>)
 80017ae:	601a      	str	r2, [r3, #0]
		pid_pitch = pid_pitch_p + pid_pitch_i + pid_pitch_d;
 80017b0:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <calculate_pid+0x388>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001830 <calculate_pid+0x3a0>)
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f9ba 	bl	8000b34 <__addsf3>
 80017c0:	4603      	mov	r3, r0
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <calculate_pid+0x3bc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff f9b2 	bl	8000b34 <__addsf3>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b21      	ldr	r3, [pc, #132]	@ (800185c <calculate_pid+0x3cc>)
 80017d6:	601a      	str	r2, [r3, #0]
		pid_yaw   = pid_yaw_p + pid_yaw_i + pid_yaw_d;
 80017d8:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <calculate_pid+0x390>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a16      	ldr	r2, [pc, #88]	@ (8001838 <calculate_pid+0x3a8>)
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f9a6 	bl	8000b34 <__addsf3>
 80017e8:	4603      	mov	r3, r0
 80017ea:	e039      	b.n	8001860 <calculate_pid+0x3d0>
 80017ec:	2000025c 	.word	0x2000025c
 80017f0:	3fe00000 	.word	0x3fe00000
 80017f4:	2000026c 	.word	0x2000026c
 80017f8:	2000028c 	.word	0x2000028c
 80017fc:	20000270 	.word	0x20000270
 8001800:	200002a4 	.word	0x200002a4
 8001804:	20000274 	.word	0x20000274
 8001808:	200002bc 	.word	0x200002bc
 800180c:	20000000 	.word	0x20000000
 8001810:	2000027c 	.word	0x2000027c
 8001814:	20000008 	.word	0x20000008
 8001818:	20000294 	.word	0x20000294
 800181c:	20000010 	.word	0x20000010
 8001820:	200002ac 	.word	0x200002ac
 8001824:	20000004 	.word	0x20000004
 8001828:	20000280 	.word	0x20000280
 800182c:	2000000c 	.word	0x2000000c
 8001830:	20000298 	.word	0x20000298
 8001834:	20000014 	.word	0x20000014
 8001838:	200002b0 	.word	0x200002b0
 800183c:	20000288 	.word	0x20000288
 8001840:	200001e0 	.word	0x200001e0
 8001844:	20000284 	.word	0x20000284
 8001848:	200002a0 	.word	0x200002a0
 800184c:	2000029c 	.word	0x2000029c
 8001850:	200002b8 	.word	0x200002b8
 8001854:	200002b4 	.word	0x200002b4
 8001858:	20000278 	.word	0x20000278
 800185c:	20000290 	.word	0x20000290
 8001860:	461a      	mov	r2, r3
 8001862:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <calculate_pid+0x480>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	4610      	mov	r0, r2
 800186a:	f7ff f963 	bl	8000b34 <__addsf3>
 800186e:	4603      	mov	r3, r0
 8001870:	461a      	mov	r2, r3
 8001872:	4b28      	ldr	r3, [pc, #160]	@ (8001914 <calculate_pid+0x484>)
 8001874:	601a      	str	r2, [r3, #0]

		pid_roll_previous_error = pid_roll_error;
 8001876:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <calculate_pid+0x488>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a28      	ldr	r2, [pc, #160]	@ (800191c <calculate_pid+0x48c>)
 800187c:	6013      	str	r3, [r2, #0]
		pid_pitch_previous_error = pid_pitch_error;
 800187e:	4b28      	ldr	r3, [pc, #160]	@ (8001920 <calculate_pid+0x490>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a28      	ldr	r2, [pc, #160]	@ (8001924 <calculate_pid+0x494>)
 8001884:	6013      	str	r3, [r2, #0]
		pid_yaw_previous_error = pid_yaw_error;
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <calculate_pid+0x498>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a28      	ldr	r2, [pc, #160]	@ (800192c <calculate_pid+0x49c>)
 800188c:	6013      	str	r3, [r2, #0]

	}



}
 800188e:	e03b      	b.n	8001908 <calculate_pid+0x478>
		pid_roll_error  = 0;
 8001890:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <calculate_pid+0x488>)
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
		pid_pitch_error = 0;
 8001898:	4b21      	ldr	r3, [pc, #132]	@ (8001920 <calculate_pid+0x490>)
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
		pid_yaw_error   = 0;
 80018a0:	4b21      	ldr	r3, [pc, #132]	@ (8001928 <calculate_pid+0x498>)
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
		pid_roll_previous_error = 0;
 80018a8:	4b1c      	ldr	r3, [pc, #112]	@ (800191c <calculate_pid+0x48c>)
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
		pid_pitch_previous_error = 0;
 80018b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <calculate_pid+0x494>)
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
		pid_yaw_previous_error = 0;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <calculate_pid+0x49c>)
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
		pid_roll_p = 0;
 80018c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <calculate_pid+0x4a0>)
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
		pid_roll_i = 0;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <calculate_pid+0x4a4>)
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
		pid_roll_d = 0;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <calculate_pid+0x4a8>)
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
		pid_pitch_p = 0;
 80018d8:	4b18      	ldr	r3, [pc, #96]	@ (800193c <calculate_pid+0x4ac>)
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
		pid_pitch_i = 0;
 80018e0:	4b17      	ldr	r3, [pc, #92]	@ (8001940 <calculate_pid+0x4b0>)
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
		pid_pitch_d = 0;
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <calculate_pid+0x4b4>)
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
		pid_yaw_p = 0;
 80018f0:	4b15      	ldr	r3, [pc, #84]	@ (8001948 <calculate_pid+0x4b8>)
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
		pid_yaw_i = 0;
 80018f8:	4b14      	ldr	r3, [pc, #80]	@ (800194c <calculate_pid+0x4bc>)
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
		pid_yaw_d = 0;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <calculate_pid+0x480>)
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	3710      	adds	r7, #16
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200002b4 	.word	0x200002b4
 8001914:	200002a8 	.word	0x200002a8
 8001918:	2000028c 	.word	0x2000028c
 800191c:	20000288 	.word	0x20000288
 8001920:	200002a4 	.word	0x200002a4
 8001924:	200002a0 	.word	0x200002a0
 8001928:	200002bc 	.word	0x200002bc
 800192c:	200002b8 	.word	0x200002b8
 8001930:	2000027c 	.word	0x2000027c
 8001934:	20000280 	.word	0x20000280
 8001938:	20000284 	.word	0x20000284
 800193c:	20000294 	.word	0x20000294
 8001940:	20000298 	.word	0x20000298
 8001944:	2000029c 	.word	0x2000029c
 8001948:	200002ac 	.word	0x200002ac
 800194c:	200002b0 	.word	0x200002b0

08001950 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *hi2c, int16_t* Accel_X, int16_t* Accel_Y, int16_t* Accel_Z)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	@ 0x28
 8001954:	af04      	add	r7, sp, #16
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, Rec_Data, 6, HAL_MAX_DELAY);
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2306      	movs	r3, #6
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	f107 0310 	add.w	r3, r7, #16
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	223b      	movs	r2, #59	@ 0x3b
 8001972:	21d0      	movs	r1, #208	@ 0xd0
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f001 fde7 	bl	8003548 <HAL_I2C_Mem_Read>

    *Accel_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800197a:	7c3b      	ldrb	r3, [r7, #16]
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	7c7b      	ldrb	r3, [r7, #17]
 8001982:	b21b      	sxth	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	b21a      	sxth	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	801a      	strh	r2, [r3, #0]
    *Accel_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800198c:	7cbb      	ldrb	r3, [r7, #18]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	b21a      	sxth	r2, r3
 8001992:	7cfb      	ldrb	r3, [r7, #19]
 8001994:	b21b      	sxth	r3, r3
 8001996:	4313      	orrs	r3, r2
 8001998:	b21a      	sxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	801a      	strh	r2, [r3, #0]
    *Accel_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800199e:	7d3b      	ldrb	r3, [r7, #20]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	7d7b      	ldrb	r3, [r7, #21]
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	801a      	strh	r2, [r3, #0]
}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <MPU6050_Init>:

void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af04      	add	r7, sp, #16
 80019be:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t data;

    // Check device ID WHO_AM_I
    while (HAL_ERROR == HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, MPU6050_WHO_AM_I, 1, &check, 1, HAL_MAX_DELAY))
 80019c0:	bf00      	nop
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	2301      	movs	r3, #1
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	f107 030f 	add.w	r3, r7, #15
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	2275      	movs	r2, #117	@ 0x75
 80019d6:	21d0      	movs	r1, #208	@ 0xd0
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f001 fdb5 	bl	8003548 <HAL_I2C_Mem_Read>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d0ee      	beq.n	80019c2 <MPU6050_Init+0xa>
    {
    	;
    }

    if (check == 104) // 0x68 will be returned by the sensor if everything is ok
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b68      	cmp	r3, #104	@ 0x68
 80019e8:	d13f      	bne.n	8001a6a <MPU6050_Init+0xb2>
    {
        // Power management register 0X6B we should write all 0?�s to wake the sensor up
        data = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
 80019f2:	9302      	str	r3, [sp, #8]
 80019f4:	2301      	movs	r3, #1
 80019f6:	9301      	str	r3, [sp, #4]
 80019f8:	f107 030e 	add.w	r3, r7, #14
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2301      	movs	r3, #1
 8001a00:	226b      	movs	r2, #107	@ 0x6b
 8001a02:	21d0      	movs	r1, #208	@ 0xd0
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f001 fca5 	bl	8003354 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        data = 0x07;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x19, 1, &data, 1, HAL_MAX_DELAY);
 8001a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	2301      	movs	r3, #1
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	f107 030e 	add.w	r3, r7, #14
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2301      	movs	r3, #1
 8001a20:	2219      	movs	r2, #25
 8001a22:	21d0      	movs	r1, #208	@ 0xd0
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f001 fc95 	bl	8003354 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        data = 0x00; // +/- 2g (0x00 for 2g, 0x08 for 4g, 0x10 for 8g, 0x18 for 16g)
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1C, 1, &data, 1, HAL_MAX_DELAY);
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2301      	movs	r3, #1
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f107 030e 	add.w	r3, r7, #14
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	221c      	movs	r2, #28
 8001a42:	21d0      	movs	r1, #208	@ 0xd0
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f001 fc85 	bl	8003354 <HAL_I2C_Mem_Write>

        // Set gyroscopic configuration in GYRO_CONFIG Register
        data = 0x00; // +/- 250 degrees/sec
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, 0x1B, 1, &data, 1, HAL_MAX_DELAY);
 8001a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a52:	9302      	str	r3, [sp, #8]
 8001a54:	2301      	movs	r3, #1
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	f107 030e 	add.w	r3, r7, #14
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	221b      	movs	r2, #27
 8001a62:	21d0      	movs	r1, #208	@ 0xd0
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f001 fc75 	bl	8003354 <HAL_I2C_Mem_Write>
    }
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro(I2C_HandleTypeDef *hi2c, int16_t* Gyro_X, int16_t* Gyro_Y, int16_t* Gyro_Z)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b08a      	sub	sp, #40	@ 0x28
 8001a76:	af04      	add	r7, sp, #16
 8001a78:	60f8      	str	r0, [r7, #12]
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	603b      	str	r3, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, 0x43, 1, Rec_Data, 6, HAL_MAX_DELAY);
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	2306      	movs	r3, #6
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	f107 0310 	add.w	r3, r7, #16
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2301      	movs	r3, #1
 8001a92:	2243      	movs	r2, #67	@ 0x43
 8001a94:	21d0      	movs	r1, #208	@ 0xd0
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f001 fd56 	bl	8003548 <HAL_I2C_Mem_Read>

    *Gyro_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001a9c:	7c3b      	ldrb	r3, [r7, #16]
 8001a9e:	021b      	lsls	r3, r3, #8
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	7c7b      	ldrb	r3, [r7, #17]
 8001aa4:	b21b      	sxth	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	801a      	strh	r2, [r3, #0]
    *Gyro_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001aae:	7cbb      	ldrb	r3, [r7, #18]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	7cfb      	ldrb	r3, [r7, #19]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21a      	sxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	801a      	strh	r2, [r3, #0]
    *Gyro_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001ac0:	7d3b      	ldrb	r3, [r7, #20]
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	b21a      	sxth	r2, r3
 8001ac6:	7d7b      	ldrb	r3, [r7, #21]
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	4313      	orrs	r3, r2
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	801a      	strh	r2, [r3, #0]
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	0000      	movs	r0, r0
 8001adc:	0000      	movs	r0, r0
	...

08001ae0 <MPU6050_Convert_to_Angle>:

void MPU6050_Convert_to_Angle(float* Roll, float* Pitch, float* Yaw)
{
 8001ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ae4:	b089      	sub	sp, #36	@ 0x24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
    float Accel_X_f = (float)Acc_rawX;
 8001aee:	4b54      	ldr	r3, [pc, #336]	@ (8001c40 <MPU6050_Convert_to_Angle+0x160>)
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f8d1 	bl	8000c9c <__aeabi_i2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	61fb      	str	r3, [r7, #28]
    float Accel_Y_f = (float)Acc_rawY;
 8001afe:	4b51      	ldr	r3, [pc, #324]	@ (8001c44 <MPU6050_Convert_to_Angle+0x164>)
 8001b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f8c9 	bl	8000c9c <__aeabi_i2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	61bb      	str	r3, [r7, #24]
    float Accel_Z_f = (float)Acc_rawZ;
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001c48 <MPU6050_Convert_to_Angle+0x168>)
 8001b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f8c1 	bl	8000c9c <__aeabi_i2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	617b      	str	r3, [r7, #20]

    // Calculate the Roll angle (rotation around x-axis)
    *Roll = atan2(Accel_Y_f, Accel_Z_f) * RAD_TO_DEG;
 8001b1e:	69b8      	ldr	r0, [r7, #24]
 8001b20:	f7fe fc82 	bl	8000428 <__aeabi_f2d>
 8001b24:	4604      	mov	r4, r0
 8001b26:	460d      	mov	r5, r1
 8001b28:	6978      	ldr	r0, [r7, #20]
 8001b2a:	f7fe fc7d 	bl	8000428 <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f005 f80b 	bl	8006b50 <atan2>
 8001b3a:	a33d      	add	r3, pc, #244	@ (adr r3, 8001c30 <MPU6050_Convert_to_Angle+0x150>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fcca 	bl	80004d8 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7fe ff9c 	bl	8000a88 <__aeabi_d2f>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	601a      	str	r2, [r3, #0]

    // Calculate the Pitch angle (rotation around y-axis)
    *Pitch = atan2(-Accel_X_f, sqrt(Accel_Y_f * Accel_Y_f + Accel_Z_f * Accel_Z_f)) * RAD_TO_DEG;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc63 	bl	8000428 <__aeabi_f2d>
 8001b62:	4604      	mov	r4, r0
 8001b64:	460d      	mov	r5, r1
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	69b8      	ldr	r0, [r7, #24]
 8001b6a:	f7ff f8eb 	bl	8000d44 <__aeabi_fmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461e      	mov	r6, r3
 8001b72:	6979      	ldr	r1, [r7, #20]
 8001b74:	6978      	ldr	r0, [r7, #20]
 8001b76:	f7ff f8e5 	bl	8000d44 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f7fe ffd8 	bl	8000b34 <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc4e 	bl	8000428 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f004 ffde 	bl	8006b54 <sqrt>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f004 ffd6 	bl	8006b50 <atan2>
 8001ba4:	a322      	add	r3, pc, #136	@ (adr r3, 8001c30 <MPU6050_Convert_to_Angle+0x150>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fc95 	bl	80004d8 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe ff67 	bl	8000a88 <__aeabi_d2f>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	601a      	str	r2, [r3, #0]

    *Yaw += (Gyr_rawZ / 131.0) * g_elapsedTime;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fc2f 	bl	8000428 <__aeabi_f2d>
 8001bca:	4604      	mov	r4, r0
 8001bcc:	460d      	mov	r5, r1
 8001bce:	4b1f      	ldr	r3, [pc, #124]	@ (8001c4c <MPU6050_Convert_to_Angle+0x16c>)
 8001bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc15 	bl	8000404 <__aeabi_i2d>
 8001bda:	a317      	add	r3, pc, #92	@ (adr r3, 8001c38 <MPU6050_Convert_to_Angle+0x158>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fda4 	bl	800072c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4690      	mov	r8, r2
 8001bea:	4699      	mov	r9, r3
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <MPU6050_Convert_to_Angle+0x170>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fc19 	bl	8000428 <__aeabi_f2d>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	4649      	mov	r1, r9
 8001bfe:	f7fe fc6b 	bl	80004d8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe faaf 	bl	800016c <__adddf3>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4610      	mov	r0, r2
 8001c14:	4619      	mov	r1, r3
 8001c16:	f7fe ff37 	bl	8000a88 <__aeabi_d2f>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3724      	adds	r7, #36	@ 0x24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	1a63c1f8 	.word	0x1a63c1f8
 8001c34:	404ca5dc 	.word	0x404ca5dc
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40606000 	.word	0x40606000
 8001c40:	2000023c 	.word	0x2000023c
 8001c44:	2000023e 	.word	0x2000023e
 8001c48:	20000240 	.word	0x20000240
 8001c4c:	20000246 	.word	0x20000246
 8001c50:	200001e0 	.word	0x200001e0

08001c54 <MPU6050_calibrateGyroscope>:
void MPU6050_calibrateGyroscope(I2C_HandleTypeDef *hi2c) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 1000; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	e03e      	b.n	8001ce0 <MPU6050_calibrateGyroscope+0x8c>
        int16_t Gyro_X, Gyro_Y, Gyro_Z;
        MPU6050_Read_Gyro(hi2c, &Gyro_X, &Gyro_Y, &Gyro_Z);
 8001c62:	f107 030e 	add.w	r3, r7, #14
 8001c66:	f107 0210 	add.w	r2, r7, #16
 8001c6a:	f107 0112 	add.w	r1, r7, #18
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff feff 	bl	8001a72 <MPU6050_Read_Gyro>
        gyroX_offset += Gyro_X;
 8001c74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f80f 	bl	8000c9c <__aeabi_i2f>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <MPU6050_calibrateGyroscope+0xd8>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f7fe ff54 	bl	8000b34 <__addsf3>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4b26      	ldr	r3, [pc, #152]	@ (8001d2c <MPU6050_calibrateGyroscope+0xd8>)
 8001c92:	601a      	str	r2, [r3, #0]
        gyroY_offset += Gyro_Y;
 8001c94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe ffff 	bl	8000c9c <__aeabi_i2f>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <MPU6050_calibrateGyroscope+0xdc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f7fe ff44 	bl	8000b34 <__addsf3>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <MPU6050_calibrateGyroscope+0xdc>)
 8001cb2:	601a      	str	r2, [r3, #0]
        gyroZ_offset += Gyro_Z;
 8001cb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe ffef 	bl	8000c9c <__aeabi_i2f>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <MPU6050_calibrateGyroscope+0xe0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f7fe ff34 	bl	8000b34 <__addsf3>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <MPU6050_calibrateGyroscope+0xe0>)
 8001cd2:	601a      	str	r2, [r3, #0]
        HAL_Delay(1);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f000 fe91 	bl	80029fc <HAL_Delay>
    for (int i = 0; i < 1000; i++) {
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ce6:	dbbc      	blt.n	8001c62 <MPU6050_calibrateGyroscope+0xe>
    }
    gyroX_offset /= 1000;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	@ (8001d2c <MPU6050_calibrateGyroscope+0xd8>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4912      	ldr	r1, [pc, #72]	@ (8001d38 <MPU6050_calibrateGyroscope+0xe4>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff f8dc 	bl	8000eac <__aeabi_fdiv>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MPU6050_calibrateGyroscope+0xd8>)
 8001cfa:	601a      	str	r2, [r3, #0]
    gyroY_offset /= 1000;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d30 <MPU6050_calibrateGyroscope+0xdc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	490d      	ldr	r1, [pc, #52]	@ (8001d38 <MPU6050_calibrateGyroscope+0xe4>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f8d2 	bl	8000eac <__aeabi_fdiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <MPU6050_calibrateGyroscope+0xdc>)
 8001d0e:	601a      	str	r2, [r3, #0]
    gyroZ_offset /= 1000;
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <MPU6050_calibrateGyroscope+0xe0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4908      	ldr	r1, [pc, #32]	@ (8001d38 <MPU6050_calibrateGyroscope+0xe4>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f8c8 	bl	8000eac <__aeabi_fdiv>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <MPU6050_calibrateGyroscope+0xe0>)
 8001d22:	601a      	str	r2, [r3, #0]
}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000260 	.word	0x20000260
 8001d30:	20000264 	.word	0x20000264
 8001d34:	20000268 	.word	0x20000268
 8001d38:	447a0000 	.word	0x447a0000
 8001d3c:	00000000 	.word	0x00000000

08001d40 <MPU6050_Complementary_filter>:

void MPU6050_Complementary_filter(I2C_HandleTypeDef *hi2c)
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

	Gyr_rawX -= gyroX_offset;
 8001d48:	4b8d      	ldr	r3, [pc, #564]	@ (8001f80 <MPU6050_Complementary_filter+0x240>)
 8001d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ffa4 	bl	8000c9c <__aeabi_i2f>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b8b      	ldr	r3, [pc, #556]	@ (8001f84 <MPU6050_Complementary_filter+0x244>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7fe fee7 	bl	8000b30 <__aeabi_fsub>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff f9b3 	bl	80010d0 <__aeabi_f2iz>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	4b84      	ldr	r3, [pc, #528]	@ (8001f80 <MPU6050_Complementary_filter+0x240>)
 8001d70:	801a      	strh	r2, [r3, #0]
	Gyr_rawY -= gyroY_offset;
 8001d72:	4b85      	ldr	r3, [pc, #532]	@ (8001f88 <MPU6050_Complementary_filter+0x248>)
 8001d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe ff8f 	bl	8000c9c <__aeabi_i2f>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	4b82      	ldr	r3, [pc, #520]	@ (8001f8c <MPU6050_Complementary_filter+0x24c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f7fe fed2 	bl	8000b30 <__aeabi_fsub>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f99e 	bl	80010d0 <__aeabi_f2iz>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b21a      	sxth	r2, r3
 8001d98:	4b7b      	ldr	r3, [pc, #492]	@ (8001f88 <MPU6050_Complementary_filter+0x248>)
 8001d9a:	801a      	strh	r2, [r3, #0]
	Gyr_rawZ -= gyroZ_offset;
 8001d9c:	4b7c      	ldr	r3, [pc, #496]	@ (8001f90 <MPU6050_Complementary_filter+0x250>)
 8001d9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe ff7a 	bl	8000c9c <__aeabi_i2f>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b7a      	ldr	r3, [pc, #488]	@ (8001f94 <MPU6050_Complementary_filter+0x254>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4619      	mov	r1, r3
 8001db0:	4610      	mov	r0, r2
 8001db2:	f7fe febd 	bl	8000b30 <__aeabi_fsub>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff f989 	bl	80010d0 <__aeabi_f2iz>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	4b73      	ldr	r3, [pc, #460]	@ (8001f90 <MPU6050_Complementary_filter+0x250>)
 8001dc4:	801a      	strh	r2, [r3, #0]

    // Convert gyroscope values to degrees per second
    float gyroRollRate = Gyr_rawX / 131.0;
 8001dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8001f80 <MPU6050_Complementary_filter+0x240>)
 8001dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fb19 	bl	8000404 <__aeabi_i2d>
 8001dd2:	a363      	add	r3, pc, #396	@ (adr r3, 8001f60 <MPU6050_Complementary_filter+0x220>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fca8 	bl	800072c <__aeabi_ddiv>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	f7fe fe50 	bl	8000a88 <__aeabi_d2f>
 8001de8:	4603      	mov	r3, r0
 8001dea:	613b      	str	r3, [r7, #16]
    float gyroPitchRate = Gyr_rawY / 131.0;
 8001dec:	4b66      	ldr	r3, [pc, #408]	@ (8001f88 <MPU6050_Complementary_filter+0x248>)
 8001dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb06 	bl	8000404 <__aeabi_i2d>
 8001df8:	a359      	add	r3, pc, #356	@ (adr r3, 8001f60 <MPU6050_Complementary_filter+0x220>)
 8001dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfe:	f7fe fc95 	bl	800072c <__aeabi_ddiv>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fe3d 	bl	8000a88 <__aeabi_d2f>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	60fb      	str	r3, [r7, #12]
    float gyroYawRate = Gyr_rawZ / 131.0;
 8001e12:	4b5f      	ldr	r3, [pc, #380]	@ (8001f90 <MPU6050_Complementary_filter+0x250>)
 8001e14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe faf3 	bl	8000404 <__aeabi_i2d>
 8001e1e:	a350      	add	r3, pc, #320	@ (adr r3, 8001f60 <MPU6050_Complementary_filter+0x220>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fc82 	bl	800072c <__aeabi_ddiv>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fe2a 	bl	8000a88 <__aeabi_d2f>
 8001e34:	4603      	mov	r3, r0
 8001e36:	617b      	str	r3, [r7, #20]
    get_time_milis();
 8001e38:	f7ff f9c4 	bl	80011c4 <get_time_milis>

    Roll_filter = 0.98 * (Roll_filter + gyroRollRate * g_elapsedTime) + 0.02 * Roll;
 8001e3c:	4b56      	ldr	r3, [pc, #344]	@ (8001f98 <MPU6050_Complementary_filter+0x258>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6939      	ldr	r1, [r7, #16]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe ff7e 	bl	8000d44 <__aeabi_fmul>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b53      	ldr	r3, [pc, #332]	@ (8001f9c <MPU6050_Complementary_filter+0x25c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4619      	mov	r1, r3
 8001e52:	4610      	mov	r0, r2
 8001e54:	f7fe fe6e 	bl	8000b34 <__addsf3>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe fae4 	bl	8000428 <__aeabi_f2d>
 8001e60:	a341      	add	r3, pc, #260	@ (adr r3, 8001f68 <MPU6050_Complementary_filter+0x228>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe fb37 	bl	80004d8 <__aeabi_dmul>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4614      	mov	r4, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa0 <MPU6050_Complementary_filter+0x260>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fad6 	bl	8000428 <__aeabi_f2d>
 8001e7c:	a33c      	add	r3, pc, #240	@ (adr r3, 8001f70 <MPU6050_Complementary_filter+0x230>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fb29 	bl	80004d8 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	4629      	mov	r1, r5
 8001e8e:	f7fe f96d 	bl	800016c <__adddf3>
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f7fe fdf5 	bl	8000a88 <__aeabi_d2f>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8001f9c <MPU6050_Complementary_filter+0x25c>)
 8001ea2:	6013      	str	r3, [r2, #0]
    Pitch_filter = 0.98  * (Pitch_filter + gyroPitchRate * g_elapsedTime) + 0.02* Pitch;
 8001ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8001f98 <MPU6050_Complementary_filter+0x258>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68f9      	ldr	r1, [r7, #12]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff4a 	bl	8000d44 <__aeabi_fmul>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <MPU6050_Complementary_filter+0x264>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f7fe fe3a 	bl	8000b34 <__addsf3>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fab0 	bl	8000428 <__aeabi_f2d>
 8001ec8:	a327      	add	r3, pc, #156	@ (adr r3, 8001f68 <MPU6050_Complementary_filter+0x228>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fb03 	bl	80004d8 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4614      	mov	r4, r2
 8001ed8:	461d      	mov	r5, r3
 8001eda:	4b33      	ldr	r3, [pc, #204]	@ (8001fa8 <MPU6050_Complementary_filter+0x268>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe faa2 	bl	8000428 <__aeabi_f2d>
 8001ee4:	a322      	add	r3, pc, #136	@ (adr r3, 8001f70 <MPU6050_Complementary_filter+0x230>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe faf5 	bl	80004d8 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4620      	mov	r0, r4
 8001ef4:	4629      	mov	r1, r5
 8001ef6:	f7fe f939 	bl	800016c <__adddf3>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7fe fdc1 	bl	8000a88 <__aeabi_d2f>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4a26      	ldr	r2, [pc, #152]	@ (8001fa4 <MPU6050_Complementary_filter+0x264>)
 8001f0a:	6013      	str	r3, [r2, #0]
    if (fabs(gyroYawRate) < 0.05) {
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fa88 	bl	8000428 <__aeabi_f2d>
 8001f18:	a317      	add	r3, pc, #92	@ (adr r3, 8001f78 <MPU6050_Complementary_filter+0x238>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fd4d 	bl	80009bc <__aeabi_dcmplt>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <MPU6050_Complementary_filter+0x1ee>
         gyroYawRate = 0;
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
    }

    Yaw_filter += gyroYawRate * g_elapsedTime;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f98 <MPU6050_Complementary_filter+0x258>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6979      	ldr	r1, [r7, #20]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe ff05 	bl	8000d44 <__aeabi_fmul>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <MPU6050_Complementary_filter+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f7fe fdf5 	bl	8000b34 <__addsf3>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <MPU6050_Complementary_filter+0x26c>)
 8001f50:	601a      	str	r2, [r3, #0]

}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	f3af 8000 	nop.w
 8001f60:	00000000 	.word	0x00000000
 8001f64:	40606000 	.word	0x40606000
 8001f68:	f5c28f5c 	.word	0xf5c28f5c
 8001f6c:	3fef5c28 	.word	0x3fef5c28
 8001f70:	47ae147b 	.word	0x47ae147b
 8001f74:	3f947ae1 	.word	0x3f947ae1
 8001f78:	9999999a 	.word	0x9999999a
 8001f7c:	3fa99999 	.word	0x3fa99999
 8001f80:	20000242 	.word	0x20000242
 8001f84:	20000260 	.word	0x20000260
 8001f88:	20000244 	.word	0x20000244
 8001f8c:	20000264 	.word	0x20000264
 8001f90:	20000246 	.word	0x20000246
 8001f94:	20000268 	.word	0x20000268
 8001f98:	200001e0 	.word	0x200001e0
 8001f9c:	20000254 	.word	0x20000254
 8001fa0:	20000248 	.word	0x20000248
 8001fa4:	20000258 	.word	0x20000258
 8001fa8:	2000024c 	.word	0x2000024c
 8001fac:	2000025c 	.word	0x2000025c

08001fb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fb6:	f000 fcbf 	bl	8002938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fba:	f000 f8d7 	bl	800216c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fbe:	f000 fa7b 	bl	80024b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001fc2:	f000 fa4f 	bl	8002464 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001fc6:	f000 f9b3 	bl	8002330 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001fca:	f000 f917 	bl	80021fc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001fce:	f000 f95d 	bl	800228c <MX_TIM1_Init>
  MX_IWDG_Init();
 8001fd2:	f000 f941 	bl	8002258 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */


  MPU6050_Init(&hi2c1);
 8001fd6:	484b      	ldr	r0, [pc, #300]	@ (8002104 <main+0x154>)
 8001fd8:	f7ff fcee 	bl	80019b8 <MPU6050_Init>

  MPU6050_calibrateGyroscope(&hi2c1);
 8001fdc:	4849      	ldr	r0, [pc, #292]	@ (8002104 <main+0x154>)
 8001fde:	f7ff fe39 	bl	8001c54 <MPU6050_calibrateGyroscope>


  HAL_TIM_Base_Start(&htim1);
 8001fe2:	4849      	ldr	r0, [pc, #292]	@ (8002108 <main+0x158>)
 8001fe4:	f002 fd6e 	bl	8004ac4 <HAL_TIM_Base_Start>
  HAL_UART_Receive_IT(&huart1, &receive_data[index_count_receive_data], 5);
 8001fe8:	4b48      	ldr	r3, [pc, #288]	@ (800210c <main+0x15c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b48      	ldr	r3, [pc, #288]	@ (8002110 <main+0x160>)
 8001ff0:	4413      	add	r3, r2
 8001ff2:	2205      	movs	r2, #5
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4847      	ldr	r0, [pc, #284]	@ (8002114 <main+0x164>)
 8001ff8:	f003 fbb9 	bl	800576e <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart1, (uint8_t *) "ready\n", 6);
 8001ffc:	2206      	movs	r2, #6
 8001ffe:	4946      	ldr	r1, [pc, #280]	@ (8002118 <main+0x168>)
 8002000:	4844      	ldr	r0, [pc, #272]	@ (8002114 <main+0x164>)
 8002002:	f003 fb7f 	bl	8005704 <HAL_UART_Transmit_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002006:	2100      	movs	r1, #0
 8002008:	4844      	ldr	r0, [pc, #272]	@ (800211c <main+0x16c>)
 800200a:	f002 fdfd 	bl	8004c08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800200e:	2104      	movs	r1, #4
 8002010:	4842      	ldr	r0, [pc, #264]	@ (800211c <main+0x16c>)
 8002012:	f002 fdf9 	bl	8004c08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002016:	2108      	movs	r1, #8
 8002018:	4840      	ldr	r0, [pc, #256]	@ (800211c <main+0x16c>)
 800201a:	f002 fdf5 	bl	8004c08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800201e:	210c      	movs	r1, #12
 8002020:	483e      	ldr	r0, [pc, #248]	@ (800211c <main+0x16c>)
 8002022:	f002 fdf1 	bl	8004c08 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1050);
 8002026:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <main+0x16c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f240 421a 	movw	r2, #1050	@ 0x41a
 800202e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1050);
 8002030:	4b3a      	ldr	r3, [pc, #232]	@ (800211c <main+0x16c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002038:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1050);
 800203a:	4b38      	ldr	r3, [pc, #224]	@ (800211c <main+0x16c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f240 421a 	movw	r2, #1050	@ 0x41a
 8002042:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 1050);
 8002044:	4b35      	ldr	r3, [pc, #212]	@ (800211c <main+0x16c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f240 421a 	movw	r2, #1050	@ 0x41a
 800204c:	641a      	str	r2, [r3, #64]	@ 0x40
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  converdata();
 800204e:	f7ff f90b 	bl	8001268 <converdata>

      MPU6050_Read_Accel(&hi2c1,&Acc_rawX, &Acc_rawY, &Acc_rawZ);
 8002052:	4b33      	ldr	r3, [pc, #204]	@ (8002120 <main+0x170>)
 8002054:	4a33      	ldr	r2, [pc, #204]	@ (8002124 <main+0x174>)
 8002056:	4934      	ldr	r1, [pc, #208]	@ (8002128 <main+0x178>)
 8002058:	482a      	ldr	r0, [pc, #168]	@ (8002104 <main+0x154>)
 800205a:	f7ff fc79 	bl	8001950 <MPU6050_Read_Accel>

      MPU6050_Read_Gyro(&hi2c1, &Gyr_rawX, &Gyr_rawY, &Gyr_rawZ);
 800205e:	4b33      	ldr	r3, [pc, #204]	@ (800212c <main+0x17c>)
 8002060:	4a33      	ldr	r2, [pc, #204]	@ (8002130 <main+0x180>)
 8002062:	4934      	ldr	r1, [pc, #208]	@ (8002134 <main+0x184>)
 8002064:	4827      	ldr	r0, [pc, #156]	@ (8002104 <main+0x154>)
 8002066:	f7ff fd04 	bl	8001a72 <MPU6050_Read_Gyro>
      MPU6050_Convert_to_Angle(&Roll, &Pitch, &Yaw);
 800206a:	4a33      	ldr	r2, [pc, #204]	@ (8002138 <main+0x188>)
 800206c:	4933      	ldr	r1, [pc, #204]	@ (800213c <main+0x18c>)
 800206e:	4834      	ldr	r0, [pc, #208]	@ (8002140 <main+0x190>)
 8002070:	f7ff fd36 	bl	8001ae0 <MPU6050_Convert_to_Angle>
      MPU6050_Complementary_filter(&hi2c1);
 8002074:	4823      	ldr	r0, [pc, #140]	@ (8002104 <main+0x154>)
 8002076:	f7ff fe63 	bl	8001d40 <MPU6050_Complementary_filter>

      calculate_pid();
 800207a:	f7ff fa09 	bl	8001490 <calculate_pid>
	  SetBrushMotor();
 800207e:	f7ff f933 	bl	80012e8 <SetBrushMotor>

      if(status_connected == E_CONNECTED)
 8002082:	4b30      	ldr	r3, [pc, #192]	@ (8002144 <main+0x194>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d135      	bne.n	80020f6 <main+0x146>
      {
    	  g_elapsed_count += g_elapsedTime;
 800208a:	4b2f      	ldr	r3, [pc, #188]	@ (8002148 <main+0x198>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a2f      	ldr	r2, [pc, #188]	@ (800214c <main+0x19c>)
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe fd4d 	bl	8000b34 <__addsf3>
 800209a:	4603      	mov	r3, r0
 800209c:	461a      	mov	r2, r3
 800209e:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <main+0x198>)
 80020a0:	601a      	str	r2, [r3, #0]
    	  if(g_elapsed_count > 0.05f)
 80020a2:	4b29      	ldr	r3, [pc, #164]	@ (8002148 <main+0x198>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	492a      	ldr	r1, [pc, #168]	@ (8002150 <main+0x1a0>)
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff f807 	bl	80010bc <__aeabi_fcmpgt>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d020      	beq.n	80020f6 <main+0x146>
    	  {
    		  g_elapsed_count = 0;
 80020b4:	4b24      	ldr	r3, [pc, #144]	@ (8002148 <main+0x198>)
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
              snprintf(buffer, sizeof(buffer), "Roll: %d Pitch: %d Yaw: %d\n", (int) Roll_filter, (int) Pitch_filter, (int)Yaw_filter);
 80020bc:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <main+0x1a4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff f805 	bl	80010d0 <__aeabi_f2iz>
 80020c6:	4605      	mov	r5, r0
 80020c8:	4b23      	ldr	r3, [pc, #140]	@ (8002158 <main+0x1a8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe ffff 	bl	80010d0 <__aeabi_f2iz>
 80020d2:	4604      	mov	r4, r0
 80020d4:	4b21      	ldr	r3, [pc, #132]	@ (800215c <main+0x1ac>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fff9 	bl	80010d0 <__aeabi_f2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	9400      	str	r4, [sp, #0]
 80020e4:	462b      	mov	r3, r5
 80020e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002160 <main+0x1b0>)
 80020e8:	2140      	movs	r1, #64	@ 0x40
 80020ea:	481e      	ldr	r0, [pc, #120]	@ (8002164 <main+0x1b4>)
 80020ec:	f004 f86c 	bl	80061c8 <sniprintf>
              UART_Print(buffer);
 80020f0:	481c      	ldr	r0, [pc, #112]	@ (8002164 <main+0x1b4>)
 80020f2:	f7ff f853 	bl	800119c <UART_Print>
    	  }
      }
      __HAL_IWDG_RELOAD_COUNTER(&hiwdg);
 80020f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002168 <main+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80020fe:	601a      	str	r2, [r3, #0]
	  converdata();
 8002100:	e7a5      	b.n	800204e <main+0x9e>
 8002102:	bf00      	nop
 8002104:	200000a4 	.word	0x200000a4
 8002108:	20000104 	.word	0x20000104
 800210c:	200002c5 	.word	0x200002c5
 8002110:	200002c0 	.word	0x200002c0
 8002114:	20000194 	.word	0x20000194
 8002118:	08007230 	.word	0x08007230
 800211c:	2000014c 	.word	0x2000014c
 8002120:	20000240 	.word	0x20000240
 8002124:	2000023e 	.word	0x2000023e
 8002128:	2000023c 	.word	0x2000023c
 800212c:	20000246 	.word	0x20000246
 8002130:	20000244 	.word	0x20000244
 8002134:	20000242 	.word	0x20000242
 8002138:	20000250 	.word	0x20000250
 800213c:	2000024c 	.word	0x2000024c
 8002140:	20000248 	.word	0x20000248
 8002144:	200001dc 	.word	0x200001dc
 8002148:	200001e4 	.word	0x200001e4
 800214c:	200001e0 	.word	0x200001e0
 8002150:	3d4ccccd 	.word	0x3d4ccccd
 8002154:	20000254 	.word	0x20000254
 8002158:	20000258 	.word	0x20000258
 800215c:	2000025c 	.word	0x2000025c
 8002160:	08007238 	.word	0x08007238
 8002164:	200001ec 	.word	0x200001ec
 8002168:	200000f8 	.word	0x200000f8

0800216c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b090      	sub	sp, #64	@ 0x40
 8002170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002172:	f107 0318 	add.w	r3, r7, #24
 8002176:	2228      	movs	r2, #40	@ 0x28
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f004 f858 	bl	8006230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800218e:	2309      	movs	r3, #9
 8002190:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002192:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002198:	2300      	movs	r3, #0
 800219a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800219c:	2301      	movs	r3, #1
 800219e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80021a0:	2301      	movs	r3, #1
 80021a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a4:	2302      	movs	r3, #2
 80021a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80021b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021b4:	f107 0318 	add.w	r3, r7, #24
 80021b8:	4618      	mov	r0, r3
 80021ba:	f002 f823 	bl	8004204 <HAL_RCC_OscConfig>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80021c4:	f000 f9a6 	bl	8002514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c8:	230f      	movs	r3, #15
 80021ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021cc:	2302      	movs	r3, #2
 80021ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2102      	movs	r1, #2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 fa90 	bl	8004708 <HAL_RCC_ClockConfig>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80021ee:	f000 f991 	bl	8002514 <Error_Handler>
  }
}
 80021f2:	bf00      	nop
 80021f4:	3740      	adds	r7, #64	@ 0x40
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002200:	4b12      	ldr	r3, [pc, #72]	@ (800224c <MX_I2C1_Init+0x50>)
 8002202:	4a13      	ldr	r2, [pc, #76]	@ (8002250 <MX_I2C1_Init+0x54>)
 8002204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <MX_I2C1_Init+0x50>)
 8002208:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <MX_I2C1_Init+0x58>)
 800220a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800220c:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <MX_I2C1_Init+0x50>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 208;
 8002212:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <MX_I2C1_Init+0x50>)
 8002214:	22d0      	movs	r2, #208	@ 0xd0
 8002216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <MX_I2C1_Init+0x50>)
 800221a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800221e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <MX_I2C1_Init+0x50>)
 8002222:	2200      	movs	r2, #0
 8002224:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002226:	4b09      	ldr	r3, [pc, #36]	@ (800224c <MX_I2C1_Init+0x50>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800222c:	4b07      	ldr	r3, [pc, #28]	@ (800224c <MX_I2C1_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MX_I2C1_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <MX_I2C1_Init+0x50>)
 800223a:	f000 ff47 	bl	80030cc <HAL_I2C_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002244:	f000 f966 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200000a4 	.word	0x200000a4
 8002250:	40005400 	.word	0x40005400
 8002254:	000186a0 	.word	0x000186a0

08002258 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800225c:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <MX_IWDG_Init+0x2c>)
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <MX_IWDG_Init+0x30>)
 8002260:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8002262:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <MX_IWDG_Init+0x2c>)
 8002264:	2204      	movs	r2, #4
 8002266:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3000;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <MX_IWDG_Init+0x2c>)
 800226a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800226e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	@ (8002284 <MX_IWDG_Init+0x2c>)
 8002272:	f001 ff84 	bl	800417e <HAL_IWDG_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800227c:	f000 f94a 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200000f8 	.word	0x200000f8
 8002288:	40003000 	.word	0x40003000

0800228c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a0:	463b      	mov	r3, r7
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022aa:	4a20      	ldr	r2, [pc, #128]	@ (800232c <MX_TIM1_Init+0xa0>)
 80022ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 80022ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022b0:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80022b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c4:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022ca:	4b17      	ldr	r3, [pc, #92]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d0:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022d2:	2280      	movs	r2, #128	@ 0x80
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022d6:	4814      	ldr	r0, [pc, #80]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022d8:	f002 fba4 	bl	8004a24 <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80022e2:	f000 f917 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	4619      	mov	r1, r3
 80022f2:	480d      	ldr	r0, [pc, #52]	@ (8002328 <MX_TIM1_Init+0x9c>)
 80022f4:	f002 fdec 	bl	8004ed0 <HAL_TIM_ConfigClockSource>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80022fe:	f000 f909 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	4619      	mov	r1, r3
 800230e:	4806      	ldr	r0, [pc, #24]	@ (8002328 <MX_TIM1_Init+0x9c>)
 8002310:	f003 f94a 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800231a:	f000 f8fb 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000104 	.word	0x20000104
 800232c:	40012c00 	.word	0x40012c00

08002330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08e      	sub	sp, #56	@ 0x38
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002336:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002344:	f107 0320 	add.w	r3, r7, #32
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
 800235c:	615a      	str	r2, [r3, #20]
 800235e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002360:	4b3f      	ldr	r3, [pc, #252]	@ (8002460 <MX_TIM2_Init+0x130>)
 8002362:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002366:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8002368:	4b3d      	ldr	r3, [pc, #244]	@ (8002460 <MX_TIM2_Init+0x130>)
 800236a:	2247      	movs	r2, #71	@ 0x47
 800236c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236e:	4b3c      	ldr	r3, [pc, #240]	@ (8002460 <MX_TIM2_Init+0x130>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20160;
 8002374:	4b3a      	ldr	r3, [pc, #232]	@ (8002460 <MX_TIM2_Init+0x130>)
 8002376:	f644 62c0 	movw	r2, #20160	@ 0x4ec0
 800237a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237c:	4b38      	ldr	r3, [pc, #224]	@ (8002460 <MX_TIM2_Init+0x130>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002382:	4b37      	ldr	r3, [pc, #220]	@ (8002460 <MX_TIM2_Init+0x130>)
 8002384:	2280      	movs	r2, #128	@ 0x80
 8002386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002388:	4835      	ldr	r0, [pc, #212]	@ (8002460 <MX_TIM2_Init+0x130>)
 800238a:	f002 fb4b 	bl	8004a24 <HAL_TIM_Base_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002394:	f000 f8be 	bl	8002514 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002398:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800239e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023a2:	4619      	mov	r1, r3
 80023a4:	482e      	ldr	r0, [pc, #184]	@ (8002460 <MX_TIM2_Init+0x130>)
 80023a6:	f002 fd93 	bl	8004ed0 <HAL_TIM_ConfigClockSource>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80023b0:	f000 f8b0 	bl	8002514 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023b4:	482a      	ldr	r0, [pc, #168]	@ (8002460 <MX_TIM2_Init+0x130>)
 80023b6:	f002 fbcf 	bl	8004b58 <HAL_TIM_PWM_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80023c0:	f000 f8a8 	bl	8002514 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023cc:	f107 0320 	add.w	r3, r7, #32
 80023d0:	4619      	mov	r1, r3
 80023d2:	4823      	ldr	r0, [pc, #140]	@ (8002460 <MX_TIM2_Init+0x130>)
 80023d4:	f003 f8e8 	bl	80055a8 <HAL_TIMEx_MasterConfigSynchronization>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80023de:	f000 f899 	bl	8002514 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e2:	2360      	movs	r3, #96	@ 0x60
 80023e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80023e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	4619      	mov	r1, r3
 80023fa:	4819      	ldr	r0, [pc, #100]	@ (8002460 <MX_TIM2_Init+0x130>)
 80023fc:	f002 fca6 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002406:	f000 f885 	bl	8002514 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2204      	movs	r2, #4
 8002412:	4619      	mov	r1, r3
 8002414:	4812      	ldr	r0, [pc, #72]	@ (8002460 <MX_TIM2_Init+0x130>)
 8002416:	f002 fc99 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8002420:	f000 f878 	bl	8002514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	2208      	movs	r2, #8
 8002428:	4619      	mov	r1, r3
 800242a:	480d      	ldr	r0, [pc, #52]	@ (8002460 <MX_TIM2_Init+0x130>)
 800242c:	f002 fc8e 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8002436:	f000 f86d 	bl	8002514 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	220c      	movs	r2, #12
 800243e:	4619      	mov	r1, r3
 8002440:	4807      	ldr	r0, [pc, #28]	@ (8002460 <MX_TIM2_Init+0x130>)
 8002442:	f002 fc83 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 800244c:	f000 f862 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002450:	4803      	ldr	r0, [pc, #12]	@ (8002460 <MX_TIM2_Init+0x130>)
 8002452:	f000 f917 	bl	8002684 <HAL_TIM_MspPostInit>

}
 8002456:	bf00      	nop
 8002458:	3738      	adds	r7, #56	@ 0x38
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000014c 	.word	0x2000014c

08002464 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <MX_USART1_UART_Init+0x50>)
 800246c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 8002470:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002476:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002482:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002488:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 800248a:	220c      	movs	r2, #12
 800248c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248e:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002494:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800249a:	4805      	ldr	r0, [pc, #20]	@ (80024b0 <MX_USART1_UART_Init+0x4c>)
 800249c:	f003 f8e2 	bl	8005664 <HAL_UART_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024a6:	f000 f835 	bl	8002514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000194 	.word	0x20000194
 80024b4:	40013800 	.word	0x40013800

080024b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024be:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	4a13      	ldr	r2, [pc, #76]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024c4:	f043 0320 	orr.w	r3, r3, #32
 80024c8:	6193      	str	r3, [r2, #24]
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	6193      	str	r3, [r2, #24]
 80024e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	6193      	str	r3, [r2, #24]
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <MX_GPIO_Init+0x58>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002506:	bf00      	nop
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40021000 	.word	0x40021000

08002514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002518:	b672      	cpsid	i
}
 800251a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <Error_Handler+0x8>

08002520 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <HAL_MspInit+0x5c>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	4a14      	ldr	r2, [pc, #80]	@ (800257c <HAL_MspInit+0x5c>)
 800252c:	f043 0301 	orr.w	r3, r3, #1
 8002530:	6193      	str	r3, [r2, #24]
 8002532:	4b12      	ldr	r3, [pc, #72]	@ (800257c <HAL_MspInit+0x5c>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	4b0f      	ldr	r3, [pc, #60]	@ (800257c <HAL_MspInit+0x5c>)
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	4a0e      	ldr	r2, [pc, #56]	@ (800257c <HAL_MspInit+0x5c>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002548:	61d3      	str	r3, [r2, #28]
 800254a:	4b0c      	ldr	r3, [pc, #48]	@ (800257c <HAL_MspInit+0x5c>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_MspInit+0x60>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <HAL_MspInit+0x60>)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000

08002584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	@ 0x28
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <HAL_I2C_MspInit+0x90>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d132      	bne.n	800260a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <HAL_I2C_MspInit+0x94>)
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_I2C_MspInit+0x94>)
 80025aa:	f043 0308 	orr.w	r3, r3, #8
 80025ae:	6193      	str	r3, [r2, #24]
 80025b0:	4b19      	ldr	r3, [pc, #100]	@ (8002618 <HAL_I2C_MspInit+0x94>)
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c2:	2312      	movs	r3, #18
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025c6:	2303      	movs	r3, #3
 80025c8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4812      	ldr	r0, [pc, #72]	@ (800261c <HAL_I2C_MspInit+0x98>)
 80025d2:	f000 fbf7 	bl	8002dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_I2C_MspInit+0x9c>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	f043 0302 	orr.w	r3, r3, #2
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ec:	4a0c      	ldr	r2, [pc, #48]	@ (8002620 <HAL_I2C_MspInit+0x9c>)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <HAL_I2C_MspInit+0x94>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	4a08      	ldr	r2, [pc, #32]	@ (8002618 <HAL_I2C_MspInit+0x94>)
 80025f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025fc:	61d3      	str	r3, [r2, #28]
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_I2C_MspInit+0x94>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800260a:	bf00      	nop
 800260c:	3728      	adds	r7, #40	@ 0x28
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40005400 	.word	0x40005400
 8002618:	40021000 	.word	0x40021000
 800261c:	40010c00 	.word	0x40010c00
 8002620:	40010000 	.word	0x40010000

08002624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a12      	ldr	r2, [pc, #72]	@ (800267c <HAL_TIM_Base_MspInit+0x58>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10c      	bne.n	8002650 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002636:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_TIM_Base_MspInit+0x5c>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	4a11      	ldr	r2, [pc, #68]	@ (8002680 <HAL_TIM_Base_MspInit+0x5c>)
 800263c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002640:	6193      	str	r3, [r2, #24]
 8002642:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <HAL_TIM_Base_MspInit+0x5c>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800264e:	e010      	b.n	8002672 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002658:	d10b      	bne.n	8002672 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800265a:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <HAL_TIM_Base_MspInit+0x5c>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a08      	ldr	r2, [pc, #32]	@ (8002680 <HAL_TIM_Base_MspInit+0x5c>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_TIM_Base_MspInit+0x5c>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a2:	d143      	bne.n	800272c <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a4:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <HAL_TIM_MspPostInit+0xb0>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a22      	ldr	r2, [pc, #136]	@ (8002734 <HAL_TIM_MspPostInit+0xb0>)
 80026aa:	f043 0308 	orr.w	r3, r3, #8
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_TIM_MspPostInit+0xb0>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <HAL_TIM_MspPostInit+0xb0>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <HAL_TIM_MspPostInit+0xb0>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <HAL_TIM_MspPostInit+0xb0>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80026d4:	f640 4308 	movw	r3, #3080	@ 0xc08
 80026d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026de:	2302      	movs	r3, #2
 80026e0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	4619      	mov	r1, r3
 80026e8:	4813      	ldr	r0, [pc, #76]	@ (8002738 <HAL_TIM_MspPostInit+0xb4>)
 80026ea:	f000 fb6b 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f8:	2302      	movs	r3, #2
 80026fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4619      	mov	r1, r3
 8002702:	480e      	ldr	r0, [pc, #56]	@ (800273c <HAL_TIM_MspPostInit+0xb8>)
 8002704:	f000 fb5e 	bl	8002dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_ENABLE();
 8002708:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_TIM_MspPostInit+0xbc>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002714:	627b      	str	r3, [r7, #36]	@ 0x24
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002724:	627b      	str	r3, [r7, #36]	@ 0x24
 8002726:	4a06      	ldr	r2, [pc, #24]	@ (8002740 <HAL_TIM_MspPostInit+0xbc>)
 8002728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800272c:	bf00      	nop
 800272e:	3728      	adds	r7, #40	@ 0x28
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	40010c00 	.word	0x40010c00
 800273c:	40010800 	.word	0x40010800
 8002740:	40010000 	.word	0x40010000

08002744 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	@ 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a26      	ldr	r2, [pc, #152]	@ (80027f8 <HAL_UART_MspInit+0xb4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d145      	bne.n	80027f0 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002764:	4b25      	ldr	r3, [pc, #148]	@ (80027fc <HAL_UART_MspInit+0xb8>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	4a24      	ldr	r2, [pc, #144]	@ (80027fc <HAL_UART_MspInit+0xb8>)
 800276a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800276e:	6193      	str	r3, [r2, #24]
 8002770:	4b22      	ldr	r3, [pc, #136]	@ (80027fc <HAL_UART_MspInit+0xb8>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277c:	4b1f      	ldr	r3, [pc, #124]	@ (80027fc <HAL_UART_MspInit+0xb8>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	4a1e      	ldr	r2, [pc, #120]	@ (80027fc <HAL_UART_MspInit+0xb8>)
 8002782:	f043 0308 	orr.w	r3, r3, #8
 8002786:	6193      	str	r3, [r2, #24]
 8002788:	4b1c      	ldr	r3, [pc, #112]	@ (80027fc <HAL_UART_MspInit+0xb8>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002794:	2340      	movs	r3, #64	@ 0x40
 8002796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002798:	2302      	movs	r3, #2
 800279a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800279c:	2303      	movs	r3, #3
 800279e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4816      	ldr	r0, [pc, #88]	@ (8002800 <HAL_UART_MspInit+0xbc>)
 80027a8:	f000 fb0c 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4810      	ldr	r0, [pc, #64]	@ (8002800 <HAL_UART_MspInit+0xbc>)
 80027c0:	f000 fb00 	bl	8002dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <HAL_UART_MspInit+0xc0>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027da:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <HAL_UART_MspInit+0xc0>)
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	2025      	movs	r0, #37	@ 0x25
 80027e6:	f000 fa04 	bl	8002bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027ea:	2025      	movs	r0, #37	@ 0x25
 80027ec:	f000 fa1d 	bl	8002c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027f0:	bf00      	nop
 80027f2:	3728      	adds	r7, #40	@ 0x28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010c00 	.word	0x40010c00
 8002804:	40010000 	.word	0x40010000

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <NMI_Handler+0x4>

08002810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <HardFault_Handler+0x4>

08002818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <MemManage_Handler+0x4>

08002820 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002824:	bf00      	nop
 8002826:	e7fd      	b.n	8002824 <BusFault_Handler+0x4>

08002828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800282c:	bf00      	nop
 800282e:	e7fd      	b.n	800282c <UsageFault_Handler+0x4>

08002830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr

08002848 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002858:	f000 f8b4 	bl	80029c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002864:	4802      	ldr	r0, [pc, #8]	@ (8002870 <USART1_IRQHandler+0x10>)
 8002866:	f002 ffa7 	bl	80057b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000194 	.word	0x20000194

08002874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800287c:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <_sbrk+0x5c>)
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <_sbrk+0x60>)
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002888:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <_sbrk+0x64>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <_sbrk+0x64>)
 8002892:	4a12      	ldr	r2, [pc, #72]	@ (80028dc <_sbrk+0x68>)
 8002894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002896:	4b10      	ldr	r3, [pc, #64]	@ (80028d8 <_sbrk+0x64>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d207      	bcs.n	80028b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a4:	f003 fccc 	bl	8006240 <__errno>
 80028a8:	4603      	mov	r3, r0
 80028aa:	220c      	movs	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028ae:	f04f 33ff 	mov.w	r3, #4294967295
 80028b2:	e009      	b.n	80028c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b4:	4b08      	ldr	r3, [pc, #32]	@ (80028d8 <_sbrk+0x64>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ba:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <_sbrk+0x64>)
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	4a05      	ldr	r2, [pc, #20]	@ (80028d8 <_sbrk+0x64>)
 80028c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028c6:	68fb      	ldr	r3, [r7, #12]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20005000 	.word	0x20005000
 80028d4:	00000400 	.word	0x00000400
 80028d8:	200002c8 	.word	0x200002c8
 80028dc:	20000418 	.word	0x20000418

080028e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028ec:	f7ff fff8 	bl	80028e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f0:	480b      	ldr	r0, [pc, #44]	@ (8002920 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028f2:	490c      	ldr	r1, [pc, #48]	@ (8002924 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028f4:	4a0c      	ldr	r2, [pc, #48]	@ (8002928 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f8:	e002      	b.n	8002900 <LoopCopyDataInit>

080028fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fe:	3304      	adds	r3, #4

08002900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002904:	d3f9      	bcc.n	80028fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002906:	4a09      	ldr	r2, [pc, #36]	@ (800292c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002908:	4c09      	ldr	r4, [pc, #36]	@ (8002930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800290c:	e001      	b.n	8002912 <LoopFillZerobss>

0800290e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002910:	3204      	adds	r2, #4

08002912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002914:	d3fb      	bcc.n	800290e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002916:	f003 fc99 	bl	800624c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800291a:	f7ff fb49 	bl	8001fb0 <main>
  bx lr
 800291e:	4770      	bx	lr
  ldr r0, =_sdata
 8002920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002924:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002928:	08007338 	.word	0x08007338
  ldr r2, =_sbss
 800292c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002930:	20000418 	.word	0x20000418

08002934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC1_2_IRQHandler>
	...

08002938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800293c:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <HAL_Init+0x28>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a07      	ldr	r2, [pc, #28]	@ (8002960 <HAL_Init+0x28>)
 8002942:	f043 0310 	orr.w	r3, r3, #16
 8002946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002948:	2003      	movs	r0, #3
 800294a:	f000 f947 	bl	8002bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800294e:	200f      	movs	r0, #15
 8002950:	f000 f808 	bl	8002964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002954:	f7ff fde4 	bl	8002520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40022000 	.word	0x40022000

08002964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800296c:	4b12      	ldr	r3, [pc, #72]	@ (80029b8 <HAL_InitTick+0x54>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b12      	ldr	r3, [pc, #72]	@ (80029bc <HAL_InitTick+0x58>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4619      	mov	r1, r3
 8002976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800297a:	fbb3 f3f1 	udiv	r3, r3, r1
 800297e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f95f 	bl	8002c46 <HAL_SYSTICK_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e00e      	b.n	80029b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b0f      	cmp	r3, #15
 8002996:	d80a      	bhi.n	80029ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002998:	2200      	movs	r2, #0
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	f04f 30ff 	mov.w	r0, #4294967295
 80029a0:	f000 f927 	bl	8002bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a4:	4a06      	ldr	r2, [pc, #24]	@ (80029c0 <HAL_InitTick+0x5c>)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	2000001c 	.word	0x2000001c
 80029bc:	20000024 	.word	0x20000024
 80029c0:	20000020 	.word	0x20000020

080029c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029c8:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <HAL_IncTick+0x1c>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <HAL_IncTick+0x20>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4413      	add	r3, r2
 80029d4:	4a03      	ldr	r2, [pc, #12]	@ (80029e4 <HAL_IncTick+0x20>)
 80029d6:	6013      	str	r3, [r2, #0]
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr
 80029e0:	20000024 	.word	0x20000024
 80029e4:	200002cc 	.word	0x200002cc

080029e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return uwTick;
 80029ec:	4b02      	ldr	r3, [pc, #8]	@ (80029f8 <HAL_GetTick+0x10>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	200002cc 	.word	0x200002cc

080029fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a04:	f7ff fff0 	bl	80029e8 <HAL_GetTick>
 8002a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d005      	beq.n	8002a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a16:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <HAL_Delay+0x44>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a22:	bf00      	nop
 8002a24:	f7ff ffe0 	bl	80029e8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d8f7      	bhi.n	8002a24 <HAL_Delay+0x28>
  {
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000024 	.word	0x20000024

08002a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a54:	4b0c      	ldr	r3, [pc, #48]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a60:	4013      	ands	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a76:	4a04      	ldr	r2, [pc, #16]	@ (8002a88 <__NVIC_SetPriorityGrouping+0x44>)
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	60d3      	str	r3, [r2, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	f003 0307 	and.w	r3, r3, #7
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	4603      	mov	r3, r0
 8002ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	db0b      	blt.n	8002ad2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	4906      	ldr	r1, [pc, #24]	@ (8002adc <__NVIC_EnableIRQ+0x34>)
 8002ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2001      	movs	r0, #1
 8002aca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	@ (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	@ (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	@ 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	@ 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba8:	d301      	bcc.n	8002bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002baa:	2301      	movs	r3, #1
 8002bac:	e00f      	b.n	8002bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bae:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd8 <SysTick_Config+0x40>)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	f7ff ff90 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <SysTick_Config+0x40>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc6:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <SysTick_Config+0x40>)
 8002bc8:	2207      	movs	r2, #7
 8002bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	e000e010 	.word	0xe000e010

08002bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff2d 	bl	8002a44 <__NVIC_SetPriorityGrouping>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b086      	sub	sp, #24
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	607a      	str	r2, [r7, #4]
 8002bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c04:	f7ff ff42 	bl	8002a8c <__NVIC_GetPriorityGrouping>
 8002c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	6978      	ldr	r0, [r7, #20]
 8002c10:	f7ff ff90 	bl	8002b34 <NVIC_EncodePriority>
 8002c14:	4602      	mov	r2, r0
 8002c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff5f 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff ff35 	bl	8002aa8 <__NVIC_EnableIRQ>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffa2 	bl	8002b98 <SysTick_Config>
 8002c54:	4603      	mov	r3, r0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d008      	beq.n	8002c88 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e020      	b.n	8002cca <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 020e 	bic.w	r2, r2, #14
 8002c96:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d005      	beq.n	8002cf8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e051      	b.n	8002d9c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 020e 	bic.w	r2, r2, #14
 8002d06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a22      	ldr	r2, [pc, #136]	@ (8002da8 <HAL_DMA_Abort_IT+0xd4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d029      	beq.n	8002d76 <HAL_DMA_Abort_IT+0xa2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a21      	ldr	r2, [pc, #132]	@ (8002dac <HAL_DMA_Abort_IT+0xd8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d022      	beq.n	8002d72 <HAL_DMA_Abort_IT+0x9e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1f      	ldr	r2, [pc, #124]	@ (8002db0 <HAL_DMA_Abort_IT+0xdc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01a      	beq.n	8002d6c <HAL_DMA_Abort_IT+0x98>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002db4 <HAL_DMA_Abort_IT+0xe0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d012      	beq.n	8002d66 <HAL_DMA_Abort_IT+0x92>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <HAL_DMA_Abort_IT+0xe4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d00a      	beq.n	8002d60 <HAL_DMA_Abort_IT+0x8c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dbc <HAL_DMA_Abort_IT+0xe8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d102      	bne.n	8002d5a <HAL_DMA_Abort_IT+0x86>
 8002d54:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d58:	e00e      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d5e:	e00b      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d64:	e008      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d6a:	e005      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d70:	e002      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d72:	2310      	movs	r3, #16
 8002d74:	e000      	b.n	8002d78 <HAL_DMA_Abort_IT+0xa4>
 8002d76:	2301      	movs	r3, #1
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <HAL_DMA_Abort_IT+0xec>)
 8002d7a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
    } 
  }
  return status;
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40020008 	.word	0x40020008
 8002dac:	4002001c 	.word	0x4002001c
 8002db0:	40020030 	.word	0x40020030
 8002db4:	40020044 	.word	0x40020044
 8002db8:	40020058 	.word	0x40020058
 8002dbc:	4002006c 	.word	0x4002006c
 8002dc0:	40020000 	.word	0x40020000

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b08b      	sub	sp, #44	@ 0x2c
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd6:	e169      	b.n	80030ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dd8:	2201      	movs	r2, #1
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	f040 8158 	bne.w	80030a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a9a      	ldr	r2, [pc, #616]	@ (8003064 <HAL_GPIO_Init+0x2a0>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d05e      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e00:	4a98      	ldr	r2, [pc, #608]	@ (8003064 <HAL_GPIO_Init+0x2a0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d875      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e06:	4a98      	ldr	r2, [pc, #608]	@ (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d058      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e0c:	4a96      	ldr	r2, [pc, #600]	@ (8003068 <HAL_GPIO_Init+0x2a4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d86f      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e12:	4a96      	ldr	r2, [pc, #600]	@ (800306c <HAL_GPIO_Init+0x2a8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d052      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e18:	4a94      	ldr	r2, [pc, #592]	@ (800306c <HAL_GPIO_Init+0x2a8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d869      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e1e:	4a94      	ldr	r2, [pc, #592]	@ (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04c      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e24:	4a92      	ldr	r2, [pc, #584]	@ (8003070 <HAL_GPIO_Init+0x2ac>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d863      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e2a:	4a92      	ldr	r2, [pc, #584]	@ (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d046      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
 8002e30:	4a90      	ldr	r2, [pc, #576]	@ (8003074 <HAL_GPIO_Init+0x2b0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d85d      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e36:	2b12      	cmp	r3, #18
 8002e38:	d82a      	bhi.n	8002e90 <HAL_GPIO_Init+0xcc>
 8002e3a:	2b12      	cmp	r3, #18
 8002e3c:	d859      	bhi.n	8002ef2 <HAL_GPIO_Init+0x12e>
 8002e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e44 <HAL_GPIO_Init+0x80>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002ebf 	.word	0x08002ebf
 8002e48:	08002e99 	.word	0x08002e99
 8002e4c:	08002eab 	.word	0x08002eab
 8002e50:	08002eed 	.word	0x08002eed
 8002e54:	08002ef3 	.word	0x08002ef3
 8002e58:	08002ef3 	.word	0x08002ef3
 8002e5c:	08002ef3 	.word	0x08002ef3
 8002e60:	08002ef3 	.word	0x08002ef3
 8002e64:	08002ef3 	.word	0x08002ef3
 8002e68:	08002ef3 	.word	0x08002ef3
 8002e6c:	08002ef3 	.word	0x08002ef3
 8002e70:	08002ef3 	.word	0x08002ef3
 8002e74:	08002ef3 	.word	0x08002ef3
 8002e78:	08002ef3 	.word	0x08002ef3
 8002e7c:	08002ef3 	.word	0x08002ef3
 8002e80:	08002ef3 	.word	0x08002ef3
 8002e84:	08002ef3 	.word	0x08002ef3
 8002e88:	08002ea1 	.word	0x08002ea1
 8002e8c:	08002eb5 	.word	0x08002eb5
 8002e90:	4a79      	ldr	r2, [pc, #484]	@ (8003078 <HAL_GPIO_Init+0x2b4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e96:	e02c      	b.n	8002ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	623b      	str	r3, [r7, #32]
          break;
 8002e9e:	e029      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e024      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	3308      	adds	r3, #8
 8002eb0:	623b      	str	r3, [r7, #32]
          break;
 8002eb2:	e01f      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	623b      	str	r3, [r7, #32]
          break;
 8002ebc:	e01a      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	623b      	str	r3, [r7, #32]
          break;
 8002eca:	e013      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	611a      	str	r2, [r3, #16]
          break;
 8002ede:	e009      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ee0:	2308      	movs	r3, #8
 8002ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	615a      	str	r2, [r3, #20]
          break;
 8002eea:	e003      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002eec:	2300      	movs	r3, #0
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_GPIO_Init+0x130>
          break;
 8002ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2bff      	cmp	r3, #255	@ 0xff
 8002ef8:	d801      	bhi.n	8002efe <HAL_GPIO_Init+0x13a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	e001      	b.n	8002f02 <HAL_GPIO_Init+0x13e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2bff      	cmp	r3, #255	@ 0xff
 8002f08:	d802      	bhi.n	8002f10 <HAL_GPIO_Init+0x14c>
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	e002      	b.n	8002f16 <HAL_GPIO_Init+0x152>
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	3b08      	subs	r3, #8
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	fa01 f303 	lsl.w	r3, r1, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	431a      	orrs	r2, r3
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80b1 	beq.w	80030a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f44:	4b4d      	ldr	r3, [pc, #308]	@ (800307c <HAL_GPIO_Init+0x2b8>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4a4c      	ldr	r2, [pc, #304]	@ (800307c <HAL_GPIO_Init+0x2b8>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6193      	str	r3, [r2, #24]
 8002f50:	4b4a      	ldr	r3, [pc, #296]	@ (800307c <HAL_GPIO_Init+0x2b8>)
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	60bb      	str	r3, [r7, #8]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f5c:	4a48      	ldr	r2, [pc, #288]	@ (8003080 <HAL_GPIO_Init+0x2bc>)
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	220f      	movs	r2, #15
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a40      	ldr	r2, [pc, #256]	@ (8003084 <HAL_GPIO_Init+0x2c0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_GPIO_Init+0x1ec>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a3f      	ldr	r2, [pc, #252]	@ (8003088 <HAL_GPIO_Init+0x2c4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00d      	beq.n	8002fac <HAL_GPIO_Init+0x1e8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a3e      	ldr	r2, [pc, #248]	@ (800308c <HAL_GPIO_Init+0x2c8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <HAL_GPIO_Init+0x1e4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003090 <HAL_GPIO_Init+0x2cc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d101      	bne.n	8002fa4 <HAL_GPIO_Init+0x1e0>
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e006      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	e004      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e002      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e000      	b.n	8002fb2 <HAL_GPIO_Init+0x1ee>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	f002 0203 	and.w	r2, r2, #3
 8002fb8:	0092      	lsls	r2, r2, #2
 8002fba:	4093      	lsls	r3, r2
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fc2:	492f      	ldr	r1, [pc, #188]	@ (8003080 <HAL_GPIO_Init+0x2bc>)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3302      	adds	r3, #2
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d006      	beq.n	8002fea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	492c      	ldr	r1, [pc, #176]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fea:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	4928      	ldr	r1, [pc, #160]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d006      	beq.n	8003012 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003004:	4b23      	ldr	r3, [pc, #140]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	4922      	ldr	r1, [pc, #136]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	60cb      	str	r3, [r1, #12]
 8003010:	e006      	b.n	8003020 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003012:	4b20      	ldr	r3, [pc, #128]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	43db      	mvns	r3, r3
 800301a:	491e      	ldr	r1, [pc, #120]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800301c:	4013      	ands	r3, r2
 800301e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4918      	ldr	r1, [pc, #96]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800303a:	4b16      	ldr	r3, [pc, #88]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	43db      	mvns	r3, r3
 8003042:	4914      	ldr	r1, [pc, #80]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003044:	4013      	ands	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d021      	beq.n	8003098 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003054:	4b0f      	ldr	r3, [pc, #60]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	490e      	ldr	r1, [pc, #56]	@ (8003094 <HAL_GPIO_Init+0x2d0>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	600b      	str	r3, [r1, #0]
 8003060:	e021      	b.n	80030a6 <HAL_GPIO_Init+0x2e2>
 8003062:	bf00      	nop
 8003064:	10320000 	.word	0x10320000
 8003068:	10310000 	.word	0x10310000
 800306c:	10220000 	.word	0x10220000
 8003070:	10210000 	.word	0x10210000
 8003074:	10120000 	.word	0x10120000
 8003078:	10110000 	.word	0x10110000
 800307c:	40021000 	.word	0x40021000
 8003080:	40010000 	.word	0x40010000
 8003084:	40010800 	.word	0x40010800
 8003088:	40010c00 	.word	0x40010c00
 800308c:	40011000 	.word	0x40011000
 8003090:	40011400 	.word	0x40011400
 8003094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <HAL_GPIO_Init+0x304>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	43db      	mvns	r3, r3
 80030a0:	4909      	ldr	r1, [pc, #36]	@ (80030c8 <HAL_GPIO_Init+0x304>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	3301      	adds	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f ae8e 	bne.w	8002dd8 <HAL_GPIO_Init+0x14>
  }
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	372c      	adds	r7, #44	@ 0x2c
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	40010400 	.word	0x40010400

080030cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e12b      	b.n	8003336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff fa46 	bl	8002584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2224      	movs	r2, #36	@ 0x24
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800311e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800312e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003130:	f001 fc32 	bl	8004998 <HAL_RCC_GetPCLK1Freq>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	4a81      	ldr	r2, [pc, #516]	@ (8003340 <HAL_I2C_Init+0x274>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d807      	bhi.n	8003150 <HAL_I2C_Init+0x84>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4a80      	ldr	r2, [pc, #512]	@ (8003344 <HAL_I2C_Init+0x278>)
 8003144:	4293      	cmp	r3, r2
 8003146:	bf94      	ite	ls
 8003148:	2301      	movls	r3, #1
 800314a:	2300      	movhi	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	e006      	b.n	800315e <HAL_I2C_Init+0x92>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a7d      	ldr	r2, [pc, #500]	@ (8003348 <HAL_I2C_Init+0x27c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	bf94      	ite	ls
 8003158:	2301      	movls	r3, #1
 800315a:	2300      	movhi	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0e7      	b.n	8003336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4a78      	ldr	r2, [pc, #480]	@ (800334c <HAL_I2C_Init+0x280>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	0c9b      	lsrs	r3, r3, #18
 8003170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a6a      	ldr	r2, [pc, #424]	@ (8003340 <HAL_I2C_Init+0x274>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d802      	bhi.n	80031a0 <HAL_I2C_Init+0xd4>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	e009      	b.n	80031b4 <HAL_I2C_Init+0xe8>
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	4a69      	ldr	r2, [pc, #420]	@ (8003350 <HAL_I2C_Init+0x284>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	099b      	lsrs	r3, r3, #6
 80031b2:	3301      	adds	r3, #1
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	495c      	ldr	r1, [pc, #368]	@ (8003340 <HAL_I2C_Init+0x274>)
 80031d0:	428b      	cmp	r3, r1
 80031d2:	d819      	bhi.n	8003208 <HAL_I2C_Init+0x13c>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	1e59      	subs	r1, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031e8:	400b      	ands	r3, r1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_I2C_Init+0x138>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1e59      	subs	r1, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fc:	3301      	adds	r3, #1
 80031fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003202:	e051      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003204:	2304      	movs	r3, #4
 8003206:	e04f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_I2C_Init+0x168>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1e58      	subs	r0, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6859      	ldr	r1, [r3, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	440b      	add	r3, r1
 800321e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf0c      	ite	eq
 800322c:	2301      	moveq	r3, #1
 800322e:	2300      	movne	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e012      	b.n	800325a <HAL_I2C_Init+0x18e>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	1e58      	subs	r0, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6859      	ldr	r1, [r3, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	0099      	lsls	r1, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Init+0x196>
 800325e:	2301      	movs	r3, #1
 8003260:	e022      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10e      	bne.n	8003288 <HAL_I2C_Init+0x1bc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	1e58      	subs	r0, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	460b      	mov	r3, r1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	440b      	add	r3, r1
 8003278:	fbb0 f3f3 	udiv	r3, r0, r3
 800327c:	3301      	adds	r3, #1
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003286:	e00f      	b.n	80032a8 <HAL_I2C_Init+0x1dc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	0099      	lsls	r1, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	fbb0 f3f3 	udiv	r3, r0, r3
 800329e:	3301      	adds	r3, #1
 80032a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	6809      	ldr	r1, [r1, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69da      	ldr	r2, [r3, #28]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	431a      	orrs	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6911      	ldr	r1, [r2, #16]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68d2      	ldr	r2, [r2, #12]
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6812      	ldr	r2, [r2, #0]
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0201 	orr.w	r2, r2, #1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	000186a0 	.word	0x000186a0
 8003344:	001e847f 	.word	0x001e847f
 8003348:	003d08ff 	.word	0x003d08ff
 800334c:	431bde83 	.word	0x431bde83
 8003350:	10624dd3 	.word	0x10624dd3

08003354 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	4608      	mov	r0, r1
 800335e:	4611      	mov	r1, r2
 8003360:	461a      	mov	r2, r3
 8003362:	4603      	mov	r3, r0
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	460b      	mov	r3, r1
 8003368:	813b      	strh	r3, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800336e:	f7ff fb3b 	bl	80029e8 <HAL_GetTick>
 8003372:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b20      	cmp	r3, #32
 800337e:	f040 80d9 	bne.w	8003534 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2319      	movs	r3, #25
 8003388:	2201      	movs	r2, #1
 800338a:	496d      	ldr	r1, [pc, #436]	@ (8003540 <HAL_I2C_Mem_Write+0x1ec>)
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fcc1 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
 800339a:	e0cc      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Mem_Write+0x56>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e0c5      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2221      	movs	r2, #33	@ 0x21
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2240      	movs	r2, #64	@ 0x40
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a3a      	ldr	r2, [r7, #32]
 80033fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003400:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a4d      	ldr	r2, [pc, #308]	@ (8003544 <HAL_I2C_Mem_Write+0x1f0>)
 8003410:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003412:	88f8      	ldrh	r0, [r7, #6]
 8003414:	893a      	ldrh	r2, [r7, #8]
 8003416:	8979      	ldrh	r1, [r7, #10]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	4603      	mov	r3, r0
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 faf8 	bl	8003a18 <I2C_RequestMemoryWrite>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d052      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e081      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fd86 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	2b04      	cmp	r3, #4
 8003448:	d107      	bne.n	800345a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003458:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e06b      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	781a      	ldrb	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	1c5a      	adds	r2, r3, #1
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b04      	cmp	r3, #4
 800349a:	d11b      	bne.n	80034d4 <HAL_I2C_Mem_Write+0x180>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d017      	beq.n	80034d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1aa      	bne.n	8003432 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fd79 	bl	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00d      	beq.n	8003508 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d107      	bne.n	8003504 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003502:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e016      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003516:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	00100002 	.word	0x00100002
 8003544:	ffff0000 	.word	0xffff0000

08003548 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08c      	sub	sp, #48	@ 0x30
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	460b      	mov	r3, r1
 800355c:	813b      	strh	r3, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003566:	f7ff fa3f 	bl	80029e8 <HAL_GetTick>
 800356a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b20      	cmp	r3, #32
 8003576:	f040 8244 	bne.w	8003a02 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2319      	movs	r3, #25
 8003580:	2201      	movs	r2, #1
 8003582:	4982      	ldr	r1, [pc, #520]	@ (800378c <HAL_I2C_Mem_Read+0x244>)
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fbc5 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003590:	2302      	movs	r3, #2
 8003592:	e237      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359a:	2b01      	cmp	r3, #1
 800359c:	d101      	bne.n	80035a2 <HAL_I2C_Mem_Read+0x5a>
 800359e:	2302      	movs	r3, #2
 80035a0:	e230      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d007      	beq.n	80035c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2222      	movs	r2, #34	@ 0x22
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2240      	movs	r2, #64	@ 0x40
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a62      	ldr	r2, [pc, #392]	@ (8003790 <HAL_I2C_Mem_Read+0x248>)
 8003608:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800360a:	88f8      	ldrh	r0, [r7, #6]
 800360c:	893a      	ldrh	r2, [r7, #8]
 800360e:	8979      	ldrh	r1, [r7, #10]
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	9301      	str	r3, [sp, #4]
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4603      	mov	r3, r0
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 fa92 	bl	8003b44 <I2C_RequestMemoryRead>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1ec      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362e:	2b00      	cmp	r3, #0
 8003630:	d113      	bne.n	800365a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	e1c0      	b.n	80039dc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365e:	2b01      	cmp	r3, #1
 8003660:	d11e      	bne.n	80036a0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003670:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003672:	b672      	cpsid	i
}
 8003674:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800369c:	b662      	cpsie	i
}
 800369e:	e035      	b.n	800370c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d11e      	bne.n	80036e6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80036b8:	b672      	cpsid	i
}
 80036ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80036e2:	b662      	cpsie	i
}
 80036e4:	e012      	b.n	800370c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036f4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f6:	2300      	movs	r3, #0
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800370c:	e166      	b.n	80039dc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003712:	2b03      	cmp	r3, #3
 8003714:	f200 811f 	bhi.w	8003956 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371c:	2b01      	cmp	r3, #1
 800371e:	d123      	bne.n	8003768 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003720:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003722:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 fc9f 	bl	8004068 <I2C_WaitOnRXNEFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e167      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	b2d2      	uxtb	r2, r2
 8003740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003766:	e139      	b.n	80039dc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376c:	2b02      	cmp	r3, #2
 800376e:	d152      	bne.n	8003816 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003776:	2200      	movs	r2, #0
 8003778:	4906      	ldr	r1, [pc, #24]	@ (8003794 <HAL_I2C_Mem_Read+0x24c>)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 faca 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e13c      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
 800378a:	bf00      	nop
 800378c:	00100002 	.word	0x00100002
 8003790:	ffff0000 	.word	0xffff0000
 8003794:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003798:	b672      	cpsid	i
}
 800379a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80037de:	b662      	cpsie	i
}
 80037e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003814:	e0e2      	b.n	80039dc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	2200      	movs	r2, #0
 800381e:	497b      	ldr	r1, [pc, #492]	@ (8003a0c <HAL_I2C_Mem_Read+0x4c4>)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fa77 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0e9      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800383e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003840:	b672      	cpsid	i
}
 8003842:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003876:	4b66      	ldr	r3, [pc, #408]	@ (8003a10 <HAL_I2C_Mem_Read+0x4c8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	08db      	lsrs	r3, r3, #3
 800387c:	4a65      	ldr	r2, [pc, #404]	@ (8003a14 <HAL_I2C_Mem_Read+0x4cc>)
 800387e:	fba2 2303 	umull	r2, r3, r2, r3
 8003882:	0a1a      	lsrs	r2, r3, #8
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	00da      	lsls	r2, r3, #3
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	3b01      	subs	r3, #1
 8003894:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d118      	bne.n	80038ce <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f043 0220 	orr.w	r2, r3, #32
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80038be:	b662      	cpsie	i
}
 80038c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e09a      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d1d9      	bne.n	8003890 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691a      	ldr	r2, [r3, #16]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800391e:	b662      	cpsie	i
}
 8003920:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003954:	e042      	b.n	80039dc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003958:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fb84 	bl	8004068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e04c      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d118      	bne.n	80039dc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f47f ae94 	bne.w	800370e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80039fe:	2300      	movs	r3, #0
 8003a00:	e000      	b.n	8003a04 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003a02:	2302      	movs	r3, #2
  }
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3728      	adds	r7, #40	@ 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	00010004 	.word	0x00010004
 8003a10:	2000001c 	.word	0x2000001c
 8003a14:	14f8b589 	.word	0x14f8b589

08003a18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	4608      	mov	r0, r1
 8003a22:	4611      	mov	r1, r2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	817b      	strh	r3, [r7, #10]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	813b      	strh	r3, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f960 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a68:	d103      	bne.n	8003a72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e05f      	b.n	8003b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	492d      	ldr	r1, [pc, #180]	@ (8003b40 <I2C_RequestMemoryWrite+0x128>)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f9bb 	bl	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e04c      	b.n	8003b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	6a39      	ldr	r1, [r7, #32]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa46 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d107      	bne.n	8003ada <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e02b      	b.n	8003b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae4:	893b      	ldrh	r3, [r7, #8]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	611a      	str	r2, [r3, #16]
 8003aee:	e021      	b.n	8003b34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	6a39      	ldr	r1, [r7, #32]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa20 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d107      	bne.n	8003b26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e005      	b.n	8003b36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b2a:	893b      	ldrh	r3, [r7, #8]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	00010002 	.word	0x00010002

08003b44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	461a      	mov	r2, r3
 8003b52:	4603      	mov	r3, r0
 8003b54:	817b      	strh	r3, [r7, #10]
 8003b56:	460b      	mov	r3, r1
 8003b58:	813b      	strh	r3, [r7, #8]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f8c2 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba4:	d103      	bne.n	8003bae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0aa      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	4952      	ldr	r1, [pc, #328]	@ (8003d10 <I2C_RequestMemoryRead+0x1cc>)
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f91d 	bl	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e097      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f9a8 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00d      	beq.n	8003c1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d107      	bne.n	8003c16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e076      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d105      	bne.n	8003c2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c20:	893b      	ldrh	r3, [r7, #8]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]
 8003c2a:	e021      	b.n	8003c70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c2c:	893b      	ldrh	r3, [r7, #8]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c3c:	6a39      	ldr	r1, [r7, #32]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 f982 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d107      	bne.n	8003c62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e050      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c66:	893b      	ldrh	r3, [r7, #8]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c72:	6a39      	ldr	r1, [r7, #32]
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f967 	bl	8003f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00d      	beq.n	8003c9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d107      	bne.n	8003c98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e035      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003caa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f82b 	bl	8003d14 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00d      	beq.n	8003ce0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cd2:	d103      	bne.n	8003cdc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e013      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ce0:	897b      	ldrh	r3, [r7, #10]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	6a3a      	ldr	r2, [r7, #32]
 8003cf4:	4906      	ldr	r1, [pc, #24]	@ (8003d10 <I2C_RequestMemoryRead+0x1cc>)
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 f886 	bl	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	00010002 	.word	0x00010002

08003d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d24:	e048      	b.n	8003db8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d2c:	d044      	beq.n	8003db8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d2e:	f7fe fe5b 	bl	80029e8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d302      	bcc.n	8003d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d139      	bne.n	8003db8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	0c1b      	lsrs	r3, r3, #16
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d10d      	bne.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	43da      	mvns	r2, r3
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	e00c      	b.n	8003d84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	43da      	mvns	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d116      	bne.n	8003db8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e023      	b.n	8003e00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	0c1b      	lsrs	r3, r3, #16
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10d      	bne.n	8003dde <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	43da      	mvns	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	e00c      	b.n	8003df8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	79fb      	ldrb	r3, [r7, #7]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d093      	beq.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e16:	e071      	b.n	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e26:	d123      	bne.n	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	f043 0204 	orr.w	r2, r3, #4
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e067      	b.n	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d041      	beq.n	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e78:	f7fe fdb6 	bl	80029e8 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d136      	bne.n	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d10c      	bne.n	8003eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	bf14      	ite	ne
 8003eaa:	2301      	movne	r3, #1
 8003eac:	2300      	moveq	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	e00b      	b.n	8003eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	bf14      	ite	ne
 8003ec4:	2301      	movne	r3, #1
 8003ec6:	2300      	moveq	r3, #0
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	f043 0220 	orr.w	r2, r3, #32
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e021      	b.n	8003f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	0c1b      	lsrs	r3, r3, #16
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d10c      	bne.n	8003f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	43da      	mvns	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	4013      	ands	r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	bf14      	ite	ne
 8003f18:	2301      	movne	r3, #1
 8003f1a:	2300      	moveq	r3, #0
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	e00b      	b.n	8003f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	43da      	mvns	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	bf14      	ite	ne
 8003f32:	2301      	movne	r3, #1
 8003f34:	2300      	moveq	r3, #0
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f47f af6d 	bne.w	8003e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f54:	e034      	b.n	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f8e3 	bl	8004122 <I2C_IsAcknowledgeFailed>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e034      	b.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d028      	beq.n	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6e:	f7fe fd3b 	bl	80029e8 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d302      	bcc.n	8003f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d11d      	bne.n	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8e:	2b80      	cmp	r3, #128	@ 0x80
 8003f90:	d016      	beq.n	8003fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e007      	b.n	8003fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fca:	2b80      	cmp	r3, #128	@ 0x80
 8003fcc:	d1c3      	bne.n	8003f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fe4:	e034      	b.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 f89b 	bl	8004122 <I2C_IsAcknowledgeFailed>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e034      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffc:	d028      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffe:	f7fe fcf3 	bl	80029e8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d11d      	bne.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b04      	cmp	r3, #4
 8004020:	d016      	beq.n	8004050 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f043 0220 	orr.w	r2, r3, #32
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e007      	b.n	8004060 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b04      	cmp	r3, #4
 800405c:	d1c3      	bne.n	8003fe6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004074:	e049      	b.n	800410a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b10      	cmp	r3, #16
 8004082:	d119      	bne.n	80040b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0210 	mvn.w	r2, #16
 800408c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e030      	b.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b8:	f7fe fc96 	bl	80029e8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d11d      	bne.n	800410a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b40      	cmp	r3, #64	@ 0x40
 80040da:	d016      	beq.n	800410a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e007      	b.n	800411a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004114:	2b40      	cmp	r3, #64	@ 0x40
 8004116:	d1ae      	bne.n	8004076 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004138:	d11b      	bne.n	8004172 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004142:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f043 0204 	orr.w	r2, r3, #4
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e034      	b.n	80041fa <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004198:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f245 5255 	movw	r2, #21845	@ 0x5555
 80041a2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6852      	ldr	r2, [r2, #4]
 80041ac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6892      	ldr	r2, [r2, #8]
 80041b6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80041b8:	f7fe fc16 	bl	80029e8 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80041be:	e00f      	b.n	80041e0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80041c0:	f7fe fc12 	bl	80029e8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b27      	cmp	r3, #39	@ 0x27
 80041cc:	d908      	bls.n	80041e0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e00c      	b.n	80041fa <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e8      	bne.n	80041c0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80041f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e272      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 8087 	beq.w	8004332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004224:	4b92      	ldr	r3, [pc, #584]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b04      	cmp	r3, #4
 800422e:	d00c      	beq.n	800424a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004230:	4b8f      	ldr	r3, [pc, #572]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b08      	cmp	r3, #8
 800423a:	d112      	bne.n	8004262 <HAL_RCC_OscConfig+0x5e>
 800423c:	4b8c      	ldr	r3, [pc, #560]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004248:	d10b      	bne.n	8004262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424a:	4b89      	ldr	r3, [pc, #548]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d06c      	beq.n	8004330 <HAL_RCC_OscConfig+0x12c>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d168      	bne.n	8004330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e24c      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x76>
 800426c:	4b80      	ldr	r3, [pc, #512]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a7f      	ldr	r2, [pc, #508]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e02e      	b.n	80042d8 <HAL_RCC_OscConfig+0xd4>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x98>
 8004282:	4b7b      	ldr	r3, [pc, #492]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a7a      	ldr	r2, [pc, #488]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b78      	ldr	r3, [pc, #480]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a77      	ldr	r2, [pc, #476]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004294:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e01d      	b.n	80042d8 <HAL_RCC_OscConfig+0xd4>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0xbc>
 80042a6:	4b72      	ldr	r3, [pc, #456]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a71      	ldr	r2, [pc, #452]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a6e      	ldr	r2, [pc, #440]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0xd4>
 80042c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a6a      	ldr	r2, [pc, #424]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b68      	ldr	r3, [pc, #416]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a67      	ldr	r2, [pc, #412]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fe fb82 	bl	80029e8 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fe fb7e 	bl	80029e8 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	@ 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e200      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0xe4>
 8004306:	e014      	b.n	8004332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe fb6e 	bl	80029e8 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe fb6a 	bl	80029e8 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	@ 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e1ec      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	4b53      	ldr	r3, [pc, #332]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x10c>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d063      	beq.n	8004406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800433e:	4b4c      	ldr	r3, [pc, #304]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800434a:	4b49      	ldr	r3, [pc, #292]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 030c 	and.w	r3, r3, #12
 8004352:	2b08      	cmp	r3, #8
 8004354:	d11c      	bne.n	8004390 <HAL_RCC_OscConfig+0x18c>
 8004356:	4b46      	ldr	r3, [pc, #280]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d116      	bne.n	8004390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	4b43      	ldr	r3, [pc, #268]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_RCC_OscConfig+0x176>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d001      	beq.n	800437a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e1c0      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800437a:	4b3d      	ldr	r3, [pc, #244]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4939      	ldr	r1, [pc, #228]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 800438a:	4313      	orrs	r3, r2
 800438c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	e03a      	b.n	8004406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d020      	beq.n	80043da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004398:	4b36      	ldr	r3, [pc, #216]	@ (8004474 <HAL_RCC_OscConfig+0x270>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439e:	f7fe fb23 	bl	80029e8 <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a6:	f7fe fb1f 	bl	80029e8 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e1a1      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4927      	ldr	r1, [pc, #156]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
 80043d8:	e015      	b.n	8004406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043da:	4b26      	ldr	r3, [pc, #152]	@ (8004474 <HAL_RCC_OscConfig+0x270>)
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fe fb02 	bl	80029e8 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e8:	f7fe fafe 	bl	80029e8 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e180      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d03a      	beq.n	8004488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d019      	beq.n	800444e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800441a:	4b17      	ldr	r3, [pc, #92]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004420:	f7fe fae2 	bl	80029e8 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004428:	f7fe fade 	bl	80029e8 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e160      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800443a:	4b0d      	ldr	r3, [pc, #52]	@ (8004470 <HAL_RCC_OscConfig+0x26c>)
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d0f0      	beq.n	8004428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004446:	2001      	movs	r0, #1
 8004448:	f000 face 	bl	80049e8 <RCC_Delay>
 800444c:	e01c      	b.n	8004488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800444e:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <HAL_RCC_OscConfig+0x274>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004454:	f7fe fac8 	bl	80029e8 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445a:	e00f      	b.n	800447c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800445c:	f7fe fac4 	bl	80029e8 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d908      	bls.n	800447c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e146      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	42420000 	.word	0x42420000
 8004478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800447c:	4b92      	ldr	r3, [pc, #584]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e9      	bne.n	800445c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	f000 80a6 	beq.w	80045e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800449a:	4b8b      	ldr	r3, [pc, #556]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10d      	bne.n	80044c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a6:	4b88      	ldr	r3, [pc, #544]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	69db      	ldr	r3, [r3, #28]
 80044aa:	4a87      	ldr	r2, [pc, #540]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b0:	61d3      	str	r3, [r2, #28]
 80044b2:	4b85      	ldr	r3, [pc, #532]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	4b82      	ldr	r3, [pc, #520]	@ (80046cc <HAL_RCC_OscConfig+0x4c8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d118      	bne.n	8004500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ce:	4b7f      	ldr	r3, [pc, #508]	@ (80046cc <HAL_RCC_OscConfig+0x4c8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a7e      	ldr	r2, [pc, #504]	@ (80046cc <HAL_RCC_OscConfig+0x4c8>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044da:	f7fe fa85 	bl	80029e8 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e2:	f7fe fa81 	bl	80029e8 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b64      	cmp	r3, #100	@ 0x64
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e103      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f4:	4b75      	ldr	r3, [pc, #468]	@ (80046cc <HAL_RCC_OscConfig+0x4c8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d106      	bne.n	8004516 <HAL_RCC_OscConfig+0x312>
 8004508:	4b6f      	ldr	r3, [pc, #444]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4a6e      	ldr	r2, [pc, #440]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6213      	str	r3, [r2, #32]
 8004514:	e02d      	b.n	8004572 <HAL_RCC_OscConfig+0x36e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x334>
 800451e:	4b6a      	ldr	r3, [pc, #424]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	4a69      	ldr	r2, [pc, #420]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	6213      	str	r3, [r2, #32]
 800452a:	4b67      	ldr	r3, [pc, #412]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	4a66      	ldr	r2, [pc, #408]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	f023 0304 	bic.w	r3, r3, #4
 8004534:	6213      	str	r3, [r2, #32]
 8004536:	e01c      	b.n	8004572 <HAL_RCC_OscConfig+0x36e>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	2b05      	cmp	r3, #5
 800453e:	d10c      	bne.n	800455a <HAL_RCC_OscConfig+0x356>
 8004540:	4b61      	ldr	r3, [pc, #388]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	4a60      	ldr	r2, [pc, #384]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004546:	f043 0304 	orr.w	r3, r3, #4
 800454a:	6213      	str	r3, [r2, #32]
 800454c:	4b5e      	ldr	r3, [pc, #376]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	4a5d      	ldr	r2, [pc, #372]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6213      	str	r3, [r2, #32]
 8004558:	e00b      	b.n	8004572 <HAL_RCC_OscConfig+0x36e>
 800455a:	4b5b      	ldr	r3, [pc, #364]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	4a5a      	ldr	r2, [pc, #360]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004560:	f023 0301 	bic.w	r3, r3, #1
 8004564:	6213      	str	r3, [r2, #32]
 8004566:	4b58      	ldr	r3, [pc, #352]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4a57      	ldr	r2, [pc, #348]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d015      	beq.n	80045a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800457a:	f7fe fa35 	bl	80029e8 <HAL_GetTick>
 800457e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	e00a      	b.n	8004598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004582:	f7fe fa31 	bl	80029e8 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004590:	4293      	cmp	r3, r2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e0b1      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004598:	4b4b      	ldr	r3, [pc, #300]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0ee      	beq.n	8004582 <HAL_RCC_OscConfig+0x37e>
 80045a4:	e014      	b.n	80045d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a6:	f7fe fa1f 	bl	80029e8 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fe fa1b 	bl	80029e8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e09b      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c4:	4b40      	ldr	r3, [pc, #256]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1ee      	bne.n	80045ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d105      	bne.n	80045e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d6:	4b3c      	ldr	r3, [pc, #240]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	69db      	ldr	r3, [r3, #28]
 80045da:	4a3b      	ldr	r2, [pc, #236]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8087 	beq.w	80046fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ec:	4b36      	ldr	r3, [pc, #216]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d061      	beq.n	80046bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d146      	bne.n	800468e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004600:	4b33      	ldr	r3, [pc, #204]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fe f9ef 	bl	80029e8 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800460e:	f7fe f9eb 	bl	80029e8 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e06d      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004620:	4b29      	ldr	r3, [pc, #164]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f0      	bne.n	800460e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004634:	d108      	bne.n	8004648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004636:	4b24      	ldr	r3, [pc, #144]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	4921      	ldr	r1, [pc, #132]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004644:	4313      	orrs	r3, r2
 8004646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004648:	4b1f      	ldr	r3, [pc, #124]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a19      	ldr	r1, [r3, #32]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	430b      	orrs	r3, r1
 800465a:	491b      	ldr	r1, [pc, #108]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	4313      	orrs	r3, r2
 800465e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004660:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fe f9bf 	bl	80029e8 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466e:	f7fe f9bb 	bl	80029e8 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e03d      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004680:	4b11      	ldr	r3, [pc, #68]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x46a>
 800468c:	e035      	b.n	80046fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800468e:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <HAL_RCC_OscConfig+0x4cc>)
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7fe f9a8 	bl	80029e8 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800469c:	f7fe f9a4 	bl	80029e8 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e026      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046ae:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <HAL_RCC_OscConfig+0x4c4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x498>
 80046ba:	e01e      	b.n	80046fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d107      	bne.n	80046d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e019      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40007000 	.word	0x40007000
 80046d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004704 <HAL_RCC_OscConfig+0x500>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d001      	beq.n	80046fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e0d0      	b.n	80048be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800471c:	4b6a      	ldr	r3, [pc, #424]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d910      	bls.n	800474c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472a:	4b67      	ldr	r3, [pc, #412]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f023 0207 	bic.w	r2, r3, #7
 8004732:	4965      	ldr	r1, [pc, #404]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	4313      	orrs	r3, r2
 8004738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800473a:	4b63      	ldr	r3, [pc, #396]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0307 	and.w	r3, r3, #7
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	429a      	cmp	r2, r3
 8004746:	d001      	beq.n	800474c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0b8      	b.n	80048be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d020      	beq.n	800479a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004764:	4b59      	ldr	r3, [pc, #356]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4a58      	ldr	r2, [pc, #352]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 800476a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800476e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800477c:	4b53      	ldr	r3, [pc, #332]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	4a52      	ldr	r2, [pc, #328]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 8004782:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004786:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004788:	4b50      	ldr	r3, [pc, #320]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	494d      	ldr	r1, [pc, #308]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d040      	beq.n	8004828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ae:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d115      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e07f      	b.n	80048be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c6:	4b41      	ldr	r3, [pc, #260]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e073      	b.n	80048be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d6:	4b3d      	ldr	r3, [pc, #244]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e06b      	b.n	80048be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e6:	4b39      	ldr	r3, [pc, #228]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4936      	ldr	r1, [pc, #216]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f8:	f7fe f8f6 	bl	80029e8 <HAL_GetTick>
 80047fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004800:	f7fe f8f2 	bl	80029e8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e053      	b.n	80048be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	4b2d      	ldr	r3, [pc, #180]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f003 020c 	and.w	r2, r3, #12
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	429a      	cmp	r2, r3
 8004826:	d1eb      	bne.n	8004800 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004828:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d210      	bcs.n	8004858 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b24      	ldr	r3, [pc, #144]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 0207 	bic.w	r2, r3, #7
 800483e:	4922      	ldr	r1, [pc, #136]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	4313      	orrs	r3, r2
 8004844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004846:	4b20      	ldr	r3, [pc, #128]	@ (80048c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	429a      	cmp	r2, r3
 8004852:	d001      	beq.n	8004858 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e032      	b.n	80048be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004864:	4b19      	ldr	r3, [pc, #100]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	4916      	ldr	r1, [pc, #88]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004882:	4b12      	ldr	r3, [pc, #72]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	490e      	ldr	r1, [pc, #56]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004896:	f000 f821 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b0b      	ldr	r3, [pc, #44]	@ (80048cc <HAL_RCC_ClockConfig+0x1c4>)
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	091b      	lsrs	r3, r3, #4
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	490a      	ldr	r1, [pc, #40]	@ (80048d0 <HAL_RCC_ClockConfig+0x1c8>)
 80048a8:	5ccb      	ldrb	r3, [r1, r3]
 80048aa:	fa22 f303 	lsr.w	r3, r2, r3
 80048ae:	4a09      	ldr	r2, [pc, #36]	@ (80048d4 <HAL_RCC_ClockConfig+0x1cc>)
 80048b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048b2:	4b09      	ldr	r3, [pc, #36]	@ (80048d8 <HAL_RCC_ClockConfig+0x1d0>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe f854 	bl	8002964 <HAL_InitTick>

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40022000 	.word	0x40022000
 80048cc:	40021000 	.word	0x40021000
 80048d0:	08007254 	.word	0x08007254
 80048d4:	2000001c 	.word	0x2000001c
 80048d8:	20000020 	.word	0x20000020

080048dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	2300      	movs	r3, #0
 80048f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x94>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b04      	cmp	r3, #4
 8004904:	d002      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0x30>
 8004906:	2b08      	cmp	r3, #8
 8004908:	d003      	beq.n	8004912 <HAL_RCC_GetSysClockFreq+0x36>
 800490a:	e027      	b.n	800495c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800490c:	4b19      	ldr	r3, [pc, #100]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x98>)
 800490e:	613b      	str	r3, [r7, #16]
      break;
 8004910:	e027      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	0c9b      	lsrs	r3, r3, #18
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	4a17      	ldr	r2, [pc, #92]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x9c>)
 800491c:	5cd3      	ldrb	r3, [r2, r3]
 800491e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d010      	beq.n	800494c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800492a:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <HAL_RCC_GetSysClockFreq+0x94>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	0c5b      	lsrs	r3, r3, #17
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	4a11      	ldr	r2, [pc, #68]	@ (800497c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004936:	5cd3      	ldrb	r3, [r2, r3]
 8004938:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a0d      	ldr	r2, [pc, #52]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x98>)
 800493e:	fb03 f202 	mul.w	r2, r3, r2
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	617b      	str	r3, [r7, #20]
 800494a:	e004      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	613b      	str	r3, [r7, #16]
      break;
 800495a:	e002      	b.n	8004962 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x98>)
 800495e:	613b      	str	r3, [r7, #16]
      break;
 8004960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004962:	693b      	ldr	r3, [r7, #16]
}
 8004964:	4618      	mov	r0, r3
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000
 8004974:	007a1200 	.word	0x007a1200
 8004978:	0800726c 	.word	0x0800726c
 800497c:	0800727c 	.word	0x0800727c
 8004980:	003d0900 	.word	0x003d0900

08004984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004988:	4b02      	ldr	r3, [pc, #8]	@ (8004994 <HAL_RCC_GetHCLKFreq+0x10>)
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr
 8004994:	2000001c 	.word	0x2000001c

08004998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800499c:	f7ff fff2 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	0a1b      	lsrs	r3, r3, #8
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4903      	ldr	r1, [pc, #12]	@ (80049bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40021000 	.word	0x40021000
 80049bc:	08007264 	.word	0x08007264

080049c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049c4:	f7ff ffde 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	0adb      	lsrs	r3, r3, #11
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	4903      	ldr	r1, [pc, #12]	@ (80049e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d6:	5ccb      	ldrb	r3, [r1, r3]
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	08007264 	.word	0x08007264

080049e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049f0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <RCC_Delay+0x34>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004a20 <RCC_Delay+0x38>)
 80049f6:	fba2 2303 	umull	r2, r3, r2, r3
 80049fa:	0a5b      	lsrs	r3, r3, #9
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	fb02 f303 	mul.w	r3, r2, r3
 8004a02:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a04:	bf00      	nop
  }
  while (Delay --);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1e5a      	subs	r2, r3, #1
 8004a0a:	60fa      	str	r2, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f9      	bne.n	8004a04 <RCC_Delay+0x1c>
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	2000001c 	.word	0x2000001c
 8004a20:	10624dd3 	.word	0x10624dd3

08004a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e041      	b.n	8004aba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d106      	bne.n	8004a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fd fdea 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	4619      	mov	r1, r3
 8004a62:	4610      	mov	r0, r2
 8004a64:	f000 fafc 	bl	8005060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d001      	beq.n	8004adc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e032      	b.n	8004b42 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a18      	ldr	r2, [pc, #96]	@ (8004b4c <HAL_TIM_Base_Start+0x88>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_Base_Start+0x48>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_Base_Start+0x48>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a14      	ldr	r2, [pc, #80]	@ (8004b50 <HAL_TIM_Base_Start+0x8c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_Base_Start+0x48>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a13      	ldr	r2, [pc, #76]	@ (8004b54 <HAL_TIM_Base_Start+0x90>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d111      	bne.n	8004b30 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	d010      	beq.n	8004b40 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2e:	e007      	b.n	8004b40 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0201 	orr.w	r2, r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bc80      	pop	{r7}
 8004b4a:	4770      	bx	lr
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40000400 	.word	0x40000400
 8004b54:	40000800 	.word	0x40000800

08004b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e041      	b.n	8004bee <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d106      	bne.n	8004b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f839 	bl	8004bf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3304      	adds	r3, #4
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f000 fa62 	bl	8005060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bfe:	bf00      	nop
 8004c00:	370c      	adds	r7, #12
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d109      	bne.n	8004c2c <HAL_TIM_PWM_Start+0x24>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	bf14      	ite	ne
 8004c24:	2301      	movne	r3, #1
 8004c26:	2300      	moveq	r3, #0
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	e022      	b.n	8004c72 <HAL_TIM_PWM_Start+0x6a>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d109      	bne.n	8004c46 <HAL_TIM_PWM_Start+0x3e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	bf14      	ite	ne
 8004c3e:	2301      	movne	r3, #1
 8004c40:	2300      	moveq	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	e015      	b.n	8004c72 <HAL_TIM_PWM_Start+0x6a>
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d109      	bne.n	8004c60 <HAL_TIM_PWM_Start+0x58>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e008      	b.n	8004c72 <HAL_TIM_PWM_Start+0x6a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e05e      	b.n	8004d38 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_PWM_Start+0x82>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c88:	e013      	b.n	8004cb2 <HAL_TIM_PWM_Start+0xaa>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d104      	bne.n	8004c9a <HAL_TIM_PWM_Start+0x92>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2202      	movs	r2, #2
 8004c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c98:	e00b      	b.n	8004cb2 <HAL_TIM_PWM_Start+0xaa>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_PWM_Start+0xa2>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ca8:	e003      	b.n	8004cb2 <HAL_TIM_PWM_Start+0xaa>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2202      	movs	r2, #2
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	6839      	ldr	r1, [r7, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc50 	bl	8005560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d40 <HAL_TIM_PWM_Start+0x138>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d107      	bne.n	8004cda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a18      	ldr	r2, [pc, #96]	@ (8004d40 <HAL_TIM_PWM_Start+0x138>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_TIM_PWM_Start+0xfa>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cec:	d009      	beq.n	8004d02 <HAL_TIM_PWM_Start+0xfa>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a14      	ldr	r2, [pc, #80]	@ (8004d44 <HAL_TIM_PWM_Start+0x13c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_TIM_PWM_Start+0xfa>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <HAL_TIM_PWM_Start+0x140>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d111      	bne.n	8004d26 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d010      	beq.n	8004d36 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0201 	orr.w	r2, r2, #1
 8004d22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	e007      	b.n	8004d36 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000800 	.word	0x40000800

08004d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e0ae      	b.n	8004ec8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	f200 809f 	bhi.w	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004db5 	.word	0x08004db5
 8004d84:	08004eb9 	.word	0x08004eb9
 8004d88:	08004eb9 	.word	0x08004eb9
 8004d8c:	08004eb9 	.word	0x08004eb9
 8004d90:	08004df5 	.word	0x08004df5
 8004d94:	08004eb9 	.word	0x08004eb9
 8004d98:	08004eb9 	.word	0x08004eb9
 8004d9c:	08004eb9 	.word	0x08004eb9
 8004da0:	08004e37 	.word	0x08004e37
 8004da4:	08004eb9 	.word	0x08004eb9
 8004da8:	08004eb9 	.word	0x08004eb9
 8004dac:	08004eb9 	.word	0x08004eb9
 8004db0:	08004e77 	.word	0x08004e77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 f9b2 	bl	8005124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0208 	orr.w	r2, r2, #8
 8004dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0204 	bic.w	r2, r2, #4
 8004dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	619a      	str	r2, [r3, #24]
      break;
 8004df2:	e064      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f9f8 	bl	80051f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6999      	ldr	r1, [r3, #24]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	021a      	lsls	r2, r3, #8
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	619a      	str	r2, [r3, #24]
      break;
 8004e34:	e043      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa41 	bl	80052c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0208 	orr.w	r2, r2, #8
 8004e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0204 	bic.w	r2, r2, #4
 8004e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	61da      	str	r2, [r3, #28]
      break;
 8004e74:	e023      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fa8b 	bl	8005398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69d9      	ldr	r1, [r3, #28]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	021a      	lsls	r2, r3, #8
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	61da      	str	r2, [r3, #28]
      break;
 8004eb6:	e002      	b.n	8004ebe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	75fb      	strb	r3, [r7, #23]
      break;
 8004ebc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d101      	bne.n	8004eec <HAL_TIM_ConfigClockSource+0x1c>
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e0b4      	b.n	8005056 <HAL_TIM_ConfigClockSource+0x186>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f24:	d03e      	beq.n	8004fa4 <HAL_TIM_ConfigClockSource+0xd4>
 8004f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f2a:	f200 8087 	bhi.w	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f32:	f000 8086 	beq.w	8005042 <HAL_TIM_ConfigClockSource+0x172>
 8004f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f3a:	d87f      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b70      	cmp	r3, #112	@ 0x70
 8004f3e:	d01a      	beq.n	8004f76 <HAL_TIM_ConfigClockSource+0xa6>
 8004f40:	2b70      	cmp	r3, #112	@ 0x70
 8004f42:	d87b      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b60      	cmp	r3, #96	@ 0x60
 8004f46:	d050      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0x11a>
 8004f48:	2b60      	cmp	r3, #96	@ 0x60
 8004f4a:	d877      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b50      	cmp	r3, #80	@ 0x50
 8004f4e:	d03c      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0xfa>
 8004f50:	2b50      	cmp	r3, #80	@ 0x50
 8004f52:	d873      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	d058      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x13a>
 8004f58:	2b40      	cmp	r3, #64	@ 0x40
 8004f5a:	d86f      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b30      	cmp	r3, #48	@ 0x30
 8004f5e:	d064      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x15a>
 8004f60:	2b30      	cmp	r3, #48	@ 0x30
 8004f62:	d86b      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d060      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x15a>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d867      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d05c      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x15a>
 8004f70:	2b10      	cmp	r3, #16
 8004f72:	d05a      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x15a>
 8004f74:	e062      	b.n	800503c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f86:	f000 facc 	bl	8005522 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	609a      	str	r2, [r3, #8]
      break;
 8004fa2:	e04f      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fb4:	f000 fab5 	bl	8005522 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689a      	ldr	r2, [r3, #8]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc6:	609a      	str	r2, [r3, #8]
      break;
 8004fc8:	e03c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	f000 fa2c 	bl	8005434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2150      	movs	r1, #80	@ 0x50
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fa83 	bl	80054ee <TIM_ITRx_SetConfig>
      break;
 8004fe8:	e02c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f000 fa4a 	bl	8005490 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2160      	movs	r1, #96	@ 0x60
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fa73 	bl	80054ee <TIM_ITRx_SetConfig>
      break;
 8005008:	e01c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005016:	461a      	mov	r2, r3
 8005018:	f000 fa0c 	bl	8005434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2140      	movs	r1, #64	@ 0x40
 8005022:	4618      	mov	r0, r3
 8005024:	f000 fa63 	bl	80054ee <TIM_ITRx_SetConfig>
      break;
 8005028:	e00c      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f000 fa5a 	bl	80054ee <TIM_ITRx_SetConfig>
      break;
 800503a:	e003      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	73fb      	strb	r3, [r7, #15]
      break;
 8005040:	e000      	b.n	8005044 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005042:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005054:	7bfb      	ldrb	r3, [r7, #15]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a29      	ldr	r2, [pc, #164]	@ (8005118 <TIM_Base_SetConfig+0xb8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00b      	beq.n	8005090 <TIM_Base_SetConfig+0x30>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800507e:	d007      	beq.n	8005090 <TIM_Base_SetConfig+0x30>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a26      	ldr	r2, [pc, #152]	@ (800511c <TIM_Base_SetConfig+0xbc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d003      	beq.n	8005090 <TIM_Base_SetConfig+0x30>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a25      	ldr	r2, [pc, #148]	@ (8005120 <TIM_Base_SetConfig+0xc0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d108      	bne.n	80050a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005118 <TIM_Base_SetConfig+0xb8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <TIM_Base_SetConfig+0x62>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050b0:	d007      	beq.n	80050c2 <TIM_Base_SetConfig+0x62>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a19      	ldr	r2, [pc, #100]	@ (800511c <TIM_Base_SetConfig+0xbc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d003      	beq.n	80050c2 <TIM_Base_SetConfig+0x62>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a18      	ldr	r2, [pc, #96]	@ (8005120 <TIM_Base_SetConfig+0xc0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d108      	bne.n	80050d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a07      	ldr	r2, [pc, #28]	@ (8005118 <TIM_Base_SetConfig+0xb8>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d103      	bne.n	8005108 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	615a      	str	r2, [r3, #20]
}
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800

08005124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f023 0201 	bic.w	r2, r3, #1
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0302 	bic.w	r3, r3, #2
 800516c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1c      	ldr	r2, [pc, #112]	@ (80051ec <TIM_OC1_SetConfig+0xc8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d10c      	bne.n	800519a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f023 0308 	bic.w	r3, r3, #8
 8005186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f023 0304 	bic.w	r3, r3, #4
 8005198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a13      	ldr	r2, [pc, #76]	@ (80051ec <TIM_OC1_SetConfig+0xc8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d111      	bne.n	80051c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40012c00 	.word	0x40012c00

080051f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	f023 0210 	bic.w	r2, r3, #16
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800521e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	021b      	lsls	r3, r3, #8
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4313      	orrs	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0320 	bic.w	r3, r3, #32
 800523a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1d      	ldr	r2, [pc, #116]	@ (80052c0 <TIM_OC2_SetConfig+0xd0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d10d      	bne.n	800526c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	4313      	orrs	r3, r2
 8005262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800526a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a14      	ldr	r2, [pc, #80]	@ (80052c0 <TIM_OC2_SetConfig+0xd0>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d113      	bne.n	800529c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800527a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	621a      	str	r2, [r3, #32]
}
 80052b6:	bf00      	nop
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00

080052c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0303 	bic.w	r3, r3, #3
 80052fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800530c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	4313      	orrs	r3, r2
 8005318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a1d      	ldr	r2, [pc, #116]	@ (8005394 <TIM_OC3_SetConfig+0xd0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d10d      	bne.n	800533e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a14      	ldr	r2, [pc, #80]	@ (8005394 <TIM_OC3_SetConfig+0xd0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d113      	bne.n	800536e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800534c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4313      	orrs	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	621a      	str	r2, [r3, #32]
}
 8005388:	bf00      	nop
 800538a:	371c      	adds	r7, #28
 800538c:	46bd      	mov	sp, r7
 800538e:	bc80      	pop	{r7}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40012c00 	.word	0x40012c00

08005398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a0f      	ldr	r2, [pc, #60]	@ (8005430 <TIM_OC4_SetConfig+0x98>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d109      	bne.n	800540c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00

08005434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005434:	b480      	push	{r7}
 8005436:	b087      	sub	sp, #28
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800545e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f023 030a 	bic.w	r3, r3, #10
 8005470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4313      	orrs	r3, r2
 8005478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	621a      	str	r2, [r3, #32]
}
 8005486:	bf00      	nop
 8005488:	371c      	adds	r7, #28
 800548a:	46bd      	mov	sp, r7
 800548c:	bc80      	pop	{r7}
 800548e:	4770      	bx	lr

08005490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	f023 0210 	bic.w	r2, r3, #16
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	031b      	lsls	r3, r3, #12
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	621a      	str	r2, [r3, #32]
}
 80054e4:	bf00      	nop
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr

080054ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	f043 0307 	orr.w	r3, r3, #7
 8005510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	609a      	str	r2, [r3, #8]
}
 8005518:	bf00      	nop
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	bc80      	pop	{r7}
 8005520:	4770      	bx	lr

08005522 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005522:	b480      	push	{r7}
 8005524:	b087      	sub	sp, #28
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
 800552e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800553c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	021a      	lsls	r2, r3, #8
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	431a      	orrs	r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	4313      	orrs	r3, r2
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	609a      	str	r2, [r3, #8]
}
 8005556:	bf00      	nop
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 031f 	and.w	r3, r3, #31
 8005572:	2201      	movs	r2, #1
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a1a      	ldr	r2, [r3, #32]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	43db      	mvns	r3, r3
 8005582:	401a      	ands	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	fa01 f303 	lsl.w	r3, r1, r3
 8005598:	431a      	orrs	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bc80      	pop	{r7}
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055bc:	2302      	movs	r3, #2
 80055be:	e046      	b.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a16      	ldr	r2, [pc, #88]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00e      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800560c:	d009      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a12      	ldr	r2, [pc, #72]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a10      	ldr	r2, [pc, #64]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10c      	bne.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4313      	orrs	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40000400 	.word	0x40000400
 8005660:	40000800 	.word	0x40000800

08005664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e042      	b.n	80056fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fd f85a 	bl	8002744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2224      	movs	r2, #36	@ 0x24
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fcff 	bl	80060ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2200      	movs	r2, #0
 80056f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	4613      	mov	r3, r2
 8005710:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b20      	cmp	r3, #32
 800571c:	d121      	bne.n	8005762 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_UART_Transmit_IT+0x26>
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e01a      	b.n	8005764 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2221      	movs	r2, #33	@ 0x21
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800575c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e000      	b.n	8005764 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005762:	2302      	movs	r3, #2
  }
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	4613      	mov	r3, r2
 800577a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b20      	cmp	r3, #32
 8005786:	d112      	bne.n	80057ae <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <HAL_UART_Receive_IT+0x26>
 800578e:	88fb      	ldrh	r3, [r7, #6]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e00b      	b.n	80057b0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	461a      	mov	r2, r3
 80057a2:	68b9      	ldr	r1, [r7, #8]
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 faad 	bl	8005d04 <UART_Start_Receive_IT>
 80057aa:	4603      	mov	r3, r0
 80057ac:	e000      	b.n	80057b0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80057ae:	2302      	movs	r3, #2
  }
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b0ba      	sub	sp, #232	@ 0xe8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057de:	2300      	movs	r3, #0
 80057e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10f      	bne.n	800581e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_UART_IRQHandler+0x66>
 800580a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800580e:	f003 0320 	and.w	r3, r3, #32
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fb8a 	bl	8005f30 <UART_Receive_IT>
      return;
 800581c:	e25b      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800581e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005822:	2b00      	cmp	r3, #0
 8005824:	f000 80de 	beq.w	80059e4 <HAL_UART_IRQHandler+0x22c>
 8005828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d106      	bne.n	8005842 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005838:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80d1 	beq.w	80059e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00b      	beq.n	8005866 <HAL_UART_IRQHandler+0xae>
 800584e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00b      	beq.n	800588a <HAL_UART_IRQHandler+0xd2>
 8005872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005882:	f043 0202 	orr.w	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00b      	beq.n	80058ae <HAL_UART_IRQHandler+0xf6>
 8005896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058a6:	f043 0204 	orr.w	r2, r3, #4
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d011      	beq.n	80058de <HAL_UART_IRQHandler+0x126>
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	f043 0208 	orr.w	r2, r3, #8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 81f2 	beq.w	8005ccc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <HAL_UART_IRQHandler+0x14e>
 80058f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb15 	bl	8005f30 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	bf14      	ite	ne
 8005914:	2301      	movne	r3, #1
 8005916:	2300      	moveq	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <HAL_UART_IRQHandler+0x17a>
 800592a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d04f      	beq.n	80059d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fa1f 	bl	8005d76 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d041      	beq.n	80059ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800595c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005972:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005976:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800597e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800598a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1d9      	bne.n	8005946 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005996:	2b00      	cmp	r3, #0
 8005998:	d013      	beq.n	80059c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800599e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b98 <HAL_UART_IRQHandler+0x3e0>)
 80059a0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fd f994 	bl	8002cd4 <HAL_DMA_Abort_IT>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d016      	beq.n	80059e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80059bc:	4610      	mov	r0, r2
 80059be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	e00e      	b.n	80059e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f98a 	bl	8005cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c8:	e00a      	b.n	80059e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f986 	bl	8005cdc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	e006      	b.n	80059e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f982 	bl	8005cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80059de:	e175      	b.n	8005ccc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e0:	bf00      	nop
    return;
 80059e2:	e173      	b.n	8005ccc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	f040 814f 	bne.w	8005c8c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8148 	beq.w	8005c8c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 8141 	beq.w	8005c8c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	60bb      	str	r3, [r7, #8]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 80b6 	beq.w	8005b9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8145 	beq.w	8005cd0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	f080 813e 	bcs.w	8005cd0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b20      	cmp	r3, #32
 8005a64:	f000 8088 	beq.w	8005b78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a76:	e853 3f00 	ldrex	r3, [r3]
 8005a7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a94:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005aa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1d9      	bne.n	8005a68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3314      	adds	r3, #20
 8005aba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005abe:	e853 3f00 	ldrex	r3, [r3]
 8005ac2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ac4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ac6:	f023 0301 	bic.w	r3, r3, #1
 8005aca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3314      	adds	r3, #20
 8005ad4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ad8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005adc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ae0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005ae4:	e841 2300 	strex	r3, r2, [r1]
 8005ae8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005aea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1e1      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3314      	adds	r3, #20
 8005af6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3314      	adds	r3, #20
 8005b10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b14:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e3      	bne.n	8005af0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	330c      	adds	r3, #12
 8005b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b48:	f023 0310 	bic.w	r3, r3, #16
 8005b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b5c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e3      	bne.n	8005b36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fd f873 	bl	8002c5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8ad 	bl	8005cee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b94:	e09c      	b.n	8005cd0 <HAL_UART_IRQHandler+0x518>
 8005b96:	bf00      	nop
 8005b98:	08005e3b 	.word	0x08005e3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 808e 	beq.w	8005cd4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8089 	beq.w	8005cd4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005be6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005be8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e3      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3314      	adds	r3, #20
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	623b      	str	r3, [r7, #32]
   return(result);
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e3      	bne.n	8005bfa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0310 	bic.w	r3, r3, #16
 8005c56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c64:	61fa      	str	r2, [r7, #28]
 8005c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	617b      	str	r3, [r7, #20]
   return(result);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e3      	bne.n	8005c40 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f832 	bl	8005cee <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c8a:	e023      	b.n	8005cd4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <HAL_UART_IRQHandler+0x4f4>
 8005c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8dc 	bl	8005e62 <UART_Transmit_IT>
    return;
 8005caa:	e014      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00e      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
 8005cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f91b 	bl	8005f00 <UART_EndTransmit_IT>
    return;
 8005cca:	e004      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005ccc:	bf00      	nop
 8005cce:	e002      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005cd0:	bf00      	nop
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005cd4:	bf00      	nop
  }
}
 8005cd6:	37e8      	adds	r7, #232	@ 0xe8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bc80      	pop	{r7}
 8005d02:	4770      	bx	lr

08005d04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	88fa      	ldrh	r2, [r7, #6]
 8005d22:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2222      	movs	r2, #34	@ 0x22
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d007      	beq.n	8005d4a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d48:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695a      	ldr	r2, [r3, #20]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0220 	orr.w	r2, r2, #32
 8005d68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr

08005d76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b095      	sub	sp, #84	@ 0x54
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	330c      	adds	r3, #12
 8005d84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	330c      	adds	r3, #12
 8005d9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005da4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e5      	bne.n	8005d7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3314      	adds	r3, #20
 8005db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	f023 0301 	bic.w	r3, r3, #1
 8005dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3314      	adds	r3, #20
 8005dd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005dd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e5      	bne.n	8005db2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d119      	bne.n	8005e22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	f023 0310 	bic.w	r3, r3, #16
 8005e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	330c      	adds	r3, #12
 8005e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e0e:	61ba      	str	r2, [r7, #24]
 8005e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6979      	ldr	r1, [r7, #20]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e5      	bne.n	8005dee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e30:	bf00      	nop
 8005e32:	3754      	adds	r7, #84	@ 0x54
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bc80      	pop	{r7}
 8005e38:	4770      	bx	lr

08005e3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff ff41 	bl	8005cdc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b21      	cmp	r3, #33	@ 0x21
 8005e74:	d13e      	bne.n	8005ef4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e7e:	d114      	bne.n	8005eaa <UART_Transmit_IT+0x48>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d110      	bne.n	8005eaa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	881b      	ldrh	r3, [r3, #0]
 8005e92:	461a      	mov	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	1c9a      	adds	r2, r3, #2
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	621a      	str	r2, [r3, #32]
 8005ea8:	e008      	b.n	8005ebc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6211      	str	r1, [r2, #32]
 8005eb4:	781a      	ldrb	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10f      	bne.n	8005ef0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ede:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e000      	b.n	8005ef6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
  }
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3714      	adds	r7, #20
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bc80      	pop	{r7}
 8005efe:	4770      	bx	lr

08005f00 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68da      	ldr	r2, [r3, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f16:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7fb f931 	bl	8001188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08c      	sub	sp, #48	@ 0x30
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b22      	cmp	r3, #34	@ 0x22
 8005f42:	f040 80ae 	bne.w	80060a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4e:	d117      	bne.n	8005f80 <UART_Receive_IT+0x50>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d113      	bne.n	8005f80 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f60:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	1c9a      	adds	r2, r3, #2
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f7e:	e026      	b.n	8005fce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f92:	d007      	beq.n	8005fa4 <UART_Receive_IT+0x74>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <UART_Receive_IT+0x82>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d106      	bne.n	8005fb2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	e008      	b.n	8005fc4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d15d      	bne.n	800609e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0220 	bic.w	r2, r2, #32
 8005ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0201 	bic.w	r2, r2, #1
 8006010:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	2b01      	cmp	r3, #1
 8006026:	d135      	bne.n	8006094 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	330c      	adds	r3, #12
 8006034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	e853 3f00 	ldrex	r3, [r3]
 800603c:	613b      	str	r3, [r7, #16]
   return(result);
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f023 0310 	bic.w	r3, r3, #16
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	330c      	adds	r3, #12
 800604c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604e:	623a      	str	r2, [r7, #32]
 8006050:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006052:	69f9      	ldr	r1, [r7, #28]
 8006054:	6a3a      	ldr	r2, [r7, #32]
 8006056:	e841 2300 	strex	r3, r2, [r1]
 800605a:	61bb      	str	r3, [r7, #24]
   return(result);
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1e5      	bne.n	800602e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d10a      	bne.n	8006086 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff fe2e 	bl	8005cee <HAL_UARTEx_RxEventCallback>
 8006092:	e002      	b.n	800609a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7fb f861 	bl	800115c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	e002      	b.n	80060a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e000      	b.n	80060a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3730      	adds	r7, #48	@ 0x30
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80060e6:	f023 030c 	bic.w	r3, r3, #12
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	430b      	orrs	r3, r1
 80060f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a2c      	ldr	r2, [pc, #176]	@ (80061c0 <UART_SetConfig+0x114>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d103      	bne.n	800611c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006114:	f7fe fc54 	bl	80049c0 <HAL_RCC_GetPCLK2Freq>
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	e002      	b.n	8006122 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800611c:	f7fe fc3c 	bl	8004998 <HAL_RCC_GetPCLK1Freq>
 8006120:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009a      	lsls	r2, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	4a22      	ldr	r2, [pc, #136]	@ (80061c4 <UART_SetConfig+0x118>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	0119      	lsls	r1, r3, #4
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009a      	lsls	r2, r3, #2
 800614c:	441a      	add	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	fbb2 f2f3 	udiv	r2, r2, r3
 8006158:	4b1a      	ldr	r3, [pc, #104]	@ (80061c4 <UART_SetConfig+0x118>)
 800615a:	fba3 0302 	umull	r0, r3, r3, r2
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2064      	movs	r0, #100	@ 0x64
 8006162:	fb00 f303 	mul.w	r3, r0, r3
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	3332      	adds	r3, #50	@ 0x32
 800616c:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <UART_SetConfig+0x118>)
 800616e:	fba2 2303 	umull	r2, r3, r2, r3
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006178:	4419      	add	r1, r3
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009a      	lsls	r2, r3, #2
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006190:	4b0c      	ldr	r3, [pc, #48]	@ (80061c4 <UART_SetConfig+0x118>)
 8006192:	fba3 0302 	umull	r0, r3, r3, r2
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2064      	movs	r0, #100	@ 0x64
 800619a:	fb00 f303 	mul.w	r3, r0, r3
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	3332      	adds	r3, #50	@ 0x32
 80061a4:	4a07      	ldr	r2, [pc, #28]	@ (80061c4 <UART_SetConfig+0x118>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	f003 020f 	and.w	r2, r3, #15
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	440a      	add	r2, r1
 80061b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40013800 	.word	0x40013800
 80061c4:	51eb851f 	.word	0x51eb851f

080061c8 <sniprintf>:
 80061c8:	b40c      	push	{r2, r3}
 80061ca:	b530      	push	{r4, r5, lr}
 80061cc:	4b17      	ldr	r3, [pc, #92]	@ (800622c <sniprintf+0x64>)
 80061ce:	1e0c      	subs	r4, r1, #0
 80061d0:	681d      	ldr	r5, [r3, #0]
 80061d2:	b09d      	sub	sp, #116	@ 0x74
 80061d4:	da08      	bge.n	80061e8 <sniprintf+0x20>
 80061d6:	238b      	movs	r3, #139	@ 0x8b
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	602b      	str	r3, [r5, #0]
 80061de:	b01d      	add	sp, #116	@ 0x74
 80061e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061e4:	b002      	add	sp, #8
 80061e6:	4770      	bx	lr
 80061e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80061ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061f0:	bf0c      	ite	eq
 80061f2:	4623      	moveq	r3, r4
 80061f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	9307      	str	r3, [sp, #28]
 80061fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006200:	9002      	str	r0, [sp, #8]
 8006202:	9006      	str	r0, [sp, #24]
 8006204:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006208:	4628      	mov	r0, r5
 800620a:	ab21      	add	r3, sp, #132	@ 0x84
 800620c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800620e:	a902      	add	r1, sp, #8
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	f000 f993 	bl	800653c <_svfiprintf_r>
 8006216:	1c43      	adds	r3, r0, #1
 8006218:	bfbc      	itt	lt
 800621a:	238b      	movlt	r3, #139	@ 0x8b
 800621c:	602b      	strlt	r3, [r5, #0]
 800621e:	2c00      	cmp	r4, #0
 8006220:	d0dd      	beq.n	80061de <sniprintf+0x16>
 8006222:	2200      	movs	r2, #0
 8006224:	9b02      	ldr	r3, [sp, #8]
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	e7d9      	b.n	80061de <sniprintf+0x16>
 800622a:	bf00      	nop
 800622c:	20000028 	.word	0x20000028

08006230 <memset>:
 8006230:	4603      	mov	r3, r0
 8006232:	4402      	add	r2, r0
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <memset+0xa>
 8006238:	4770      	bx	lr
 800623a:	f803 1b01 	strb.w	r1, [r3], #1
 800623e:	e7f9      	b.n	8006234 <memset+0x4>

08006240 <__errno>:
 8006240:	4b01      	ldr	r3, [pc, #4]	@ (8006248 <__errno+0x8>)
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000028 	.word	0x20000028

0800624c <__libc_init_array>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	2600      	movs	r6, #0
 8006250:	4d0c      	ldr	r5, [pc, #48]	@ (8006284 <__libc_init_array+0x38>)
 8006252:	4c0d      	ldr	r4, [pc, #52]	@ (8006288 <__libc_init_array+0x3c>)
 8006254:	1b64      	subs	r4, r4, r5
 8006256:	10a4      	asrs	r4, r4, #2
 8006258:	42a6      	cmp	r6, r4
 800625a:	d109      	bne.n	8006270 <__libc_init_array+0x24>
 800625c:	f000 ffdc 	bl	8007218 <_init>
 8006260:	2600      	movs	r6, #0
 8006262:	4d0a      	ldr	r5, [pc, #40]	@ (800628c <__libc_init_array+0x40>)
 8006264:	4c0a      	ldr	r4, [pc, #40]	@ (8006290 <__libc_init_array+0x44>)
 8006266:	1b64      	subs	r4, r4, r5
 8006268:	10a4      	asrs	r4, r4, #2
 800626a:	42a6      	cmp	r6, r4
 800626c:	d105      	bne.n	800627a <__libc_init_array+0x2e>
 800626e:	bd70      	pop	{r4, r5, r6, pc}
 8006270:	f855 3b04 	ldr.w	r3, [r5], #4
 8006274:	4798      	blx	r3
 8006276:	3601      	adds	r6, #1
 8006278:	e7ee      	b.n	8006258 <__libc_init_array+0xc>
 800627a:	f855 3b04 	ldr.w	r3, [r5], #4
 800627e:	4798      	blx	r3
 8006280:	3601      	adds	r6, #1
 8006282:	e7f2      	b.n	800626a <__libc_init_array+0x1e>
 8006284:	08007330 	.word	0x08007330
 8006288:	08007330 	.word	0x08007330
 800628c:	08007330 	.word	0x08007330
 8006290:	08007334 	.word	0x08007334

08006294 <__retarget_lock_acquire_recursive>:
 8006294:	4770      	bx	lr

08006296 <__retarget_lock_release_recursive>:
 8006296:	4770      	bx	lr

08006298 <_free_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4605      	mov	r5, r0
 800629c:	2900      	cmp	r1, #0
 800629e:	d040      	beq.n	8006322 <_free_r+0x8a>
 80062a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a4:	1f0c      	subs	r4, r1, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	bfb8      	it	lt
 80062aa:	18e4      	addlt	r4, r4, r3
 80062ac:	f000 f8de 	bl	800646c <__malloc_lock>
 80062b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006324 <_free_r+0x8c>)
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	b933      	cbnz	r3, 80062c4 <_free_r+0x2c>
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	6014      	str	r4, [r2, #0]
 80062ba:	4628      	mov	r0, r5
 80062bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062c0:	f000 b8da 	b.w	8006478 <__malloc_unlock>
 80062c4:	42a3      	cmp	r3, r4
 80062c6:	d908      	bls.n	80062da <_free_r+0x42>
 80062c8:	6820      	ldr	r0, [r4, #0]
 80062ca:	1821      	adds	r1, r4, r0
 80062cc:	428b      	cmp	r3, r1
 80062ce:	bf01      	itttt	eq
 80062d0:	6819      	ldreq	r1, [r3, #0]
 80062d2:	685b      	ldreq	r3, [r3, #4]
 80062d4:	1809      	addeq	r1, r1, r0
 80062d6:	6021      	streq	r1, [r4, #0]
 80062d8:	e7ed      	b.n	80062b6 <_free_r+0x1e>
 80062da:	461a      	mov	r2, r3
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b10b      	cbz	r3, 80062e4 <_free_r+0x4c>
 80062e0:	42a3      	cmp	r3, r4
 80062e2:	d9fa      	bls.n	80062da <_free_r+0x42>
 80062e4:	6811      	ldr	r1, [r2, #0]
 80062e6:	1850      	adds	r0, r2, r1
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	d10b      	bne.n	8006304 <_free_r+0x6c>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	4401      	add	r1, r0
 80062f0:	1850      	adds	r0, r2, r1
 80062f2:	4283      	cmp	r3, r0
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	d1e0      	bne.n	80062ba <_free_r+0x22>
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4408      	add	r0, r1
 80062fe:	6010      	str	r0, [r2, #0]
 8006300:	6053      	str	r3, [r2, #4]
 8006302:	e7da      	b.n	80062ba <_free_r+0x22>
 8006304:	d902      	bls.n	800630c <_free_r+0x74>
 8006306:	230c      	movs	r3, #12
 8006308:	602b      	str	r3, [r5, #0]
 800630a:	e7d6      	b.n	80062ba <_free_r+0x22>
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	1821      	adds	r1, r4, r0
 8006310:	428b      	cmp	r3, r1
 8006312:	bf01      	itttt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	1809      	addeq	r1, r1, r0
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	6063      	str	r3, [r4, #4]
 800631e:	6054      	str	r4, [r2, #4]
 8006320:	e7cb      	b.n	80062ba <_free_r+0x22>
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	20000414 	.word	0x20000414

08006328 <sbrk_aligned>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	4e0f      	ldr	r6, [pc, #60]	@ (8006368 <sbrk_aligned+0x40>)
 800632c:	460c      	mov	r4, r1
 800632e:	6831      	ldr	r1, [r6, #0]
 8006330:	4605      	mov	r5, r0
 8006332:	b911      	cbnz	r1, 800633a <sbrk_aligned+0x12>
 8006334:	f000 fbaa 	bl	8006a8c <_sbrk_r>
 8006338:	6030      	str	r0, [r6, #0]
 800633a:	4621      	mov	r1, r4
 800633c:	4628      	mov	r0, r5
 800633e:	f000 fba5 	bl	8006a8c <_sbrk_r>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d103      	bne.n	800634e <sbrk_aligned+0x26>
 8006346:	f04f 34ff 	mov.w	r4, #4294967295
 800634a:	4620      	mov	r0, r4
 800634c:	bd70      	pop	{r4, r5, r6, pc}
 800634e:	1cc4      	adds	r4, r0, #3
 8006350:	f024 0403 	bic.w	r4, r4, #3
 8006354:	42a0      	cmp	r0, r4
 8006356:	d0f8      	beq.n	800634a <sbrk_aligned+0x22>
 8006358:	1a21      	subs	r1, r4, r0
 800635a:	4628      	mov	r0, r5
 800635c:	f000 fb96 	bl	8006a8c <_sbrk_r>
 8006360:	3001      	adds	r0, #1
 8006362:	d1f2      	bne.n	800634a <sbrk_aligned+0x22>
 8006364:	e7ef      	b.n	8006346 <sbrk_aligned+0x1e>
 8006366:	bf00      	nop
 8006368:	20000410 	.word	0x20000410

0800636c <_malloc_r>:
 800636c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006370:	1ccd      	adds	r5, r1, #3
 8006372:	f025 0503 	bic.w	r5, r5, #3
 8006376:	3508      	adds	r5, #8
 8006378:	2d0c      	cmp	r5, #12
 800637a:	bf38      	it	cc
 800637c:	250c      	movcc	r5, #12
 800637e:	2d00      	cmp	r5, #0
 8006380:	4606      	mov	r6, r0
 8006382:	db01      	blt.n	8006388 <_malloc_r+0x1c>
 8006384:	42a9      	cmp	r1, r5
 8006386:	d904      	bls.n	8006392 <_malloc_r+0x26>
 8006388:	230c      	movs	r3, #12
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	2000      	movs	r0, #0
 800638e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006392:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006468 <_malloc_r+0xfc>
 8006396:	f000 f869 	bl	800646c <__malloc_lock>
 800639a:	f8d8 3000 	ldr.w	r3, [r8]
 800639e:	461c      	mov	r4, r3
 80063a0:	bb44      	cbnz	r4, 80063f4 <_malloc_r+0x88>
 80063a2:	4629      	mov	r1, r5
 80063a4:	4630      	mov	r0, r6
 80063a6:	f7ff ffbf 	bl	8006328 <sbrk_aligned>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	4604      	mov	r4, r0
 80063ae:	d158      	bne.n	8006462 <_malloc_r+0xf6>
 80063b0:	f8d8 4000 	ldr.w	r4, [r8]
 80063b4:	4627      	mov	r7, r4
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d143      	bne.n	8006442 <_malloc_r+0xd6>
 80063ba:	2c00      	cmp	r4, #0
 80063bc:	d04b      	beq.n	8006456 <_malloc_r+0xea>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	4639      	mov	r1, r7
 80063c2:	4630      	mov	r0, r6
 80063c4:	eb04 0903 	add.w	r9, r4, r3
 80063c8:	f000 fb60 	bl	8006a8c <_sbrk_r>
 80063cc:	4581      	cmp	r9, r0
 80063ce:	d142      	bne.n	8006456 <_malloc_r+0xea>
 80063d0:	6821      	ldr	r1, [r4, #0]
 80063d2:	4630      	mov	r0, r6
 80063d4:	1a6d      	subs	r5, r5, r1
 80063d6:	4629      	mov	r1, r5
 80063d8:	f7ff ffa6 	bl	8006328 <sbrk_aligned>
 80063dc:	3001      	adds	r0, #1
 80063de:	d03a      	beq.n	8006456 <_malloc_r+0xea>
 80063e0:	6823      	ldr	r3, [r4, #0]
 80063e2:	442b      	add	r3, r5
 80063e4:	6023      	str	r3, [r4, #0]
 80063e6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	bb62      	cbnz	r2, 8006448 <_malloc_r+0xdc>
 80063ee:	f8c8 7000 	str.w	r7, [r8]
 80063f2:	e00f      	b.n	8006414 <_malloc_r+0xa8>
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	1b52      	subs	r2, r2, r5
 80063f8:	d420      	bmi.n	800643c <_malloc_r+0xd0>
 80063fa:	2a0b      	cmp	r2, #11
 80063fc:	d917      	bls.n	800642e <_malloc_r+0xc2>
 80063fe:	1961      	adds	r1, r4, r5
 8006400:	42a3      	cmp	r3, r4
 8006402:	6025      	str	r5, [r4, #0]
 8006404:	bf18      	it	ne
 8006406:	6059      	strne	r1, [r3, #4]
 8006408:	6863      	ldr	r3, [r4, #4]
 800640a:	bf08      	it	eq
 800640c:	f8c8 1000 	streq.w	r1, [r8]
 8006410:	5162      	str	r2, [r4, r5]
 8006412:	604b      	str	r3, [r1, #4]
 8006414:	4630      	mov	r0, r6
 8006416:	f000 f82f 	bl	8006478 <__malloc_unlock>
 800641a:	f104 000b 	add.w	r0, r4, #11
 800641e:	1d23      	adds	r3, r4, #4
 8006420:	f020 0007 	bic.w	r0, r0, #7
 8006424:	1ac2      	subs	r2, r0, r3
 8006426:	bf1c      	itt	ne
 8006428:	1a1b      	subne	r3, r3, r0
 800642a:	50a3      	strne	r3, [r4, r2]
 800642c:	e7af      	b.n	800638e <_malloc_r+0x22>
 800642e:	6862      	ldr	r2, [r4, #4]
 8006430:	42a3      	cmp	r3, r4
 8006432:	bf0c      	ite	eq
 8006434:	f8c8 2000 	streq.w	r2, [r8]
 8006438:	605a      	strne	r2, [r3, #4]
 800643a:	e7eb      	b.n	8006414 <_malloc_r+0xa8>
 800643c:	4623      	mov	r3, r4
 800643e:	6864      	ldr	r4, [r4, #4]
 8006440:	e7ae      	b.n	80063a0 <_malloc_r+0x34>
 8006442:	463c      	mov	r4, r7
 8006444:	687f      	ldr	r7, [r7, #4]
 8006446:	e7b6      	b.n	80063b6 <_malloc_r+0x4a>
 8006448:	461a      	mov	r2, r3
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	42a3      	cmp	r3, r4
 800644e:	d1fb      	bne.n	8006448 <_malloc_r+0xdc>
 8006450:	2300      	movs	r3, #0
 8006452:	6053      	str	r3, [r2, #4]
 8006454:	e7de      	b.n	8006414 <_malloc_r+0xa8>
 8006456:	230c      	movs	r3, #12
 8006458:	4630      	mov	r0, r6
 800645a:	6033      	str	r3, [r6, #0]
 800645c:	f000 f80c 	bl	8006478 <__malloc_unlock>
 8006460:	e794      	b.n	800638c <_malloc_r+0x20>
 8006462:	6005      	str	r5, [r0, #0]
 8006464:	e7d6      	b.n	8006414 <_malloc_r+0xa8>
 8006466:	bf00      	nop
 8006468:	20000414 	.word	0x20000414

0800646c <__malloc_lock>:
 800646c:	4801      	ldr	r0, [pc, #4]	@ (8006474 <__malloc_lock+0x8>)
 800646e:	f7ff bf11 	b.w	8006294 <__retarget_lock_acquire_recursive>
 8006472:	bf00      	nop
 8006474:	2000040c 	.word	0x2000040c

08006478 <__malloc_unlock>:
 8006478:	4801      	ldr	r0, [pc, #4]	@ (8006480 <__malloc_unlock+0x8>)
 800647a:	f7ff bf0c 	b.w	8006296 <__retarget_lock_release_recursive>
 800647e:	bf00      	nop
 8006480:	2000040c 	.word	0x2000040c

08006484 <__ssputs_r>:
 8006484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	461f      	mov	r7, r3
 800648a:	688e      	ldr	r6, [r1, #8]
 800648c:	4682      	mov	sl, r0
 800648e:	42be      	cmp	r6, r7
 8006490:	460c      	mov	r4, r1
 8006492:	4690      	mov	r8, r2
 8006494:	680b      	ldr	r3, [r1, #0]
 8006496:	d82d      	bhi.n	80064f4 <__ssputs_r+0x70>
 8006498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800649c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064a0:	d026      	beq.n	80064f0 <__ssputs_r+0x6c>
 80064a2:	6965      	ldr	r5, [r4, #20]
 80064a4:	6909      	ldr	r1, [r1, #16]
 80064a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064aa:	eba3 0901 	sub.w	r9, r3, r1
 80064ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064b2:	1c7b      	adds	r3, r7, #1
 80064b4:	444b      	add	r3, r9
 80064b6:	106d      	asrs	r5, r5, #1
 80064b8:	429d      	cmp	r5, r3
 80064ba:	bf38      	it	cc
 80064bc:	461d      	movcc	r5, r3
 80064be:	0553      	lsls	r3, r2, #21
 80064c0:	d527      	bpl.n	8006512 <__ssputs_r+0x8e>
 80064c2:	4629      	mov	r1, r5
 80064c4:	f7ff ff52 	bl	800636c <_malloc_r>
 80064c8:	4606      	mov	r6, r0
 80064ca:	b360      	cbz	r0, 8006526 <__ssputs_r+0xa2>
 80064cc:	464a      	mov	r2, r9
 80064ce:	6921      	ldr	r1, [r4, #16]
 80064d0:	f000 fafa 	bl	8006ac8 <memcpy>
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80064da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	6126      	str	r6, [r4, #16]
 80064e2:	444e      	add	r6, r9
 80064e4:	6026      	str	r6, [r4, #0]
 80064e6:	463e      	mov	r6, r7
 80064e8:	6165      	str	r5, [r4, #20]
 80064ea:	eba5 0509 	sub.w	r5, r5, r9
 80064ee:	60a5      	str	r5, [r4, #8]
 80064f0:	42be      	cmp	r6, r7
 80064f2:	d900      	bls.n	80064f6 <__ssputs_r+0x72>
 80064f4:	463e      	mov	r6, r7
 80064f6:	4632      	mov	r2, r6
 80064f8:	4641      	mov	r1, r8
 80064fa:	6820      	ldr	r0, [r4, #0]
 80064fc:	f000 faac 	bl	8006a58 <memmove>
 8006500:	2000      	movs	r0, #0
 8006502:	68a3      	ldr	r3, [r4, #8]
 8006504:	1b9b      	subs	r3, r3, r6
 8006506:	60a3      	str	r3, [r4, #8]
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	4433      	add	r3, r6
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006512:	462a      	mov	r2, r5
 8006514:	f000 fae6 	bl	8006ae4 <_realloc_r>
 8006518:	4606      	mov	r6, r0
 800651a:	2800      	cmp	r0, #0
 800651c:	d1e0      	bne.n	80064e0 <__ssputs_r+0x5c>
 800651e:	4650      	mov	r0, sl
 8006520:	6921      	ldr	r1, [r4, #16]
 8006522:	f7ff feb9 	bl	8006298 <_free_r>
 8006526:	230c      	movs	r3, #12
 8006528:	f8ca 3000 	str.w	r3, [sl]
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	e7e9      	b.n	800650e <__ssputs_r+0x8a>
	...

0800653c <_svfiprintf_r>:
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	4698      	mov	r8, r3
 8006542:	898b      	ldrh	r3, [r1, #12]
 8006544:	4607      	mov	r7, r0
 8006546:	061b      	lsls	r3, r3, #24
 8006548:	460d      	mov	r5, r1
 800654a:	4614      	mov	r4, r2
 800654c:	b09d      	sub	sp, #116	@ 0x74
 800654e:	d510      	bpl.n	8006572 <_svfiprintf_r+0x36>
 8006550:	690b      	ldr	r3, [r1, #16]
 8006552:	b973      	cbnz	r3, 8006572 <_svfiprintf_r+0x36>
 8006554:	2140      	movs	r1, #64	@ 0x40
 8006556:	f7ff ff09 	bl	800636c <_malloc_r>
 800655a:	6028      	str	r0, [r5, #0]
 800655c:	6128      	str	r0, [r5, #16]
 800655e:	b930      	cbnz	r0, 800656e <_svfiprintf_r+0x32>
 8006560:	230c      	movs	r3, #12
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	b01d      	add	sp, #116	@ 0x74
 800656a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656e:	2340      	movs	r3, #64	@ 0x40
 8006570:	616b      	str	r3, [r5, #20]
 8006572:	2300      	movs	r3, #0
 8006574:	9309      	str	r3, [sp, #36]	@ 0x24
 8006576:	2320      	movs	r3, #32
 8006578:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800657c:	2330      	movs	r3, #48	@ 0x30
 800657e:	f04f 0901 	mov.w	r9, #1
 8006582:	f8cd 800c 	str.w	r8, [sp, #12]
 8006586:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006720 <_svfiprintf_r+0x1e4>
 800658a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800658e:	4623      	mov	r3, r4
 8006590:	469a      	mov	sl, r3
 8006592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006596:	b10a      	cbz	r2, 800659c <_svfiprintf_r+0x60>
 8006598:	2a25      	cmp	r2, #37	@ 0x25
 800659a:	d1f9      	bne.n	8006590 <_svfiprintf_r+0x54>
 800659c:	ebba 0b04 	subs.w	fp, sl, r4
 80065a0:	d00b      	beq.n	80065ba <_svfiprintf_r+0x7e>
 80065a2:	465b      	mov	r3, fp
 80065a4:	4622      	mov	r2, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	4638      	mov	r0, r7
 80065aa:	f7ff ff6b 	bl	8006484 <__ssputs_r>
 80065ae:	3001      	adds	r0, #1
 80065b0:	f000 80a7 	beq.w	8006702 <_svfiprintf_r+0x1c6>
 80065b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065b6:	445a      	add	r2, fp
 80065b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80065ba:	f89a 3000 	ldrb.w	r3, [sl]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 809f 	beq.w	8006702 <_svfiprintf_r+0x1c6>
 80065c4:	2300      	movs	r3, #0
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ce:	f10a 0a01 	add.w	sl, sl, #1
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	9307      	str	r3, [sp, #28]
 80065d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80065da:	931a      	str	r3, [sp, #104]	@ 0x68
 80065dc:	4654      	mov	r4, sl
 80065de:	2205      	movs	r2, #5
 80065e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e4:	484e      	ldr	r0, [pc, #312]	@ (8006720 <_svfiprintf_r+0x1e4>)
 80065e6:	f000 fa61 	bl	8006aac <memchr>
 80065ea:	9a04      	ldr	r2, [sp, #16]
 80065ec:	b9d8      	cbnz	r0, 8006626 <_svfiprintf_r+0xea>
 80065ee:	06d0      	lsls	r0, r2, #27
 80065f0:	bf44      	itt	mi
 80065f2:	2320      	movmi	r3, #32
 80065f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80065f8:	0711      	lsls	r1, r2, #28
 80065fa:	bf44      	itt	mi
 80065fc:	232b      	movmi	r3, #43	@ 0x2b
 80065fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006602:	f89a 3000 	ldrb.w	r3, [sl]
 8006606:	2b2a      	cmp	r3, #42	@ 0x2a
 8006608:	d015      	beq.n	8006636 <_svfiprintf_r+0xfa>
 800660a:	4654      	mov	r4, sl
 800660c:	2000      	movs	r0, #0
 800660e:	f04f 0c0a 	mov.w	ip, #10
 8006612:	9a07      	ldr	r2, [sp, #28]
 8006614:	4621      	mov	r1, r4
 8006616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800661a:	3b30      	subs	r3, #48	@ 0x30
 800661c:	2b09      	cmp	r3, #9
 800661e:	d94b      	bls.n	80066b8 <_svfiprintf_r+0x17c>
 8006620:	b1b0      	cbz	r0, 8006650 <_svfiprintf_r+0x114>
 8006622:	9207      	str	r2, [sp, #28]
 8006624:	e014      	b.n	8006650 <_svfiprintf_r+0x114>
 8006626:	eba0 0308 	sub.w	r3, r0, r8
 800662a:	fa09 f303 	lsl.w	r3, r9, r3
 800662e:	4313      	orrs	r3, r2
 8006630:	46a2      	mov	sl, r4
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	e7d2      	b.n	80065dc <_svfiprintf_r+0xa0>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	1d19      	adds	r1, r3, #4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	9103      	str	r1, [sp, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfbb      	ittet	lt
 8006642:	425b      	neglt	r3, r3
 8006644:	f042 0202 	orrlt.w	r2, r2, #2
 8006648:	9307      	strge	r3, [sp, #28]
 800664a:	9307      	strlt	r3, [sp, #28]
 800664c:	bfb8      	it	lt
 800664e:	9204      	strlt	r2, [sp, #16]
 8006650:	7823      	ldrb	r3, [r4, #0]
 8006652:	2b2e      	cmp	r3, #46	@ 0x2e
 8006654:	d10a      	bne.n	800666c <_svfiprintf_r+0x130>
 8006656:	7863      	ldrb	r3, [r4, #1]
 8006658:	2b2a      	cmp	r3, #42	@ 0x2a
 800665a:	d132      	bne.n	80066c2 <_svfiprintf_r+0x186>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	3402      	adds	r4, #2
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	9203      	str	r2, [sp, #12]
 8006666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800666a:	9305      	str	r3, [sp, #20]
 800666c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006724 <_svfiprintf_r+0x1e8>
 8006670:	2203      	movs	r2, #3
 8006672:	4650      	mov	r0, sl
 8006674:	7821      	ldrb	r1, [r4, #0]
 8006676:	f000 fa19 	bl	8006aac <memchr>
 800667a:	b138      	cbz	r0, 800668c <_svfiprintf_r+0x150>
 800667c:	2240      	movs	r2, #64	@ 0x40
 800667e:	9b04      	ldr	r3, [sp, #16]
 8006680:	eba0 000a 	sub.w	r0, r0, sl
 8006684:	4082      	lsls	r2, r0
 8006686:	4313      	orrs	r3, r2
 8006688:	3401      	adds	r4, #1
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006690:	2206      	movs	r2, #6
 8006692:	4825      	ldr	r0, [pc, #148]	@ (8006728 <_svfiprintf_r+0x1ec>)
 8006694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006698:	f000 fa08 	bl	8006aac <memchr>
 800669c:	2800      	cmp	r0, #0
 800669e:	d036      	beq.n	800670e <_svfiprintf_r+0x1d2>
 80066a0:	4b22      	ldr	r3, [pc, #136]	@ (800672c <_svfiprintf_r+0x1f0>)
 80066a2:	bb1b      	cbnz	r3, 80066ec <_svfiprintf_r+0x1b0>
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	3307      	adds	r3, #7
 80066a8:	f023 0307 	bic.w	r3, r3, #7
 80066ac:	3308      	adds	r3, #8
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b2:	4433      	add	r3, r6
 80066b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b6:	e76a      	b.n	800658e <_svfiprintf_r+0x52>
 80066b8:	460c      	mov	r4, r1
 80066ba:	2001      	movs	r0, #1
 80066bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80066c0:	e7a8      	b.n	8006614 <_svfiprintf_r+0xd8>
 80066c2:	2300      	movs	r3, #0
 80066c4:	f04f 0c0a 	mov.w	ip, #10
 80066c8:	4619      	mov	r1, r3
 80066ca:	3401      	adds	r4, #1
 80066cc:	9305      	str	r3, [sp, #20]
 80066ce:	4620      	mov	r0, r4
 80066d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066d4:	3a30      	subs	r2, #48	@ 0x30
 80066d6:	2a09      	cmp	r2, #9
 80066d8:	d903      	bls.n	80066e2 <_svfiprintf_r+0x1a6>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0c6      	beq.n	800666c <_svfiprintf_r+0x130>
 80066de:	9105      	str	r1, [sp, #20]
 80066e0:	e7c4      	b.n	800666c <_svfiprintf_r+0x130>
 80066e2:	4604      	mov	r4, r0
 80066e4:	2301      	movs	r3, #1
 80066e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80066ea:	e7f0      	b.n	80066ce <_svfiprintf_r+0x192>
 80066ec:	ab03      	add	r3, sp, #12
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	462a      	mov	r2, r5
 80066f2:	4638      	mov	r0, r7
 80066f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006730 <_svfiprintf_r+0x1f4>)
 80066f6:	a904      	add	r1, sp, #16
 80066f8:	f3af 8000 	nop.w
 80066fc:	1c42      	adds	r2, r0, #1
 80066fe:	4606      	mov	r6, r0
 8006700:	d1d6      	bne.n	80066b0 <_svfiprintf_r+0x174>
 8006702:	89ab      	ldrh	r3, [r5, #12]
 8006704:	065b      	lsls	r3, r3, #25
 8006706:	f53f af2d 	bmi.w	8006564 <_svfiprintf_r+0x28>
 800670a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800670c:	e72c      	b.n	8006568 <_svfiprintf_r+0x2c>
 800670e:	ab03      	add	r3, sp, #12
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	462a      	mov	r2, r5
 8006714:	4638      	mov	r0, r7
 8006716:	4b06      	ldr	r3, [pc, #24]	@ (8006730 <_svfiprintf_r+0x1f4>)
 8006718:	a904      	add	r1, sp, #16
 800671a:	f000 f87d 	bl	8006818 <_printf_i>
 800671e:	e7ed      	b.n	80066fc <_svfiprintf_r+0x1c0>
 8006720:	0800727e 	.word	0x0800727e
 8006724:	08007284 	.word	0x08007284
 8006728:	08007288 	.word	0x08007288
 800672c:	00000000 	.word	0x00000000
 8006730:	08006485 	.word	0x08006485

08006734 <_printf_common>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	4616      	mov	r6, r2
 800673a:	4698      	mov	r8, r3
 800673c:	688a      	ldr	r2, [r1, #8]
 800673e:	690b      	ldr	r3, [r1, #16]
 8006740:	4607      	mov	r7, r0
 8006742:	4293      	cmp	r3, r2
 8006744:	bfb8      	it	lt
 8006746:	4613      	movlt	r3, r2
 8006748:	6033      	str	r3, [r6, #0]
 800674a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800674e:	460c      	mov	r4, r1
 8006750:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006754:	b10a      	cbz	r2, 800675a <_printf_common+0x26>
 8006756:	3301      	adds	r3, #1
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	0699      	lsls	r1, r3, #26
 800675e:	bf42      	ittt	mi
 8006760:	6833      	ldrmi	r3, [r6, #0]
 8006762:	3302      	addmi	r3, #2
 8006764:	6033      	strmi	r3, [r6, #0]
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	f015 0506 	ands.w	r5, r5, #6
 800676c:	d106      	bne.n	800677c <_printf_common+0x48>
 800676e:	f104 0a19 	add.w	sl, r4, #25
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	6832      	ldr	r2, [r6, #0]
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	42ab      	cmp	r3, r5
 800677a:	dc2b      	bgt.n	80067d4 <_printf_common+0xa0>
 800677c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006780:	6822      	ldr	r2, [r4, #0]
 8006782:	3b00      	subs	r3, #0
 8006784:	bf18      	it	ne
 8006786:	2301      	movne	r3, #1
 8006788:	0692      	lsls	r2, r2, #26
 800678a:	d430      	bmi.n	80067ee <_printf_common+0xba>
 800678c:	4641      	mov	r1, r8
 800678e:	4638      	mov	r0, r7
 8006790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006794:	47c8      	blx	r9
 8006796:	3001      	adds	r0, #1
 8006798:	d023      	beq.n	80067e2 <_printf_common+0xae>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	6922      	ldr	r2, [r4, #16]
 800679e:	f003 0306 	and.w	r3, r3, #6
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	bf14      	ite	ne
 80067a6:	2500      	movne	r5, #0
 80067a8:	6833      	ldreq	r3, [r6, #0]
 80067aa:	f04f 0600 	mov.w	r6, #0
 80067ae:	bf08      	it	eq
 80067b0:	68e5      	ldreq	r5, [r4, #12]
 80067b2:	f104 041a 	add.w	r4, r4, #26
 80067b6:	bf08      	it	eq
 80067b8:	1aed      	subeq	r5, r5, r3
 80067ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80067be:	bf08      	it	eq
 80067c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067c4:	4293      	cmp	r3, r2
 80067c6:	bfc4      	itt	gt
 80067c8:	1a9b      	subgt	r3, r3, r2
 80067ca:	18ed      	addgt	r5, r5, r3
 80067cc:	42b5      	cmp	r5, r6
 80067ce:	d11a      	bne.n	8006806 <_printf_common+0xd2>
 80067d0:	2000      	movs	r0, #0
 80067d2:	e008      	b.n	80067e6 <_printf_common+0xb2>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4652      	mov	r2, sl
 80067d8:	4641      	mov	r1, r8
 80067da:	4638      	mov	r0, r7
 80067dc:	47c8      	blx	r9
 80067de:	3001      	adds	r0, #1
 80067e0:	d103      	bne.n	80067ea <_printf_common+0xb6>
 80067e2:	f04f 30ff 	mov.w	r0, #4294967295
 80067e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ea:	3501      	adds	r5, #1
 80067ec:	e7c1      	b.n	8006772 <_printf_common+0x3e>
 80067ee:	2030      	movs	r0, #48	@ 0x30
 80067f0:	18e1      	adds	r1, r4, r3
 80067f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067f6:	1c5a      	adds	r2, r3, #1
 80067f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067fc:	4422      	add	r2, r4
 80067fe:	3302      	adds	r3, #2
 8006800:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006804:	e7c2      	b.n	800678c <_printf_common+0x58>
 8006806:	2301      	movs	r3, #1
 8006808:	4622      	mov	r2, r4
 800680a:	4641      	mov	r1, r8
 800680c:	4638      	mov	r0, r7
 800680e:	47c8      	blx	r9
 8006810:	3001      	adds	r0, #1
 8006812:	d0e6      	beq.n	80067e2 <_printf_common+0xae>
 8006814:	3601      	adds	r6, #1
 8006816:	e7d9      	b.n	80067cc <_printf_common+0x98>

08006818 <_printf_i>:
 8006818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	7e0f      	ldrb	r7, [r1, #24]
 800681e:	4691      	mov	r9, r2
 8006820:	2f78      	cmp	r7, #120	@ 0x78
 8006822:	4680      	mov	r8, r0
 8006824:	460c      	mov	r4, r1
 8006826:	469a      	mov	sl, r3
 8006828:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800682a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800682e:	d807      	bhi.n	8006840 <_printf_i+0x28>
 8006830:	2f62      	cmp	r7, #98	@ 0x62
 8006832:	d80a      	bhi.n	800684a <_printf_i+0x32>
 8006834:	2f00      	cmp	r7, #0
 8006836:	f000 80d3 	beq.w	80069e0 <_printf_i+0x1c8>
 800683a:	2f58      	cmp	r7, #88	@ 0x58
 800683c:	f000 80ba 	beq.w	80069b4 <_printf_i+0x19c>
 8006840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006844:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006848:	e03a      	b.n	80068c0 <_printf_i+0xa8>
 800684a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800684e:	2b15      	cmp	r3, #21
 8006850:	d8f6      	bhi.n	8006840 <_printf_i+0x28>
 8006852:	a101      	add	r1, pc, #4	@ (adr r1, 8006858 <_printf_i+0x40>)
 8006854:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006858:	080068b1 	.word	0x080068b1
 800685c:	080068c5 	.word	0x080068c5
 8006860:	08006841 	.word	0x08006841
 8006864:	08006841 	.word	0x08006841
 8006868:	08006841 	.word	0x08006841
 800686c:	08006841 	.word	0x08006841
 8006870:	080068c5 	.word	0x080068c5
 8006874:	08006841 	.word	0x08006841
 8006878:	08006841 	.word	0x08006841
 800687c:	08006841 	.word	0x08006841
 8006880:	08006841 	.word	0x08006841
 8006884:	080069c7 	.word	0x080069c7
 8006888:	080068ef 	.word	0x080068ef
 800688c:	08006981 	.word	0x08006981
 8006890:	08006841 	.word	0x08006841
 8006894:	08006841 	.word	0x08006841
 8006898:	080069e9 	.word	0x080069e9
 800689c:	08006841 	.word	0x08006841
 80068a0:	080068ef 	.word	0x080068ef
 80068a4:	08006841 	.word	0x08006841
 80068a8:	08006841 	.word	0x08006841
 80068ac:	08006989 	.word	0x08006989
 80068b0:	6833      	ldr	r3, [r6, #0]
 80068b2:	1d1a      	adds	r2, r3, #4
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6032      	str	r2, [r6, #0]
 80068b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068c0:	2301      	movs	r3, #1
 80068c2:	e09e      	b.n	8006a02 <_printf_i+0x1ea>
 80068c4:	6833      	ldr	r3, [r6, #0]
 80068c6:	6820      	ldr	r0, [r4, #0]
 80068c8:	1d19      	adds	r1, r3, #4
 80068ca:	6031      	str	r1, [r6, #0]
 80068cc:	0606      	lsls	r6, r0, #24
 80068ce:	d501      	bpl.n	80068d4 <_printf_i+0xbc>
 80068d0:	681d      	ldr	r5, [r3, #0]
 80068d2:	e003      	b.n	80068dc <_printf_i+0xc4>
 80068d4:	0645      	lsls	r5, r0, #25
 80068d6:	d5fb      	bpl.n	80068d0 <_printf_i+0xb8>
 80068d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068dc:	2d00      	cmp	r5, #0
 80068de:	da03      	bge.n	80068e8 <_printf_i+0xd0>
 80068e0:	232d      	movs	r3, #45	@ 0x2d
 80068e2:	426d      	negs	r5, r5
 80068e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e8:	230a      	movs	r3, #10
 80068ea:	4859      	ldr	r0, [pc, #356]	@ (8006a50 <_printf_i+0x238>)
 80068ec:	e011      	b.n	8006912 <_printf_i+0xfa>
 80068ee:	6821      	ldr	r1, [r4, #0]
 80068f0:	6833      	ldr	r3, [r6, #0]
 80068f2:	0608      	lsls	r0, r1, #24
 80068f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80068f8:	d402      	bmi.n	8006900 <_printf_i+0xe8>
 80068fa:	0649      	lsls	r1, r1, #25
 80068fc:	bf48      	it	mi
 80068fe:	b2ad      	uxthmi	r5, r5
 8006900:	2f6f      	cmp	r7, #111	@ 0x6f
 8006902:	6033      	str	r3, [r6, #0]
 8006904:	bf14      	ite	ne
 8006906:	230a      	movne	r3, #10
 8006908:	2308      	moveq	r3, #8
 800690a:	4851      	ldr	r0, [pc, #324]	@ (8006a50 <_printf_i+0x238>)
 800690c:	2100      	movs	r1, #0
 800690e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006912:	6866      	ldr	r6, [r4, #4]
 8006914:	2e00      	cmp	r6, #0
 8006916:	bfa8      	it	ge
 8006918:	6821      	ldrge	r1, [r4, #0]
 800691a:	60a6      	str	r6, [r4, #8]
 800691c:	bfa4      	itt	ge
 800691e:	f021 0104 	bicge.w	r1, r1, #4
 8006922:	6021      	strge	r1, [r4, #0]
 8006924:	b90d      	cbnz	r5, 800692a <_printf_i+0x112>
 8006926:	2e00      	cmp	r6, #0
 8006928:	d04b      	beq.n	80069c2 <_printf_i+0x1aa>
 800692a:	4616      	mov	r6, r2
 800692c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006930:	fb03 5711 	mls	r7, r3, r1, r5
 8006934:	5dc7      	ldrb	r7, [r0, r7]
 8006936:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800693a:	462f      	mov	r7, r5
 800693c:	42bb      	cmp	r3, r7
 800693e:	460d      	mov	r5, r1
 8006940:	d9f4      	bls.n	800692c <_printf_i+0x114>
 8006942:	2b08      	cmp	r3, #8
 8006944:	d10b      	bne.n	800695e <_printf_i+0x146>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	07df      	lsls	r7, r3, #31
 800694a:	d508      	bpl.n	800695e <_printf_i+0x146>
 800694c:	6923      	ldr	r3, [r4, #16]
 800694e:	6861      	ldr	r1, [r4, #4]
 8006950:	4299      	cmp	r1, r3
 8006952:	bfde      	ittt	le
 8006954:	2330      	movle	r3, #48	@ 0x30
 8006956:	f806 3c01 	strble.w	r3, [r6, #-1]
 800695a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800695e:	1b92      	subs	r2, r2, r6
 8006960:	6122      	str	r2, [r4, #16]
 8006962:	464b      	mov	r3, r9
 8006964:	4621      	mov	r1, r4
 8006966:	4640      	mov	r0, r8
 8006968:	f8cd a000 	str.w	sl, [sp]
 800696c:	aa03      	add	r2, sp, #12
 800696e:	f7ff fee1 	bl	8006734 <_printf_common>
 8006972:	3001      	adds	r0, #1
 8006974:	d14a      	bne.n	8006a0c <_printf_i+0x1f4>
 8006976:	f04f 30ff 	mov.w	r0, #4294967295
 800697a:	b004      	add	sp, #16
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	f043 0320 	orr.w	r3, r3, #32
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	2778      	movs	r7, #120	@ 0x78
 800698a:	4832      	ldr	r0, [pc, #200]	@ (8006a54 <_printf_i+0x23c>)
 800698c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	6831      	ldr	r1, [r6, #0]
 8006994:	061f      	lsls	r7, r3, #24
 8006996:	f851 5b04 	ldr.w	r5, [r1], #4
 800699a:	d402      	bmi.n	80069a2 <_printf_i+0x18a>
 800699c:	065f      	lsls	r7, r3, #25
 800699e:	bf48      	it	mi
 80069a0:	b2ad      	uxthmi	r5, r5
 80069a2:	6031      	str	r1, [r6, #0]
 80069a4:	07d9      	lsls	r1, r3, #31
 80069a6:	bf44      	itt	mi
 80069a8:	f043 0320 	orrmi.w	r3, r3, #32
 80069ac:	6023      	strmi	r3, [r4, #0]
 80069ae:	b11d      	cbz	r5, 80069b8 <_printf_i+0x1a0>
 80069b0:	2310      	movs	r3, #16
 80069b2:	e7ab      	b.n	800690c <_printf_i+0xf4>
 80069b4:	4826      	ldr	r0, [pc, #152]	@ (8006a50 <_printf_i+0x238>)
 80069b6:	e7e9      	b.n	800698c <_printf_i+0x174>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	f023 0320 	bic.w	r3, r3, #32
 80069be:	6023      	str	r3, [r4, #0]
 80069c0:	e7f6      	b.n	80069b0 <_printf_i+0x198>
 80069c2:	4616      	mov	r6, r2
 80069c4:	e7bd      	b.n	8006942 <_printf_i+0x12a>
 80069c6:	6833      	ldr	r3, [r6, #0]
 80069c8:	6825      	ldr	r5, [r4, #0]
 80069ca:	1d18      	adds	r0, r3, #4
 80069cc:	6961      	ldr	r1, [r4, #20]
 80069ce:	6030      	str	r0, [r6, #0]
 80069d0:	062e      	lsls	r6, r5, #24
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	d501      	bpl.n	80069da <_printf_i+0x1c2>
 80069d6:	6019      	str	r1, [r3, #0]
 80069d8:	e002      	b.n	80069e0 <_printf_i+0x1c8>
 80069da:	0668      	lsls	r0, r5, #25
 80069dc:	d5fb      	bpl.n	80069d6 <_printf_i+0x1be>
 80069de:	8019      	strh	r1, [r3, #0]
 80069e0:	2300      	movs	r3, #0
 80069e2:	4616      	mov	r6, r2
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	e7bc      	b.n	8006962 <_printf_i+0x14a>
 80069e8:	6833      	ldr	r3, [r6, #0]
 80069ea:	2100      	movs	r1, #0
 80069ec:	1d1a      	adds	r2, r3, #4
 80069ee:	6032      	str	r2, [r6, #0]
 80069f0:	681e      	ldr	r6, [r3, #0]
 80069f2:	6862      	ldr	r2, [r4, #4]
 80069f4:	4630      	mov	r0, r6
 80069f6:	f000 f859 	bl	8006aac <memchr>
 80069fa:	b108      	cbz	r0, 8006a00 <_printf_i+0x1e8>
 80069fc:	1b80      	subs	r0, r0, r6
 80069fe:	6060      	str	r0, [r4, #4]
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	6123      	str	r3, [r4, #16]
 8006a04:	2300      	movs	r3, #0
 8006a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a0a:	e7aa      	b.n	8006962 <_printf_i+0x14a>
 8006a0c:	4632      	mov	r2, r6
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4640      	mov	r0, r8
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	47d0      	blx	sl
 8006a16:	3001      	adds	r0, #1
 8006a18:	d0ad      	beq.n	8006976 <_printf_i+0x15e>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	079b      	lsls	r3, r3, #30
 8006a1e:	d413      	bmi.n	8006a48 <_printf_i+0x230>
 8006a20:	68e0      	ldr	r0, [r4, #12]
 8006a22:	9b03      	ldr	r3, [sp, #12]
 8006a24:	4298      	cmp	r0, r3
 8006a26:	bfb8      	it	lt
 8006a28:	4618      	movlt	r0, r3
 8006a2a:	e7a6      	b.n	800697a <_printf_i+0x162>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4632      	mov	r2, r6
 8006a30:	4649      	mov	r1, r9
 8006a32:	4640      	mov	r0, r8
 8006a34:	47d0      	blx	sl
 8006a36:	3001      	adds	r0, #1
 8006a38:	d09d      	beq.n	8006976 <_printf_i+0x15e>
 8006a3a:	3501      	adds	r5, #1
 8006a3c:	68e3      	ldr	r3, [r4, #12]
 8006a3e:	9903      	ldr	r1, [sp, #12]
 8006a40:	1a5b      	subs	r3, r3, r1
 8006a42:	42ab      	cmp	r3, r5
 8006a44:	dcf2      	bgt.n	8006a2c <_printf_i+0x214>
 8006a46:	e7eb      	b.n	8006a20 <_printf_i+0x208>
 8006a48:	2500      	movs	r5, #0
 8006a4a:	f104 0619 	add.w	r6, r4, #25
 8006a4e:	e7f5      	b.n	8006a3c <_printf_i+0x224>
 8006a50:	0800728f 	.word	0x0800728f
 8006a54:	080072a0 	.word	0x080072a0

08006a58 <memmove>:
 8006a58:	4288      	cmp	r0, r1
 8006a5a:	b510      	push	{r4, lr}
 8006a5c:	eb01 0402 	add.w	r4, r1, r2
 8006a60:	d902      	bls.n	8006a68 <memmove+0x10>
 8006a62:	4284      	cmp	r4, r0
 8006a64:	4623      	mov	r3, r4
 8006a66:	d807      	bhi.n	8006a78 <memmove+0x20>
 8006a68:	1e43      	subs	r3, r0, #1
 8006a6a:	42a1      	cmp	r1, r4
 8006a6c:	d008      	beq.n	8006a80 <memmove+0x28>
 8006a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a76:	e7f8      	b.n	8006a6a <memmove+0x12>
 8006a78:	4601      	mov	r1, r0
 8006a7a:	4402      	add	r2, r0
 8006a7c:	428a      	cmp	r2, r1
 8006a7e:	d100      	bne.n	8006a82 <memmove+0x2a>
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a8a:	e7f7      	b.n	8006a7c <memmove+0x24>

08006a8c <_sbrk_r>:
 8006a8c:	b538      	push	{r3, r4, r5, lr}
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4d05      	ldr	r5, [pc, #20]	@ (8006aa8 <_sbrk_r+0x1c>)
 8006a92:	4604      	mov	r4, r0
 8006a94:	4608      	mov	r0, r1
 8006a96:	602b      	str	r3, [r5, #0]
 8006a98:	f7fb feec 	bl	8002874 <_sbrk>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_sbrk_r+0x1a>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_sbrk_r+0x1a>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	20000408 	.word	0x20000408

08006aac <memchr>:
 8006aac:	4603      	mov	r3, r0
 8006aae:	b510      	push	{r4, lr}
 8006ab0:	b2c9      	uxtb	r1, r1
 8006ab2:	4402      	add	r2, r0
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	d101      	bne.n	8006abe <memchr+0x12>
 8006aba:	2000      	movs	r0, #0
 8006abc:	e003      	b.n	8006ac6 <memchr+0x1a>
 8006abe:	7804      	ldrb	r4, [r0, #0]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	428c      	cmp	r4, r1
 8006ac4:	d1f6      	bne.n	8006ab4 <memchr+0x8>
 8006ac6:	bd10      	pop	{r4, pc}

08006ac8 <memcpy>:
 8006ac8:	440a      	add	r2, r1
 8006aca:	4291      	cmp	r1, r2
 8006acc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ad0:	d100      	bne.n	8006ad4 <memcpy+0xc>
 8006ad2:	4770      	bx	lr
 8006ad4:	b510      	push	{r4, lr}
 8006ad6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ada:	4291      	cmp	r1, r2
 8006adc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ae0:	d1f9      	bne.n	8006ad6 <memcpy+0xe>
 8006ae2:	bd10      	pop	{r4, pc}

08006ae4 <_realloc_r>:
 8006ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae8:	4680      	mov	r8, r0
 8006aea:	4615      	mov	r5, r2
 8006aec:	460c      	mov	r4, r1
 8006aee:	b921      	cbnz	r1, 8006afa <_realloc_r+0x16>
 8006af0:	4611      	mov	r1, r2
 8006af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006af6:	f7ff bc39 	b.w	800636c <_malloc_r>
 8006afa:	b92a      	cbnz	r2, 8006b08 <_realloc_r+0x24>
 8006afc:	f7ff fbcc 	bl	8006298 <_free_r>
 8006b00:	2400      	movs	r4, #0
 8006b02:	4620      	mov	r0, r4
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b08:	f000 f81a 	bl	8006b40 <_malloc_usable_size_r>
 8006b0c:	4285      	cmp	r5, r0
 8006b0e:	4606      	mov	r6, r0
 8006b10:	d802      	bhi.n	8006b18 <_realloc_r+0x34>
 8006b12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b16:	d8f4      	bhi.n	8006b02 <_realloc_r+0x1e>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	f7ff fc26 	bl	800636c <_malloc_r>
 8006b20:	4607      	mov	r7, r0
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d0ec      	beq.n	8006b00 <_realloc_r+0x1c>
 8006b26:	42b5      	cmp	r5, r6
 8006b28:	462a      	mov	r2, r5
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	bf28      	it	cs
 8006b2e:	4632      	movcs	r2, r6
 8006b30:	f7ff ffca 	bl	8006ac8 <memcpy>
 8006b34:	4621      	mov	r1, r4
 8006b36:	4640      	mov	r0, r8
 8006b38:	f7ff fbae 	bl	8006298 <_free_r>
 8006b3c:	463c      	mov	r4, r7
 8006b3e:	e7e0      	b.n	8006b02 <_realloc_r+0x1e>

08006b40 <_malloc_usable_size_r>:
 8006b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b44:	1f18      	subs	r0, r3, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bfbc      	itt	lt
 8006b4a:	580b      	ldrlt	r3, [r1, r0]
 8006b4c:	18c0      	addlt	r0, r0, r3
 8006b4e:	4770      	bx	lr

08006b50 <atan2>:
 8006b50:	f000 b8fa 	b.w	8006d48 <__ieee754_atan2>

08006b54 <sqrt>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	4606      	mov	r6, r0
 8006b58:	460f      	mov	r7, r1
 8006b5a:	f000 f81f 	bl	8006b9c <__ieee754_sqrt>
 8006b5e:	4632      	mov	r2, r6
 8006b60:	4604      	mov	r4, r0
 8006b62:	460d      	mov	r5, r1
 8006b64:	463b      	mov	r3, r7
 8006b66:	4630      	mov	r0, r6
 8006b68:	4639      	mov	r1, r7
 8006b6a:	f7f9 ff4f 	bl	8000a0c <__aeabi_dcmpun>
 8006b6e:	b990      	cbnz	r0, 8006b96 <sqrt+0x42>
 8006b70:	2200      	movs	r2, #0
 8006b72:	2300      	movs	r3, #0
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 ff20 	bl	80009bc <__aeabi_dcmplt>
 8006b7c:	b158      	cbz	r0, 8006b96 <sqrt+0x42>
 8006b7e:	f7ff fb5f 	bl	8006240 <__errno>
 8006b82:	2321      	movs	r3, #33	@ 0x21
 8006b84:	2200      	movs	r2, #0
 8006b86:	6003      	str	r3, [r0, #0]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4610      	mov	r0, r2
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	f7f9 fdcd 	bl	800072c <__aeabi_ddiv>
 8006b92:	4604      	mov	r4, r0
 8006b94:	460d      	mov	r5, r1
 8006b96:	4620      	mov	r0, r4
 8006b98:	4629      	mov	r1, r5
 8006b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006b9c <__ieee754_sqrt>:
 8006b9c:	4a67      	ldr	r2, [pc, #412]	@ (8006d3c <__ieee754_sqrt+0x1a0>)
 8006b9e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba2:	438a      	bics	r2, r1
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4604      	mov	r4, r0
 8006bac:	d10e      	bne.n	8006bcc <__ieee754_sqrt+0x30>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	f7f9 fc92 	bl	80004d8 <__aeabi_dmul>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7f9 fad6 	bl	800016c <__adddf3>
 8006bc0:	4606      	mov	r6, r0
 8006bc2:	460f      	mov	r7, r1
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	dc0c      	bgt.n	8006bea <__ieee754_sqrt+0x4e>
 8006bd0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8006bd4:	4302      	orrs	r2, r0
 8006bd6:	d0f5      	beq.n	8006bc4 <__ieee754_sqrt+0x28>
 8006bd8:	b189      	cbz	r1, 8006bfe <__ieee754_sqrt+0x62>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	f7f9 fac4 	bl	8000168 <__aeabi_dsub>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	f7f9 fda2 	bl	800072c <__aeabi_ddiv>
 8006be8:	e7ea      	b.n	8006bc0 <__ieee754_sqrt+0x24>
 8006bea:	150a      	asrs	r2, r1, #20
 8006bec:	d115      	bne.n	8006c1a <__ieee754_sqrt+0x7e>
 8006bee:	2100      	movs	r1, #0
 8006bf0:	e009      	b.n	8006c06 <__ieee754_sqrt+0x6a>
 8006bf2:	0ae3      	lsrs	r3, r4, #11
 8006bf4:	3a15      	subs	r2, #21
 8006bf6:	0564      	lsls	r4, r4, #21
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d0fa      	beq.n	8006bf2 <__ieee754_sqrt+0x56>
 8006bfc:	e7f7      	b.n	8006bee <__ieee754_sqrt+0x52>
 8006bfe:	460a      	mov	r2, r1
 8006c00:	e7fa      	b.n	8006bf8 <__ieee754_sqrt+0x5c>
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	3101      	adds	r1, #1
 8006c06:	02d8      	lsls	r0, r3, #11
 8006c08:	d5fb      	bpl.n	8006c02 <__ieee754_sqrt+0x66>
 8006c0a:	1e48      	subs	r0, r1, #1
 8006c0c:	1a12      	subs	r2, r2, r0
 8006c0e:	f1c1 0020 	rsb	r0, r1, #32
 8006c12:	fa24 f000 	lsr.w	r0, r4, r0
 8006c16:	4303      	orrs	r3, r0
 8006c18:	408c      	lsls	r4, r1
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006c20:	2116      	movs	r1, #22
 8006c22:	07d2      	lsls	r2, r2, #31
 8006c24:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8006c28:	4632      	mov	r2, r6
 8006c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c32:	bf5c      	itt	pl
 8006c34:	005b      	lslpl	r3, r3, #1
 8006c36:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8006c3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006c3e:	bf58      	it	pl
 8006c40:	0064      	lslpl	r4, r4, #1
 8006c42:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8006c46:	107f      	asrs	r7, r7, #1
 8006c48:	0064      	lsls	r4, r4, #1
 8006c4a:	1815      	adds	r5, r2, r0
 8006c4c:	429d      	cmp	r5, r3
 8006c4e:	bfde      	ittt	le
 8006c50:	182a      	addle	r2, r5, r0
 8006c52:	1b5b      	suble	r3, r3, r5
 8006c54:	1836      	addle	r6, r6, r0
 8006c56:	0fe5      	lsrs	r5, r4, #31
 8006c58:	3901      	subs	r1, #1
 8006c5a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006c5e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006c62:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006c66:	d1f0      	bne.n	8006c4a <__ieee754_sqrt+0xae>
 8006c68:	460d      	mov	r5, r1
 8006c6a:	f04f 0a20 	mov.w	sl, #32
 8006c6e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8006c72:	429a      	cmp	r2, r3
 8006c74:	eb01 0c00 	add.w	ip, r1, r0
 8006c78:	db02      	blt.n	8006c80 <__ieee754_sqrt+0xe4>
 8006c7a:	d113      	bne.n	8006ca4 <__ieee754_sqrt+0x108>
 8006c7c:	45a4      	cmp	ip, r4
 8006c7e:	d811      	bhi.n	8006ca4 <__ieee754_sqrt+0x108>
 8006c80:	f1bc 0f00 	cmp.w	ip, #0
 8006c84:	eb0c 0100 	add.w	r1, ip, r0
 8006c88:	da42      	bge.n	8006d10 <__ieee754_sqrt+0x174>
 8006c8a:	2900      	cmp	r1, #0
 8006c8c:	db40      	blt.n	8006d10 <__ieee754_sqrt+0x174>
 8006c8e:	f102 0e01 	add.w	lr, r2, #1
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	4672      	mov	r2, lr
 8006c96:	45a4      	cmp	ip, r4
 8006c98:	bf88      	it	hi
 8006c9a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006c9e:	eba4 040c 	sub.w	r4, r4, ip
 8006ca2:	4405      	add	r5, r0
 8006ca4:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8006ca8:	f1ba 0a01 	subs.w	sl, sl, #1
 8006cac:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8006cb0:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8006cb4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006cb8:	d1db      	bne.n	8006c72 <__ieee754_sqrt+0xd6>
 8006cba:	431c      	orrs	r4, r3
 8006cbc:	d01a      	beq.n	8006cf4 <__ieee754_sqrt+0x158>
 8006cbe:	4c20      	ldr	r4, [pc, #128]	@ (8006d40 <__ieee754_sqrt+0x1a4>)
 8006cc0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8006d44 <__ieee754_sqrt+0x1a8>
 8006cc4:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006cc8:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ccc:	f7f9 fa4c 	bl	8000168 <__aeabi_dsub>
 8006cd0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4649      	mov	r1, r9
 8006cdc:	f7f9 fe78 	bl	80009d0 <__aeabi_dcmple>
 8006ce0:	b140      	cbz	r0, 8006cf4 <__ieee754_sqrt+0x158>
 8006ce2:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006ce6:	e9db 2300 	ldrd	r2, r3, [fp]
 8006cea:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006cee:	d111      	bne.n	8006d14 <__ieee754_sqrt+0x178>
 8006cf0:	4655      	mov	r5, sl
 8006cf2:	3601      	adds	r6, #1
 8006cf4:	1072      	asrs	r2, r6, #1
 8006cf6:	086b      	lsrs	r3, r5, #1
 8006cf8:	07f1      	lsls	r1, r6, #31
 8006cfa:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006cfe:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006d02:	bf48      	it	mi
 8006d04:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8006d08:	4618      	mov	r0, r3
 8006d0a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8006d0e:	e757      	b.n	8006bc0 <__ieee754_sqrt+0x24>
 8006d10:	4696      	mov	lr, r2
 8006d12:	e7be      	b.n	8006c92 <__ieee754_sqrt+0xf6>
 8006d14:	f7f9 fa2a 	bl	800016c <__adddf3>
 8006d18:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	460b      	mov	r3, r1
 8006d20:	4640      	mov	r0, r8
 8006d22:	4649      	mov	r1, r9
 8006d24:	f7f9 fe4a 	bl	80009bc <__aeabi_dcmplt>
 8006d28:	b120      	cbz	r0, 8006d34 <__ieee754_sqrt+0x198>
 8006d2a:	1ca8      	adds	r0, r5, #2
 8006d2c:	bf08      	it	eq
 8006d2e:	3601      	addeq	r6, #1
 8006d30:	3502      	adds	r5, #2
 8006d32:	e7df      	b.n	8006cf4 <__ieee754_sqrt+0x158>
 8006d34:	1c6b      	adds	r3, r5, #1
 8006d36:	f023 0501 	bic.w	r5, r3, #1
 8006d3a:	e7db      	b.n	8006cf4 <__ieee754_sqrt+0x158>
 8006d3c:	7ff00000 	.word	0x7ff00000
 8006d40:	20000080 	.word	0x20000080
 8006d44:	20000078 	.word	0x20000078

08006d48 <__ieee754_atan2>:
 8006d48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	4617      	mov	r7, r2
 8006d4e:	4690      	mov	r8, r2
 8006d50:	4699      	mov	r9, r3
 8006d52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006d56:	427b      	negs	r3, r7
 8006d58:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8006ee0 <__ieee754_atan2+0x198>
 8006d5c:	433b      	orrs	r3, r7
 8006d5e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006d62:	4553      	cmp	r3, sl
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	d809      	bhi.n	8006d7e <__ieee754_atan2+0x36>
 8006d6a:	4246      	negs	r6, r0
 8006d6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d70:	4306      	orrs	r6, r0
 8006d72:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006d76:	4556      	cmp	r6, sl
 8006d78:	468e      	mov	lr, r1
 8006d7a:	4683      	mov	fp, r0
 8006d7c:	d908      	bls.n	8006d90 <__ieee754_atan2+0x48>
 8006d7e:	4642      	mov	r2, r8
 8006d80:	464b      	mov	r3, r9
 8006d82:	4620      	mov	r0, r4
 8006d84:	4629      	mov	r1, r5
 8006d86:	f7f9 f9f1 	bl	800016c <__adddf3>
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	460d      	mov	r5, r1
 8006d8e:	e016      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006d90:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8006d94:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8006d98:	433e      	orrs	r6, r7
 8006d9a:	d103      	bne.n	8006da4 <__ieee754_atan2+0x5c>
 8006d9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da0:	f000 b8a6 	b.w	8006ef0 <atan>
 8006da4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8006da8:	f006 0602 	and.w	r6, r6, #2
 8006dac:	ea53 0b0b 	orrs.w	fp, r3, fp
 8006db0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006db4:	d107      	bne.n	8006dc6 <__ieee754_atan2+0x7e>
 8006db6:	2e02      	cmp	r6, #2
 8006db8:	d064      	beq.n	8006e84 <__ieee754_atan2+0x13c>
 8006dba:	2e03      	cmp	r6, #3
 8006dbc:	d066      	beq.n	8006e8c <__ieee754_atan2+0x144>
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc6:	4317      	orrs	r7, r2
 8006dc8:	d106      	bne.n	8006dd8 <__ieee754_atan2+0x90>
 8006dca:	f1be 0f00 	cmp.w	lr, #0
 8006dce:	da68      	bge.n	8006ea2 <__ieee754_atan2+0x15a>
 8006dd0:	a537      	add	r5, pc, #220	@ (adr r5, 8006eb0 <__ieee754_atan2+0x168>)
 8006dd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006dd6:	e7f2      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006dd8:	4552      	cmp	r2, sl
 8006dda:	d10f      	bne.n	8006dfc <__ieee754_atan2+0xb4>
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	f106 36ff 	add.w	r6, r6, #4294967295
 8006de2:	d107      	bne.n	8006df4 <__ieee754_atan2+0xac>
 8006de4:	2e02      	cmp	r6, #2
 8006de6:	d855      	bhi.n	8006e94 <__ieee754_atan2+0x14c>
 8006de8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee4 <__ieee754_atan2+0x19c>)
 8006dea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006dee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8006df2:	e7e4      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006df4:	2e02      	cmp	r6, #2
 8006df6:	d851      	bhi.n	8006e9c <__ieee754_atan2+0x154>
 8006df8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ee8 <__ieee754_atan2+0x1a0>)
 8006dfa:	e7f6      	b.n	8006dea <__ieee754_atan2+0xa2>
 8006dfc:	4553      	cmp	r3, sl
 8006dfe:	d0e4      	beq.n	8006dca <__ieee754_atan2+0x82>
 8006e00:	1a9b      	subs	r3, r3, r2
 8006e02:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8006e06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e0a:	da21      	bge.n	8006e50 <__ieee754_atan2+0x108>
 8006e0c:	f1b9 0f00 	cmp.w	r9, #0
 8006e10:	da01      	bge.n	8006e16 <__ieee754_atan2+0xce>
 8006e12:	323c      	adds	r2, #60	@ 0x3c
 8006e14:	db20      	blt.n	8006e58 <__ieee754_atan2+0x110>
 8006e16:	4642      	mov	r2, r8
 8006e18:	464b      	mov	r3, r9
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	f7f9 fc85 	bl	800072c <__aeabi_ddiv>
 8006e22:	f000 f9f5 	bl	8007210 <fabs>
 8006e26:	f000 f863 	bl	8006ef0 <atan>
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	2e01      	cmp	r6, #1
 8006e30:	d015      	beq.n	8006e5e <__ieee754_atan2+0x116>
 8006e32:	2e02      	cmp	r6, #2
 8006e34:	d017      	beq.n	8006e66 <__ieee754_atan2+0x11e>
 8006e36:	2e00      	cmp	r6, #0
 8006e38:	d0c1      	beq.n	8006dbe <__ieee754_atan2+0x76>
 8006e3a:	a31f      	add	r3, pc, #124	@ (adr r3, 8006eb8 <__ieee754_atan2+0x170>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	4620      	mov	r0, r4
 8006e42:	4629      	mov	r1, r5
 8006e44:	f7f9 f990 	bl	8000168 <__aeabi_dsub>
 8006e48:	a31d      	add	r3, pc, #116	@ (adr r3, 8006ec0 <__ieee754_atan2+0x178>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	e016      	b.n	8006e7e <__ieee754_atan2+0x136>
 8006e50:	a51d      	add	r5, pc, #116	@ (adr r5, 8006ec8 <__ieee754_atan2+0x180>)
 8006e52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e56:	e7ea      	b.n	8006e2e <__ieee754_atan2+0xe6>
 8006e58:	2400      	movs	r4, #0
 8006e5a:	2500      	movs	r5, #0
 8006e5c:	e7e7      	b.n	8006e2e <__ieee754_atan2+0xe6>
 8006e5e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8006e62:	461d      	mov	r5, r3
 8006e64:	e7ab      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006e66:	a314      	add	r3, pc, #80	@ (adr r3, 8006eb8 <__ieee754_atan2+0x170>)
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	f7f9 f97a 	bl	8000168 <__aeabi_dsub>
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	a111      	add	r1, pc, #68	@ (adr r1, 8006ec0 <__ieee754_atan2+0x178>)
 8006e7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e7e:	f7f9 f973 	bl	8000168 <__aeabi_dsub>
 8006e82:	e782      	b.n	8006d8a <__ieee754_atan2+0x42>
 8006e84:	a50e      	add	r5, pc, #56	@ (adr r5, 8006ec0 <__ieee754_atan2+0x178>)
 8006e86:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e8a:	e798      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006e8c:	a510      	add	r5, pc, #64	@ (adr r5, 8006ed0 <__ieee754_atan2+0x188>)
 8006e8e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e92:	e794      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006e94:	a510      	add	r5, pc, #64	@ (adr r5, 8006ed8 <__ieee754_atan2+0x190>)
 8006e96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e9a:	e790      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006e9c:	2400      	movs	r4, #0
 8006e9e:	2500      	movs	r5, #0
 8006ea0:	e78d      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006ea2:	a509      	add	r5, pc, #36	@ (adr r5, 8006ec8 <__ieee754_atan2+0x180>)
 8006ea4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ea8:	e789      	b.n	8006dbe <__ieee754_atan2+0x76>
 8006eaa:	bf00      	nop
 8006eac:	f3af 8000 	nop.w
 8006eb0:	54442d18 	.word	0x54442d18
 8006eb4:	bff921fb 	.word	0xbff921fb
 8006eb8:	33145c07 	.word	0x33145c07
 8006ebc:	3ca1a626 	.word	0x3ca1a626
 8006ec0:	54442d18 	.word	0x54442d18
 8006ec4:	400921fb 	.word	0x400921fb
 8006ec8:	54442d18 	.word	0x54442d18
 8006ecc:	3ff921fb 	.word	0x3ff921fb
 8006ed0:	54442d18 	.word	0x54442d18
 8006ed4:	c00921fb 	.word	0xc00921fb
 8006ed8:	54442d18 	.word	0x54442d18
 8006edc:	3fe921fb 	.word	0x3fe921fb
 8006ee0:	7ff00000 	.word	0x7ff00000
 8006ee4:	080072d0 	.word	0x080072d0
 8006ee8:	080072b8 	.word	0x080072b8
 8006eec:	00000000 	.word	0x00000000

08006ef0 <atan>:
 8006ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	4bbc      	ldr	r3, [pc, #752]	@ (80071e8 <atan+0x2f8>)
 8006ef6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8006efa:	429e      	cmp	r6, r3
 8006efc:	4604      	mov	r4, r0
 8006efe:	460d      	mov	r5, r1
 8006f00:	468b      	mov	fp, r1
 8006f02:	d918      	bls.n	8006f36 <atan+0x46>
 8006f04:	4bb9      	ldr	r3, [pc, #740]	@ (80071ec <atan+0x2fc>)
 8006f06:	429e      	cmp	r6, r3
 8006f08:	d801      	bhi.n	8006f0e <atan+0x1e>
 8006f0a:	d109      	bne.n	8006f20 <atan+0x30>
 8006f0c:	b140      	cbz	r0, 8006f20 <atan+0x30>
 8006f0e:	4622      	mov	r2, r4
 8006f10:	462b      	mov	r3, r5
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 f929 	bl	800016c <__adddf3>
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	e006      	b.n	8006f2e <atan+0x3e>
 8006f20:	f1bb 0f00 	cmp.w	fp, #0
 8006f24:	f340 8123 	ble.w	800716e <atan+0x27e>
 8006f28:	a593      	add	r5, pc, #588	@ (adr r5, 8007178 <atan+0x288>)
 8006f2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	4629      	mov	r1, r5
 8006f32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f36:	4bae      	ldr	r3, [pc, #696]	@ (80071f0 <atan+0x300>)
 8006f38:	429e      	cmp	r6, r3
 8006f3a:	d811      	bhi.n	8006f60 <atan+0x70>
 8006f3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8006f40:	429e      	cmp	r6, r3
 8006f42:	d80a      	bhi.n	8006f5a <atan+0x6a>
 8006f44:	a38e      	add	r3, pc, #568	@ (adr r3, 8007180 <atan+0x290>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f90f 	bl	800016c <__adddf3>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	4ba8      	ldr	r3, [pc, #672]	@ (80071f4 <atan+0x304>)
 8006f52:	f7f9 fd51 	bl	80009f8 <__aeabi_dcmpgt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d1e9      	bne.n	8006f2e <atan+0x3e>
 8006f5a:	f04f 3aff 	mov.w	sl, #4294967295
 8006f5e:	e027      	b.n	8006fb0 <atan+0xc0>
 8006f60:	f000 f956 	bl	8007210 <fabs>
 8006f64:	4ba4      	ldr	r3, [pc, #656]	@ (80071f8 <atan+0x308>)
 8006f66:	4604      	mov	r4, r0
 8006f68:	429e      	cmp	r6, r3
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	f200 80b8 	bhi.w	80070e0 <atan+0x1f0>
 8006f70:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8006f74:	429e      	cmp	r6, r3
 8006f76:	f200 809c 	bhi.w	80070b2 <atan+0x1c2>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	f7f9 f8f5 	bl	800016c <__adddf3>
 8006f82:	2200      	movs	r2, #0
 8006f84:	4b9b      	ldr	r3, [pc, #620]	@ (80071f4 <atan+0x304>)
 8006f86:	f7f9 f8ef 	bl	8000168 <__aeabi_dsub>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4606      	mov	r6, r0
 8006f8e:	460f      	mov	r7, r1
 8006f90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 f8e8 	bl	800016c <__adddf3>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	4639      	mov	r1, r7
 8006fa4:	f7f9 fbc2 	bl	800072c <__aeabi_ddiv>
 8006fa8:	f04f 0a00 	mov.w	sl, #0
 8006fac:	4604      	mov	r4, r0
 8006fae:	460d      	mov	r5, r1
 8006fb0:	4622      	mov	r2, r4
 8006fb2:	462b      	mov	r3, r5
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 fa8e 	bl	80004d8 <__aeabi_dmul>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	4689      	mov	r9, r1
 8006fc4:	f7f9 fa88 	bl	80004d8 <__aeabi_dmul>
 8006fc8:	a36f      	add	r3, pc, #444	@ (adr r3, 8007188 <atan+0x298>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	4606      	mov	r6, r0
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	f7f9 fa81 	bl	80004d8 <__aeabi_dmul>
 8006fd6:	a36e      	add	r3, pc, #440	@ (adr r3, 8007190 <atan+0x2a0>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f7f9 f8c6 	bl	800016c <__adddf3>
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	f7f9 fa78 	bl	80004d8 <__aeabi_dmul>
 8006fe8:	a36b      	add	r3, pc, #428	@ (adr r3, 8007198 <atan+0x2a8>)
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f7f9 f8bd 	bl	800016c <__adddf3>
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	463b      	mov	r3, r7
 8006ff6:	f7f9 fa6f 	bl	80004d8 <__aeabi_dmul>
 8006ffa:	a369      	add	r3, pc, #420	@ (adr r3, 80071a0 <atan+0x2b0>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f7f9 f8b4 	bl	800016c <__adddf3>
 8007004:	4632      	mov	r2, r6
 8007006:	463b      	mov	r3, r7
 8007008:	f7f9 fa66 	bl	80004d8 <__aeabi_dmul>
 800700c:	a366      	add	r3, pc, #408	@ (adr r3, 80071a8 <atan+0x2b8>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	f7f9 f8ab 	bl	800016c <__adddf3>
 8007016:	4632      	mov	r2, r6
 8007018:	463b      	mov	r3, r7
 800701a:	f7f9 fa5d 	bl	80004d8 <__aeabi_dmul>
 800701e:	a364      	add	r3, pc, #400	@ (adr r3, 80071b0 <atan+0x2c0>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7f9 f8a2 	bl	800016c <__adddf3>
 8007028:	4642      	mov	r2, r8
 800702a:	464b      	mov	r3, r9
 800702c:	f7f9 fa54 	bl	80004d8 <__aeabi_dmul>
 8007030:	a361      	add	r3, pc, #388	@ (adr r3, 80071b8 <atan+0x2c8>)
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	4680      	mov	r8, r0
 8007038:	4689      	mov	r9, r1
 800703a:	4630      	mov	r0, r6
 800703c:	4639      	mov	r1, r7
 800703e:	f7f9 fa4b 	bl	80004d8 <__aeabi_dmul>
 8007042:	a35f      	add	r3, pc, #380	@ (adr r3, 80071c0 <atan+0x2d0>)
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	f7f9 f88e 	bl	8000168 <__aeabi_dsub>
 800704c:	4632      	mov	r2, r6
 800704e:	463b      	mov	r3, r7
 8007050:	f7f9 fa42 	bl	80004d8 <__aeabi_dmul>
 8007054:	a35c      	add	r3, pc, #368	@ (adr r3, 80071c8 <atan+0x2d8>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f7f9 f885 	bl	8000168 <__aeabi_dsub>
 800705e:	4632      	mov	r2, r6
 8007060:	463b      	mov	r3, r7
 8007062:	f7f9 fa39 	bl	80004d8 <__aeabi_dmul>
 8007066:	a35a      	add	r3, pc, #360	@ (adr r3, 80071d0 <atan+0x2e0>)
 8007068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706c:	f7f9 f87c 	bl	8000168 <__aeabi_dsub>
 8007070:	4632      	mov	r2, r6
 8007072:	463b      	mov	r3, r7
 8007074:	f7f9 fa30 	bl	80004d8 <__aeabi_dmul>
 8007078:	a357      	add	r3, pc, #348	@ (adr r3, 80071d8 <atan+0x2e8>)
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f7f9 f873 	bl	8000168 <__aeabi_dsub>
 8007082:	4632      	mov	r2, r6
 8007084:	463b      	mov	r3, r7
 8007086:	f7f9 fa27 	bl	80004d8 <__aeabi_dmul>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4640      	mov	r0, r8
 8007090:	4649      	mov	r1, r9
 8007092:	f7f9 f86b 	bl	800016c <__adddf3>
 8007096:	4622      	mov	r2, r4
 8007098:	462b      	mov	r3, r5
 800709a:	f7f9 fa1d 	bl	80004d8 <__aeabi_dmul>
 800709e:	f1ba 3fff 	cmp.w	sl, #4294967295
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	d144      	bne.n	8007132 <atan+0x242>
 80070a8:	4620      	mov	r0, r4
 80070aa:	4629      	mov	r1, r5
 80070ac:	f7f9 f85c 	bl	8000168 <__aeabi_dsub>
 80070b0:	e733      	b.n	8006f1a <atan+0x2a>
 80070b2:	2200      	movs	r2, #0
 80070b4:	4b4f      	ldr	r3, [pc, #316]	@ (80071f4 <atan+0x304>)
 80070b6:	f7f9 f857 	bl	8000168 <__aeabi_dsub>
 80070ba:	2200      	movs	r2, #0
 80070bc:	4606      	mov	r6, r0
 80070be:	460f      	mov	r7, r1
 80070c0:	4620      	mov	r0, r4
 80070c2:	4629      	mov	r1, r5
 80070c4:	4b4b      	ldr	r3, [pc, #300]	@ (80071f4 <atan+0x304>)
 80070c6:	f7f9 f851 	bl	800016c <__adddf3>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4630      	mov	r0, r6
 80070d0:	4639      	mov	r1, r7
 80070d2:	f7f9 fb2b 	bl	800072c <__aeabi_ddiv>
 80070d6:	f04f 0a01 	mov.w	sl, #1
 80070da:	4604      	mov	r4, r0
 80070dc:	460d      	mov	r5, r1
 80070de:	e767      	b.n	8006fb0 <atan+0xc0>
 80070e0:	4b46      	ldr	r3, [pc, #280]	@ (80071fc <atan+0x30c>)
 80070e2:	429e      	cmp	r6, r3
 80070e4:	d21a      	bcs.n	800711c <atan+0x22c>
 80070e6:	2200      	movs	r2, #0
 80070e8:	4b45      	ldr	r3, [pc, #276]	@ (8007200 <atan+0x310>)
 80070ea:	f7f9 f83d 	bl	8000168 <__aeabi_dsub>
 80070ee:	2200      	movs	r2, #0
 80070f0:	4606      	mov	r6, r0
 80070f2:	460f      	mov	r7, r1
 80070f4:	4620      	mov	r0, r4
 80070f6:	4629      	mov	r1, r5
 80070f8:	4b41      	ldr	r3, [pc, #260]	@ (8007200 <atan+0x310>)
 80070fa:	f7f9 f9ed 	bl	80004d8 <__aeabi_dmul>
 80070fe:	2200      	movs	r2, #0
 8007100:	4b3c      	ldr	r3, [pc, #240]	@ (80071f4 <atan+0x304>)
 8007102:	f7f9 f833 	bl	800016c <__adddf3>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	4630      	mov	r0, r6
 800710c:	4639      	mov	r1, r7
 800710e:	f7f9 fb0d 	bl	800072c <__aeabi_ddiv>
 8007112:	f04f 0a02 	mov.w	sl, #2
 8007116:	4604      	mov	r4, r0
 8007118:	460d      	mov	r5, r1
 800711a:	e749      	b.n	8006fb0 <atan+0xc0>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	2000      	movs	r0, #0
 8007122:	4938      	ldr	r1, [pc, #224]	@ (8007204 <atan+0x314>)
 8007124:	f7f9 fb02 	bl	800072c <__aeabi_ddiv>
 8007128:	f04f 0a03 	mov.w	sl, #3
 800712c:	4604      	mov	r4, r0
 800712e:	460d      	mov	r5, r1
 8007130:	e73e      	b.n	8006fb0 <atan+0xc0>
 8007132:	4b35      	ldr	r3, [pc, #212]	@ (8007208 <atan+0x318>)
 8007134:	4e35      	ldr	r6, [pc, #212]	@ (800720c <atan+0x31c>)
 8007136:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 f813 	bl	8000168 <__aeabi_dsub>
 8007142:	4622      	mov	r2, r4
 8007144:	462b      	mov	r3, r5
 8007146:	f7f9 f80f 	bl	8000168 <__aeabi_dsub>
 800714a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007156:	f7f9 f807 	bl	8000168 <__aeabi_dsub>
 800715a:	f1bb 0f00 	cmp.w	fp, #0
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	f6bf aee4 	bge.w	8006f2e <atan+0x3e>
 8007166:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800716a:	461d      	mov	r5, r3
 800716c:	e6df      	b.n	8006f2e <atan+0x3e>
 800716e:	a51c      	add	r5, pc, #112	@ (adr r5, 80071e0 <atan+0x2f0>)
 8007170:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007174:	e6db      	b.n	8006f2e <atan+0x3e>
 8007176:	bf00      	nop
 8007178:	54442d18 	.word	0x54442d18
 800717c:	3ff921fb 	.word	0x3ff921fb
 8007180:	8800759c 	.word	0x8800759c
 8007184:	7e37e43c 	.word	0x7e37e43c
 8007188:	e322da11 	.word	0xe322da11
 800718c:	3f90ad3a 	.word	0x3f90ad3a
 8007190:	24760deb 	.word	0x24760deb
 8007194:	3fa97b4b 	.word	0x3fa97b4b
 8007198:	a0d03d51 	.word	0xa0d03d51
 800719c:	3fb10d66 	.word	0x3fb10d66
 80071a0:	c54c206e 	.word	0xc54c206e
 80071a4:	3fb745cd 	.word	0x3fb745cd
 80071a8:	920083ff 	.word	0x920083ff
 80071ac:	3fc24924 	.word	0x3fc24924
 80071b0:	5555550d 	.word	0x5555550d
 80071b4:	3fd55555 	.word	0x3fd55555
 80071b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80071bc:	bfa2b444 	.word	0xbfa2b444
 80071c0:	52defd9a 	.word	0x52defd9a
 80071c4:	3fadde2d 	.word	0x3fadde2d
 80071c8:	af749a6d 	.word	0xaf749a6d
 80071cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80071d0:	fe231671 	.word	0xfe231671
 80071d4:	3fbc71c6 	.word	0x3fbc71c6
 80071d8:	9998ebc4 	.word	0x9998ebc4
 80071dc:	3fc99999 	.word	0x3fc99999
 80071e0:	54442d18 	.word	0x54442d18
 80071e4:	bff921fb 	.word	0xbff921fb
 80071e8:	440fffff 	.word	0x440fffff
 80071ec:	7ff00000 	.word	0x7ff00000
 80071f0:	3fdbffff 	.word	0x3fdbffff
 80071f4:	3ff00000 	.word	0x3ff00000
 80071f8:	3ff2ffff 	.word	0x3ff2ffff
 80071fc:	40038000 	.word	0x40038000
 8007200:	3ff80000 	.word	0x3ff80000
 8007204:	bff00000 	.word	0xbff00000
 8007208:	080072e8 	.word	0x080072e8
 800720c:	08007308 	.word	0x08007308

08007210 <fabs>:
 8007210:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007214:	4619      	mov	r1, r3
 8007216:	4770      	bx	lr

08007218 <_init>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr

08007224 <_fini>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	bf00      	nop
 8007228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722a:	bc08      	pop	{r3}
 800722c:	469e      	mov	lr, r3
 800722e:	4770      	bx	lr
